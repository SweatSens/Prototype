
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005414  08005414  00006414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800545c  0800545c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800545c  0800545c  0000645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005464  08005464  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005464  08005464  00006464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005468  08005468  00006468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800546c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08005478  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08005478  0000716c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010503  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cd  00000000  00000000  0001753f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00019a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b30  00000000  00000000  0001a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201b0  00000000  00000000  0001b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125e5  00000000  00000000  0003b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c092c  00000000  00000000  0004db3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  0010e4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00112130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080053fc 	.word	0x080053fc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080053fc 	.word	0x080053fc

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	@ 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2uiz>:
 8000968:	004a      	lsls	r2, r1, #1
 800096a:	d211      	bcs.n	8000990 <__aeabi_d2uiz+0x28>
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000970:	d211      	bcs.n	8000996 <__aeabi_d2uiz+0x2e>
 8000972:	d50d      	bpl.n	8000990 <__aeabi_d2uiz+0x28>
 8000974:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d40e      	bmi.n	800099c <__aeabi_d2uiz+0x34>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	4770      	bx	lr
 8000990:	f04f 0000 	mov.w	r0, #0
 8000994:	4770      	bx	lr
 8000996:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099a:	d102      	bne.n	80009a2 <__aeabi_d2uiz+0x3a>
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	4770      	bx	lr
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	4770      	bx	lr

080009a8 <__aeabi_uldivmod>:
 80009a8:	b953      	cbnz	r3, 80009c0 <__aeabi_uldivmod+0x18>
 80009aa:	b94a      	cbnz	r2, 80009c0 <__aeabi_uldivmod+0x18>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	bf08      	it	eq
 80009b0:	2800      	cmpeq	r0, #0
 80009b2:	bf1c      	itt	ne
 80009b4:	f04f 31ff 	movne.w	r1, #4294967295
 80009b8:	f04f 30ff 	movne.w	r0, #4294967295
 80009bc:	f000 b96a 	b.w	8000c94 <__aeabi_idiv0>
 80009c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c8:	f000 f806 	bl	80009d8 <__udivmoddi4>
 80009cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d4:	b004      	add	sp, #16
 80009d6:	4770      	bx	lr

080009d8 <__udivmoddi4>:
 80009d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009dc:	9d08      	ldr	r5, [sp, #32]
 80009de:	460c      	mov	r4, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14e      	bne.n	8000a82 <__udivmoddi4+0xaa>
 80009e4:	4694      	mov	ip, r2
 80009e6:	458c      	cmp	ip, r1
 80009e8:	4686      	mov	lr, r0
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	d962      	bls.n	8000ab6 <__udivmoddi4+0xde>
 80009f0:	b14a      	cbz	r2, 8000a06 <__udivmoddi4+0x2e>
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	4091      	lsls	r1, r2
 80009f8:	fa20 f303 	lsr.w	r3, r0, r3
 80009fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a00:	4319      	orrs	r1, r3
 8000a02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a0a:	fa1f f68c 	uxth.w	r6, ip
 8000a0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb07 1114 	mls	r1, r7, r4, r1
 8000a1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1e:	fb04 f106 	mul.w	r1, r4, r6
 8000a22:	4299      	cmp	r1, r3
 8000a24:	d90a      	bls.n	8000a3c <__udivmoddi4+0x64>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2e:	f080 8112 	bcs.w	8000c56 <__udivmoddi4+0x27e>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 810f 	bls.w	8000c56 <__udivmoddi4+0x27e>
 8000a38:	3c02      	subs	r4, #2
 8000a3a:	4463      	add	r3, ip
 8000a3c:	1a59      	subs	r1, r3, r1
 8000a3e:	fa1f f38e 	uxth.w	r3, lr
 8000a42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a46:	fb07 1110 	mls	r1, r7, r0, r1
 8000a4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4e:	fb00 f606 	mul.w	r6, r0, r6
 8000a52:	429e      	cmp	r6, r3
 8000a54:	d90a      	bls.n	8000a6c <__udivmoddi4+0x94>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5e:	f080 80fc 	bcs.w	8000c5a <__udivmoddi4+0x282>
 8000a62:	429e      	cmp	r6, r3
 8000a64:	f240 80f9 	bls.w	8000c5a <__udivmoddi4+0x282>
 8000a68:	4463      	add	r3, ip
 8000a6a:	3802      	subs	r0, #2
 8000a6c:	1b9b      	subs	r3, r3, r6
 8000a6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a72:	2100      	movs	r1, #0
 8000a74:	b11d      	cbz	r5, 8000a7e <__udivmoddi4+0xa6>
 8000a76:	40d3      	lsrs	r3, r2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d905      	bls.n	8000a92 <__udivmoddi4+0xba>
 8000a86:	b10d      	cbz	r5, 8000a8c <__udivmoddi4+0xb4>
 8000a88:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e7f5      	b.n	8000a7e <__udivmoddi4+0xa6>
 8000a92:	fab3 f183 	clz	r1, r3
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d146      	bne.n	8000b28 <__udivmoddi4+0x150>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xcc>
 8000a9e:	4290      	cmp	r0, r2
 8000aa0:	f0c0 80f0 	bcc.w	8000c84 <__udivmoddi4+0x2ac>
 8000aa4:	1a86      	subs	r6, r0, r2
 8000aa6:	eb64 0303 	sbc.w	r3, r4, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	2d00      	cmp	r5, #0
 8000aae:	d0e6      	beq.n	8000a7e <__udivmoddi4+0xa6>
 8000ab0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab4:	e7e3      	b.n	8000a7e <__udivmoddi4+0xa6>
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	f040 8090 	bne.w	8000bdc <__udivmoddi4+0x204>
 8000abc:	eba1 040c 	sub.w	r4, r1, ip
 8000ac0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac4:	fa1f f78c 	uxth.w	r7, ip
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ace:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ad2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ada:	fb07 f006 	mul.w	r0, r7, r6
 8000ade:	4298      	cmp	r0, r3
 8000ae0:	d908      	bls.n	8000af4 <__udivmoddi4+0x11c>
 8000ae2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000aea:	d202      	bcs.n	8000af2 <__udivmoddi4+0x11a>
 8000aec:	4298      	cmp	r0, r3
 8000aee:	f200 80cd 	bhi.w	8000c8c <__udivmoddi4+0x2b4>
 8000af2:	4626      	mov	r6, r4
 8000af4:	1a1c      	subs	r4, r3, r0
 8000af6:	fa1f f38e 	uxth.w	r3, lr
 8000afa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afe:	fb08 4410 	mls	r4, r8, r0, r4
 8000b02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b06:	fb00 f707 	mul.w	r7, r0, r7
 8000b0a:	429f      	cmp	r7, r3
 8000b0c:	d908      	bls.n	8000b20 <__udivmoddi4+0x148>
 8000b0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x146>
 8000b18:	429f      	cmp	r7, r3
 8000b1a:	f200 80b0 	bhi.w	8000c7e <__udivmoddi4+0x2a6>
 8000b1e:	4620      	mov	r0, r4
 8000b20:	1bdb      	subs	r3, r3, r7
 8000b22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0x9c>
 8000b28:	f1c1 0620 	rsb	r6, r1, #32
 8000b2c:	408b      	lsls	r3, r1
 8000b2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b32:	431f      	orrs	r7, r3
 8000b34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b38:	fa04 f301 	lsl.w	r3, r4, r1
 8000b3c:	ea43 030c 	orr.w	r3, r3, ip
 8000b40:	40f4      	lsrs	r4, r6
 8000b42:	fa00 f801 	lsl.w	r8, r0, r1
 8000b46:	0c38      	lsrs	r0, r7, #16
 8000b48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000b50:	fa1f fc87 	uxth.w	ip, r7
 8000b54:	fb00 441e 	mls	r4, r0, lr, r4
 8000b58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000b60:	45a1      	cmp	r9, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x1a6>
 8000b68:	193c      	adds	r4, r7, r4
 8000b6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6e:	f080 8084 	bcs.w	8000c7a <__udivmoddi4+0x2a2>
 8000b72:	45a1      	cmp	r9, r4
 8000b74:	f240 8081 	bls.w	8000c7a <__udivmoddi4+0x2a2>
 8000b78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b7c:	443c      	add	r4, r7
 8000b7e:	eba4 0409 	sub.w	r4, r4, r9
 8000b82:	fa1f f983 	uxth.w	r9, r3
 8000b86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b96:	45a4      	cmp	ip, r4
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x1d2>
 8000b9a:	193c      	adds	r4, r7, r4
 8000b9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ba0:	d267      	bcs.n	8000c72 <__udivmoddi4+0x29a>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d965      	bls.n	8000c72 <__udivmoddi4+0x29a>
 8000ba6:	3b02      	subs	r3, #2
 8000ba8:	443c      	add	r4, r7
 8000baa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bae:	fba0 9302 	umull	r9, r3, r0, r2
 8000bb2:	eba4 040c 	sub.w	r4, r4, ip
 8000bb6:	429c      	cmp	r4, r3
 8000bb8:	46ce      	mov	lr, r9
 8000bba:	469c      	mov	ip, r3
 8000bbc:	d351      	bcc.n	8000c62 <__udivmoddi4+0x28a>
 8000bbe:	d04e      	beq.n	8000c5e <__udivmoddi4+0x286>
 8000bc0:	b155      	cbz	r5, 8000bd8 <__udivmoddi4+0x200>
 8000bc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000bca:	fa04 f606 	lsl.w	r6, r4, r6
 8000bce:	40cb      	lsrs	r3, r1
 8000bd0:	431e      	orrs	r6, r3
 8000bd2:	40cc      	lsrs	r4, r1
 8000bd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd8:	2100      	movs	r1, #0
 8000bda:	e750      	b.n	8000a7e <__udivmoddi4+0xa6>
 8000bdc:	f1c2 0320 	rsb	r3, r2, #32
 8000be0:	fa20 f103 	lsr.w	r1, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	fa24 f303 	lsr.w	r3, r4, r3
 8000bec:	4094      	lsls	r4, r2
 8000bee:	430c      	orrs	r4, r1
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf8:	fa1f f78c 	uxth.w	r7, ip
 8000bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c00:	fb08 3110 	mls	r1, r8, r0, r3
 8000c04:	0c23      	lsrs	r3, r4, #16
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f107 	mul.w	r1, r0, r7
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x24c>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c1a:	d22c      	bcs.n	8000c76 <__udivmoddi4+0x29e>
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d92a      	bls.n	8000c76 <__udivmoddi4+0x29e>
 8000c20:	3802      	subs	r0, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb01 f307 	mul.w	r3, r1, r7
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x276>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c44:	d213      	bcs.n	8000c6e <__udivmoddi4+0x296>
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	d911      	bls.n	8000c6e <__udivmoddi4+0x296>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4464      	add	r4, ip
 8000c4e:	1ae4      	subs	r4, r4, r3
 8000c50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c54:	e739      	b.n	8000aca <__udivmoddi4+0xf2>
 8000c56:	4604      	mov	r4, r0
 8000c58:	e6f0      	b.n	8000a3c <__udivmoddi4+0x64>
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e706      	b.n	8000a6c <__udivmoddi4+0x94>
 8000c5e:	45c8      	cmp	r8, r9
 8000c60:	d2ae      	bcs.n	8000bc0 <__udivmoddi4+0x1e8>
 8000c62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c6a:	3801      	subs	r0, #1
 8000c6c:	e7a8      	b.n	8000bc0 <__udivmoddi4+0x1e8>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	e7ed      	b.n	8000c4e <__udivmoddi4+0x276>
 8000c72:	4603      	mov	r3, r0
 8000c74:	e799      	b.n	8000baa <__udivmoddi4+0x1d2>
 8000c76:	4630      	mov	r0, r6
 8000c78:	e7d4      	b.n	8000c24 <__udivmoddi4+0x24c>
 8000c7a:	46d6      	mov	lr, sl
 8000c7c:	e77f      	b.n	8000b7e <__udivmoddi4+0x1a6>
 8000c7e:	4463      	add	r3, ip
 8000c80:	3802      	subs	r0, #2
 8000c82:	e74d      	b.n	8000b20 <__udivmoddi4+0x148>
 8000c84:	4606      	mov	r6, r0
 8000c86:	4623      	mov	r3, r4
 8000c88:	4608      	mov	r0, r1
 8000c8a:	e70f      	b.n	8000aac <__udivmoddi4+0xd4>
 8000c8c:	3e02      	subs	r6, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	e730      	b.n	8000af4 <__udivmoddi4+0x11c>
 8000c92:	bf00      	nop

08000c94 <__aeabi_idiv0>:
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <write_ADC>:

// includes
#include "main.h"


void write_ADC(uint8_t reg, uint8_t data){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
	uint8_t ADC_tx_buff[3] = {WRITE, reg, data};
 8000ca8:	2308      	movs	r3, #8
 8000caa:	733b      	strb	r3, [r7, #12]
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	737b      	strb	r3, [r7, #13]
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbc:	f001 f824 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, ADC_tx_buff, 3, 100);
 8000cc0:	f107 010c 	add.w	r1, r7, #12
 8000cc4:	2364      	movs	r3, #100	@ 0x64
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <write_ADC+0x4c>)
 8000cca:	f003 f850 	bl	8003d6e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd6:	f001 f817 	bl	8001d08 <HAL_GPIO_WritePin>

	return;
 8000cda:	bf00      	nop
}
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000007c 	.word	0x2000007c

08000ce8 <read_ADC>:

uint8_t read_ADC(uint8_t reg){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]

	uint8_t ADC_tx_buff[3] = {READ, reg, 0x00};
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	733b      	strb	r3, [r7, #12]
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	737b      	strb	r3, [r7, #13]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73bb      	strb	r3, [r7, #14]
	uint8_t ADC_rx_buff[3];

	// write data to ADC
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2110      	movs	r1, #16
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d06:	f000 ffff 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, ADC_tx_buff, 3, 100);
 8000d0a:	f107 010c 	add.w	r1, r7, #12
 8000d0e:	2364      	movs	r3, #100	@ 0x64
 8000d10:	2203      	movs	r2, #3
 8000d12:	4810      	ldr	r0, [pc, #64]	@ (8000d54 <read_ADC+0x6c>)
 8000d14:	f003 f82b 	bl	8003d6e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d20:	f000 fff2 	bl	8001d08 <HAL_GPIO_WritePin>

	// read data from ADC
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2c:	f000 ffec 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, ADC_rx_buff, 3, 100);
 8000d30:	f107 0108 	add.w	r1, r7, #8
 8000d34:	2364      	movs	r3, #100	@ 0x64
 8000d36:	2203      	movs	r2, #3
 8000d38:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <read_ADC+0x6c>)
 8000d3a:	f003 f98d 	bl	8004058 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f000 ffdf 	bl	8001d08 <HAL_GPIO_WritePin>

	return ADC_rx_buff[0];
 8000d4a:	7a3b      	ldrb	r3, [r7, #8]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000007c 	.word	0x2000007c

08000d58 <check_ADC>:

uint8_t check_ADC(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

	if(read_ADC(SYSTEM_STATUS) == 0x81){
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ffc3 	bl	8000ce8 <read_ADC>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b81      	cmp	r3, #129	@ 0x81
 8000d66:	d101      	bne.n	8000d6c <check_ADC+0x14>
		return 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <check_ADC+0x16>
	}
	return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <ADC_change_polarity>:

void ADC_change_polarity(void){
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0

	uint8_t REG_DATA_CGF = read_ADC(DATA_CFG);
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f7ff ffb5 	bl	8000ce8 <read_ADC>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	write_ADC(DATA_CFG, (REG_DATA_CGF|(1<<2)) );
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f7ff ff83 	bl	8000c98 <write_ADC>

	return;
 8000d92:	bf00      	nop
}
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <ADC>:

float ADC(uint8_t channel){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]

	uint8_t ADC_tx_buff[3];
	uint8_t ADC_rx_buff[3];

	ADC_tx_buff[0] = WRITE;
 8000da6:	2308      	movs	r3, #8
 8000da8:	733b      	strb	r3, [r7, #12]
	ADC_tx_buff[1]= CHANNEL_SEL;
 8000daa:	2311      	movs	r3, #17
 8000dac:	737b      	strb	r3, [r7, #13]
	ADC_tx_buff[2] = channel;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2110      	movs	r1, #16
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dba:	f000 ffa5 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, ADC_tx_buff, 3, 100);
 8000dbe:	f107 010c 	add.w	r1, r7, #12
 8000dc2:	2364      	movs	r3, #100	@ 0x64
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4822      	ldr	r0, [pc, #136]	@ (8000e50 <ADC+0xb4>)
 8000dc8:	f002 ffd1 	bl	8003d6e <HAL_SPI_Transmit>
	// nothing
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2110      	movs	r1, #16
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd4:	f000 ff98 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2110      	movs	r1, #16
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de0:	f000 ff92 	bl	8001d08 <HAL_GPIO_WritePin>
	// nothing (conversion is happening)
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2110      	movs	r1, #16
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dec:	f000 ff8c 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2110      	movs	r1, #16
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f000 ff86 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, ADC_rx_buff, 3, 100);
 8000dfc:	f107 0108 	add.w	r1, r7, #8
 8000e00:	2364      	movs	r3, #100	@ 0x64
 8000e02:	2203      	movs	r2, #3
 8000e04:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <ADC+0xb4>)
 8000e06:	f003 f927 	bl	8004058 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e12:	f000 ff79 	bl	8001d08 <HAL_GPIO_WritePin>

	uint16_t result = (ADC_rx_buff[0] << 8) + ADC_rx_buff[1];
 8000e16:	7a3b      	ldrb	r3, [r7, #8]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	7a7a      	ldrb	r2, [r7, #9]
 8000e1e:	4413      	add	r3, r2
 8000e20:	82fb      	strh	r3, [r7, #22]
	float val = (float)result * 33/655360;
 8000e22:	8afb      	ldrh	r3, [r7, #22]
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000e54 <ADC+0xb8>
 8000e30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e34:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000e58 <ADC+0xbc>
 8000e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3c:	edc7 7a04 	vstr	s15, [r7, #16]

	return val;
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	ee07 3a90 	vmov	s15, r3
}
 8000e46:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000007c 	.word	0x2000007c
 8000e54:	42040000 	.word	0x42040000
 8000e58:	49200000 	.word	0x49200000

08000e5c <write_DAC>:
 */

// includes
#include "main.h"

void write_DAC(uint8_t dac, uint8_t reg, uint16_t data){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80bb      	strh	r3, [r7, #4]

	uint8_t DAC_tx_buff[3] = {(0x0F&reg), (uint16_t)(data>>8), (uint16_t)(data&0x00FF)};
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	733b      	strb	r3, [r7, #12]
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	0a1b      	lsrs	r3, r3, #8
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	737b      	strb	r3, [r7, #13]
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	73bb      	strb	r3, [r7, #14]
	uint8_t DAC_rx_buff[3];
	if(dac == 1){
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d12a      	bne.n	8000ee4 <write_DAC+0x88>
		// write data to DAC1
		HAL_GPIO_WritePin(GPIOA, DAC1_CS_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e98:	f000 ff36 	bl	8001d08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, DAC_tx_buff, 3, 100);
 8000e9c:	f107 010c 	add.w	r1, r7, #12
 8000ea0:	2364      	movs	r3, #100	@ 0x64
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4824      	ldr	r0, [pc, #144]	@ (8000f38 <write_DAC+0xdc>)
 8000ea6:	f002 ff62 	bl	8003d6e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, DAC1_CS_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb4:	f000 ff28 	bl	8001d08 <HAL_GPIO_WritePin>

		// read data from DAC1
		HAL_GPIO_WritePin(GPIOA, DAC1_CS_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec2:	f000 ff21 	bl	8001d08 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, DAC_rx_buff, 3, 100);
 8000ec6:	f107 0108 	add.w	r1, r7, #8
 8000eca:	2364      	movs	r3, #100	@ 0x64
 8000ecc:	2203      	movs	r2, #3
 8000ece:	481a      	ldr	r0, [pc, #104]	@ (8000f38 <write_DAC+0xdc>)
 8000ed0:	f003 f8c2 	bl	8004058 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, DAC1_CS_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ede:	f000 ff13 	bl	8001d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_RESET);
		HAL_SPI_Receive(&hspi1, DAC_rx_buff, 3, 100);
		HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_SET);
}

	return;
 8000ee2:	e025      	b.n	8000f30 <write_DAC+0xd4>
	else if(dac == 2){
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d122      	bne.n	8000f30 <write_DAC+0xd4>
		HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	4813      	ldr	r0, [pc, #76]	@ (8000f3c <write_DAC+0xe0>)
 8000ef0:	f000 ff0a 	bl	8001d08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, DAC_tx_buff, 3, 100);
 8000ef4:	f107 010c 	add.w	r1, r7, #12
 8000ef8:	2364      	movs	r3, #100	@ 0x64
 8000efa:	2203      	movs	r2, #3
 8000efc:	480e      	ldr	r0, [pc, #56]	@ (8000f38 <write_DAC+0xdc>)
 8000efe:	f002 ff36 	bl	8003d6e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2101      	movs	r1, #1
 8000f06:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <write_DAC+0xe0>)
 8000f08:	f000 fefe 	bl	8001d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <write_DAC+0xe0>)
 8000f12:	f000 fef9 	bl	8001d08 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, DAC_rx_buff, 3, 100);
 8000f16:	f107 0108 	add.w	r1, r7, #8
 8000f1a:	2364      	movs	r3, #100	@ 0x64
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <write_DAC+0xdc>)
 8000f20:	f003 f89a 	bl	8004058 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2101      	movs	r1, #1
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <write_DAC+0xe0>)
 8000f2a:	f000 feed 	bl	8001d08 <HAL_GPIO_WritePin>
	return;
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
}
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000007c 	.word	0x2000007c
 8000f3c:	48000400 	.word	0x48000400

08000f40 <DAC_set>:
	uint16_t result  = (uint16_t)((DAC_rx_buff[1] << 8) + DAC_rx_buff[2]);

	return result;
}

void DAC_set(uint8_t dac, uint8_t channel, float voltage){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	ed87 0a00 	vstr	s0, [r7]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]

	uint16_t result = (uint16_t)(voltage/33.0*655360.0);
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f7ff fa9d 	bl	8000494 <__aeabi_f2d>
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <DAC_set+0x60>)
 8000f60:	f7ff fc1a 	bl	8000798 <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <DAC_set+0x64>)
 8000f72:	f7ff fae7 	bl	8000544 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fcf3 	bl	8000968 <__aeabi_d2uiz>
 8000f82:	4603      	mov	r3, r0
 8000f84:	81fb      	strh	r3, [r7, #14]
	uint8_t reg = channel + 8;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	3308      	adds	r3, #8
 8000f8a:	737b      	strb	r3, [r7, #13]

	write_DAC(dac, reg, result);
 8000f8c:	89fa      	ldrh	r2, [r7, #14]
 8000f8e:	7b79      	ldrb	r1, [r7, #13]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff62 	bl	8000e5c <write_DAC>

	return;
 8000f98:	bf00      	nop
}
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40408000 	.word	0x40408000
 8000fa4:	41240000 	.word	0x41240000

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 fbc2 	bl	8001736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f87d 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 f98b 	bl	80012d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fba:	f000 f959 	bl	8001270 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000fbe:	f000 f919 	bl	80011f4 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000fc2:	f000 f8d7 	bl	8001174 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // ADC change polarity SPI for DAC's
  ADC_change_polarity();
 8000fc6:	f7ff fed4 	bl	8000d72 <ADC_change_polarity>
  SPI1_change_polarity();
 8000fca:	f000 fa09 	bl	80013e0 <SPI1_change_polarity>
  check_ADC();
 8000fce:	f7ff fec3 	bl	8000d58 <check_ADC>
  // disable internal reference DAC's
  write_DAC(DAC_1, CONFIG, 0x0100);
 8000fd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f7ff ff3f 	bl	8000e5c <write_DAC>
  write_DAC(DAC_2, CONFIG, 0x0100);
 8000fde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f7ff ff39 	bl	8000e5c <write_DAC>

  uint8_t I2C_addrss = 0b10010000;
 8000fea:	2390      	movs	r3, #144	@ 0x90
 8000fec:	75fb      	strb	r3, [r7, #23]
  uint8_t I2C_tx_data[1];
  uint8_t I2C_rx_data[2];
  int16_t I2C_temp = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	82bb      	strh	r3, [r7, #20]
  float temp = 0.0;
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // get temperature
	  I2C_tx_data[0] = 0x01;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	723b      	strb	r3, [r7, #8]
	  HAL_I2C_Master_Transmit(&hi2c1, I2C_addrss, I2C_tx_data, 1, 100);
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	f107 0208 	add.w	r2, r7, #8
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	4827      	ldr	r0, [pc, #156]	@ (80010a8 <main+0x100>)
 800100c:	f000 ff30 	bl	8001e70 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, I2C_addrss, I2C_rx_data, 2, 100);
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	b299      	uxth	r1, r3
 8001014:	1d3a      	adds	r2, r7, #4
 8001016:	2364      	movs	r3, #100	@ 0x64
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2302      	movs	r3, #2
 800101c:	4822      	ldr	r0, [pc, #136]	@ (80010a8 <main+0x100>)
 800101e:	f001 f83f 	bl	80020a0 <HAL_I2C_Master_Receive>
	  if((I2C_rx_data[1]&0x20) == 0x20){
 8001022:	797b      	ldrb	r3, [r7, #5]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	2b00      	cmp	r3, #0
 800102a:	d027      	beq.n	800107c <main+0xd4>
		  I2C_tx_data[0] = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	723b      	strb	r3, [r7, #8]
		  HAL_I2C_Master_Transmit(&hi2c1, I2C_addrss, I2C_tx_data, 1, 100);
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	b299      	uxth	r1, r3
 8001034:	f107 0208 	add.w	r2, r7, #8
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	481a      	ldr	r0, [pc, #104]	@ (80010a8 <main+0x100>)
 8001040:	f000 ff16 	bl	8001e70 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c1, I2C_addrss, I2C_rx_data, 2, 100);
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	b299      	uxth	r1, r3
 8001048:	1d3a      	adds	r2, r7, #4
 800104a:	2364      	movs	r3, #100	@ 0x64
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2302      	movs	r3, #2
 8001050:	4815      	ldr	r0, [pc, #84]	@ (80010a8 <main+0x100>)
 8001052:	f001 f825 	bl	80020a0 <HAL_I2C_Master_Receive>
		  I2C_temp = (I2C_rx_data[0]<<8) + I2C_rx_data[1];
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b29b      	uxth	r3, r3
 800105c:	797a      	ldrb	r2, [r7, #5]
 800105e:	4413      	add	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	82bb      	strh	r3, [r7, #20]
		  temp = (float)I2C_temp * 0.0078125;
 8001064:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001070:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80010ac <main+0x104>
 8001074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001078:	edc7 7a04 	vstr	s15, [r7, #16]
	  }

	  // DAC1 set value at 1.00 VDC
	  DAC_set(DAC_1, CH1, 1.00);
 800107c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001080:	2101      	movs	r1, #1
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff ff5c 	bl	8000f40 <DAC_set>
	  DAC_set(DAC_1, CH2, 1.00);
 8001088:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800108c:	2102      	movs	r1, #2
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff ff56 	bl	8000f40 <DAC_set>

	  // ADC
	  float volt = ADC(CH0);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fe81 	bl	8000d9c <ADC>
 800109a:	ed87 0a03 	vstr	s0, [r7, #12]


	  HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a2:	f000 fbbd 	bl	8001820 <HAL_Delay>
  {
 80010a6:	e7a7      	b.n	8000ff8 <main+0x50>
 80010a8:	20000028 	.word	0x20000028
 80010ac:	3c000000 	.word	0x3c000000

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	@ 0x58
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2244      	movs	r2, #68	@ 0x44
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 f96f 	bl	80053a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010d6:	f001 fc21 	bl	800291c <HAL_PWREx_ControlVoltageScaling>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e0:	f000 f990 	bl	8001404 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010e4:	f001 fbfc 	bl	80028e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <SystemClock_Config+0xc0>)
 80010ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ee:	4a20      	ldr	r2, [pc, #128]	@ (8001170 <SystemClock_Config+0xc0>)
 80010f0:	f023 0318 	bic.w	r3, r3, #24
 80010f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010f8:	2314      	movs	r3, #20
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001100:	2301      	movs	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001108:	2360      	movs	r3, #96	@ 0x60
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001110:	2301      	movs	r3, #1
 8001112:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001118:	2328      	movs	r3, #40	@ 0x28
 800111a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800111c:	2307      	movs	r3, #7
 800111e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fc4b 	bl	80029c8 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001138:	f000 f964 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2303      	movs	r3, #3
 8001142:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f002 f84b 	bl	80031f0 <HAL_RCC_ClockConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001160:	f000 f950 	bl	8001404 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001164:	f002 fc5e 	bl	8003a24 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001168:	bf00      	nop
 800116a:	3758      	adds	r7, #88	@ 0x58
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000

08001174 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_I2C1_Init+0x74>)
 800117a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <MX_I2C1_Init+0x78>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <MX_I2C1_Init+0x74>)
 8001180:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <MX_I2C1_Init+0x7c>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_I2C1_Init+0x74>)
 800118c:	2201      	movs	r2, #1
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_I2C1_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ae:	480e      	ldr	r0, [pc, #56]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011b0:	f000 fdc2 	bl	8001d38 <HAL_I2C_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ba:	f000 f923 	bl	8001404 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011c2:	f001 faf5 	bl	80027b0 <HAL_I2CEx_ConfigAnalogFilter>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011cc:	f000 f91a 	bl	8001404 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011d4:	f001 fb37 	bl	8002846 <HAL_I2CEx_ConfigDigitalFilter>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011de:	f000 f911 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000028 	.word	0x20000028
 80011ec:	40005400 	.word	0x40005400
 80011f0:	10909cec 	.word	0x10909cec

080011f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <MX_SPI1_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <MX_SPI1_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001200:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_SPI1_Init+0x74>)
 800120e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <MX_SPI1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001226:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_SPI1_Init+0x74>)
 800122a:	2228      	movs	r2, #40	@ 0x28
 800122c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_SPI1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001242:	2207      	movs	r2, #7
 8001244:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_SPI1_Init+0x74>)
 800124e:	2208      	movs	r2, #8
 8001250:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001254:	f002 fce8 	bl	8003c28 <HAL_SPI_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 f8d1 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000007c 	.word	0x2000007c
 800126c:	40013000 	.word	0x40013000

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001276:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <MX_USART2_UART_Init+0x5c>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_USART2_UART_Init+0x58>)
 80012b4:	f003 fbe6 	bl	8004a84 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012be:	f000 f8a1 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000e0 	.word	0x200000e0
 80012cc:	40004400 	.word	0x40004400

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <MX_GPIO_Init+0x108>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	4a3b      	ldr	r2, [pc, #236]	@ (80013d8 <MX_GPIO_Init+0x108>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f2:	4b39      	ldr	r3, [pc, #228]	@ (80013d8 <MX_GPIO_Init+0x108>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <MX_GPIO_Init+0x108>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a35      	ldr	r2, [pc, #212]	@ (80013d8 <MX_GPIO_Init+0x108>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <MX_GPIO_Init+0x108>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <MX_GPIO_Init+0x108>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a2f      	ldr	r2, [pc, #188]	@ (80013d8 <MX_GPIO_Init+0x108>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001322:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <MX_GPIO_Init+0x108>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin|DAC1_CS_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001334:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001338:	f000 fce6 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin|DAC2_DIV_Pin|DAC1_GAIN_Pin|DAC1_DIV_Pin
 800133c:	2201      	movs	r2, #1
 800133e:	219b      	movs	r1, #155	@ 0x9b
 8001340:	4826      	ldr	r0, [pc, #152]	@ (80013dc <MX_GPIO_Init+0x10c>)
 8001342:	f000 fce1 	bl	8001d08 <HAL_GPIO_WritePin>
                          |DAC2_GAIN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC1_LAC_Pin|DAC2_LAC_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 800134c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001350:	f000 fcda 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC1_RST_Pin|DAC2_RST_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2160      	movs	r1, #96	@ 0x60
 8001358:	4820      	ldr	r0, [pc, #128]	@ (80013dc <MX_GPIO_Init+0x10c>)
 800135a:	f000 fcd5 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800135e:	2302      	movs	r3, #2
 8001360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001362:	230b      	movs	r3, #11
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001374:	f000 fb5e 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TempAlert_Pin */
  GPIO_InitStruct.Pin = TempAlert_Pin;
 8001378:	2308      	movs	r3, #8
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TempAlert_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f000 fb51 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin DAC1_LAC_Pin DAC1_CS_Pin DAC2_LAC_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|DAC1_LAC_Pin|DAC1_CS_Pin|DAC2_LAC_Pin;
 8001392:	f641 1310 	movw	r3, #6416	@ 0x1910
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f000 fb41 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC2_CS_Pin DAC2_DIV_Pin DAC1_GAIN_Pin DAC1_DIV_Pin
                           DAC1_RST_Pin DAC2_RST_Pin DAC2_GAIN_Pin */
  GPIO_InitStruct.Pin = DAC2_CS_Pin|DAC2_DIV_Pin|DAC1_GAIN_Pin|DAC1_DIV_Pin
 80013b2:	23fb      	movs	r3, #251	@ 0xfb
 80013b4:	60fb      	str	r3, [r7, #12]
                          |DAC1_RST_Pin|DAC2_RST_Pin|DAC2_GAIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_GPIO_Init+0x10c>)
 80013ca:	f000 fb33 	bl	8001a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000400 	.word	0x48000400

080013e0 <SPI1_change_polarity>:

/* USER CODE BEGIN 4 */
void SPI1_change_polarity(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <SPI1_change_polarity+0x20>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	611a      	str	r2, [r3, #16]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <SPI1_change_polarity+0x20>)
 80013ec:	f002 fc1c 	bl	8003c28 <HAL_SPI_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SPI1_change_polarity+0x1a>
  {
    Error_Handler();
 80013f6:	f000 f805 	bl	8001404 <Error_Handler>
  }

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000007c 	.word	0x2000007c

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_MspInit+0x44>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <HAL_MspInit+0x44>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6613      	str	r3, [r2, #96]	@ 0x60
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_MspInit+0x44>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_MspInit+0x44>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_MspInit+0x44>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001438:	6593      	str	r3, [r2, #88]	@ 0x58
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_MspInit+0x44>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b09e      	sub	sp, #120	@ 0x78
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	2254      	movs	r2, #84	@ 0x54
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f003 ff92 	bl	80053a2 <memset>
  if(hi2c->Instance==I2C1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1f      	ldr	r2, [pc, #124]	@ (8001500 <HAL_I2C_MspInit+0xa8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d137      	bne.n	80014f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001488:	2340      	movs	r3, #64	@ 0x40
 800148a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4618      	mov	r0, r3
 8001496:	f002 f8cf 	bl	8003638 <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014a0:	f7ff ffb0 	bl	8001404 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <HAL_I2C_MspInit+0xac>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	4a16      	ldr	r2, [pc, #88]	@ (8001504 <HAL_I2C_MspInit+0xac>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_I2C_MspInit+0xac>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	2312      	movs	r3, #18
 80014c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ce:	2304      	movs	r3, #4
 80014d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014dc:	f000 faaa 	bl	8001a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_I2C_MspInit+0xac>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <HAL_I2C_MspInit+0xac>)
 80014e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_I2C_MspInit+0xac>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3778      	adds	r7, #120	@ 0x78
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40005400 	.word	0x40005400
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	@ 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <HAL_SPI_MspInit+0x7c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d128      	bne.n	800157c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <HAL_SPI_MspInit+0x80>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152e:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <HAL_SPI_MspInit+0x80>)
 8001530:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001534:	6613      	str	r3, [r2, #96]	@ 0x60
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <HAL_SPI_MspInit+0x80>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_SPI_MspInit+0x80>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a10      	ldr	r2, [pc, #64]	@ (8001588 <HAL_SPI_MspInit+0x80>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <HAL_SPI_MspInit+0x80>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800155a:	23e0      	movs	r3, #224	@ 0xe0
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800156a:	2305      	movs	r3, #5
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001578:	f000 fa5c 	bl	8001a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40013000 	.word	0x40013000
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b09e      	sub	sp, #120	@ 0x78
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2254      	movs	r2, #84	@ 0x54
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fef8 	bl	80053a2 <memset>
  if(huart->Instance==USART2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a28      	ldr	r2, [pc, #160]	@ (8001658 <HAL_UART_MspInit+0xcc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d148      	bne.n	800164e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015bc:	2302      	movs	r3, #2
 80015be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 f835 	bl	8003638 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015d4:	f7ff ff16 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d8:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_UART_MspInit+0xd0>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	4a1f      	ldr	r2, [pc, #124]	@ (800165c <HAL_UART_MspInit+0xd0>)
 80015de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e4:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <HAL_UART_MspInit+0xd0>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <HAL_UART_MspInit+0xd0>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_UART_MspInit+0xd0>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <HAL_UART_MspInit+0xd0>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001608:	2304      	movs	r3, #4
 800160a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001618:	2307      	movs	r3, #7
 800161a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001626:	f000 fa05 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800162a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800162e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800163c:	2303      	movs	r3, #3
 800163e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f000 f9f3 	bl	8001a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3778      	adds	r7, #120	@ 0x78
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40004400 	.word	0x40004400
 800165c:	40021000 	.word	0x40021000

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <NMI_Handler+0x4>

08001668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <UsageFault_Handler+0x4>

08001688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b6:	f000 f893 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e8:	f7ff ffea 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopForever+0xe>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopForever+0x16>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001712:	f003 fe4f 	bl	80053b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001716:	f7ff fc47 	bl	8000fa8 <main>

0800171a <LoopForever>:

LoopForever:
    b LoopForever
 800171a:	e7fe      	b.n	800171a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800171c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001728:	0800546c 	.word	0x0800546c
  ldr r2, =_sbss
 800172c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001730:	2000016c 	.word	0x2000016c

08001734 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_IRQHandler>

08001736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f943 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f80e 	bl	8001768 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e001      	b.n	800175c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001758:	f7ff fe5a 	bl	8001410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800175c:	79fb      	ldrb	r3, [r7, #7]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001774:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_InitTick+0x6c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_InitTick+0x70>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_InitTick+0x6c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f941 	bl	8001a1a <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10f      	bne.n	80017be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d809      	bhi.n	80017b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f919 	bl	80019e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b0:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_InitTick+0x74>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e007      	b.n	80017c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e004      	b.n	80017c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	e001      	b.n	80017c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008
 8001804:	20000168 	.word	0x20000168

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000168 	.word	0x20000168

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	@ (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	@ (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	@ 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff47 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff5c 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffb0 	bl	8001988 <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	e148      	b.n	8001cd6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 813a 	beq.w	8001cd0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x40>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	6939      	ldr	r1, [r7, #16]
 8001b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0203 	and.w	r2, r3, #3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8094 	beq.w	8001cd0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	4b52      	ldr	r3, [pc, #328]	@ (8001cf4 <HAL_GPIO_Init+0x2c0>)
 8001baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bac:	4a51      	ldr	r2, [pc, #324]	@ (8001cf4 <HAL_GPIO_Init+0x2c0>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf4 <HAL_GPIO_Init+0x2c0>)
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf8 <HAL_GPIO_Init+0x2c4>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_Init+0x1d4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a43      	ldr	r2, [pc, #268]	@ (8001cfc <HAL_GPIO_Init+0x2c8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x1d0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a42      	ldr	r2, [pc, #264]	@ (8001d00 <HAL_GPIO_Init+0x2cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e004      	b.n	8001c0a <HAL_GPIO_Init+0x1d6>
 8001c00:	2307      	movs	r3, #7
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0x1d6>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_GPIO_Init+0x1d6>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	f002 0203 	and.w	r2, r2, #3
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	4093      	lsls	r3, r2
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c1a:	4937      	ldr	r1, [pc, #220]	@ (8001cf8 <HAL_GPIO_Init+0x2c4>)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c28:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c52:	4b2c      	ldr	r3, [pc, #176]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c76:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c7c:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ca0:	4a18      	ldr	r2, [pc, #96]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cca:	4a0e      	ldr	r2, [pc, #56]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f47f aeaf 	bne.w	8001a44 <HAL_GPIO_Init+0x10>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	48000400 	.word	0x48000400
 8001d00:	48000800 	.word	0x48000800
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e08d      	b.n	8001e66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fb7a 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	@ 0x24
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	e006      	b.n	8001dc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001dbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d108      	bne.n	8001dda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	e007      	b.n	8001dea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69d9      	ldr	r1, [r3, #28]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1a      	ldr	r2, [r3, #32]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	817b      	strh	r3, [r7, #10]
 8001e80:	4613      	mov	r3, r2
 8001e82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	f040 80fd 	bne.w	800208c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x30>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0f6      	b.n	800208e <HAL_I2C_Master_Transmit+0x21e>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ea8:	f7ff fcae 	bl	8001808 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2319      	movs	r3, #25
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fa0a 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0e1      	b.n	800208e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2221      	movs	r2, #33	@ 0x21
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	893a      	ldrh	r2, [r7, #8]
 8001eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2bff      	cmp	r3, #255	@ 0xff
 8001efa:	d906      	bls.n	8001f0a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	22ff      	movs	r2, #255	@ 0xff
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001f02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e007      	b.n	8001f1a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f18:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d024      	beq.n	8001f6c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002098 <HAL_I2C_Master_Transmit+0x228>)
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fbf1 	bl	800274c <I2C_TransferConfig>
 8001f6a:	e066      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	8979      	ldrh	r1, [r7, #10]
 8001f74:	4b48      	ldr	r3, [pc, #288]	@ (8002098 <HAL_I2C_Master_Transmit+0x228>)
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fbe6 	bl	800274c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f80:	e05b      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	6a39      	ldr	r1, [r7, #32]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f9f3 	bl	8002372 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e07b      	b.n	800208e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d034      	beq.n	800203a <HAL_I2C_Master_Transmit+0x1ca>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d130      	bne.n	800203a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2180      	movs	r1, #128	@ 0x80
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f976 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e04d      	b.n	800208e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2bff      	cmp	r3, #255	@ 0xff
 8001ffa:	d90e      	bls.n	800201a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	22ff      	movs	r2, #255	@ 0xff
 8002000:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002006:	b2da      	uxtb	r2, r3
 8002008:	8979      	ldrh	r1, [r7, #10]
 800200a:	2300      	movs	r3, #0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fb9a 	bl	800274c <I2C_TransferConfig>
 8002018:	e00f      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002028:	b2da      	uxtb	r2, r3
 800202a:	8979      	ldrh	r1, [r7, #10]
 800202c:	2300      	movs	r3, #0
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fb89 	bl	800274c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d19e      	bne.n	8001f82 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	6a39      	ldr	r1, [r7, #32]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f9d9 	bl	8002400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e01a      	b.n	800208e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2220      	movs	r2, #32
 800205e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6859      	ldr	r1, [r3, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <HAL_I2C_Master_Transmit+0x22c>)
 800206c:	400b      	ands	r3, r1
 800206e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	80002000 	.word	0x80002000
 800209c:	fe00e800 	.word	0xfe00e800

080020a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	461a      	mov	r2, r3
 80020ac:	460b      	mov	r3, r1
 80020ae:	817b      	strh	r3, [r7, #10]
 80020b0:	4613      	mov	r3, r2
 80020b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b20      	cmp	r3, #32
 80020be:	f040 80db 	bne.w	8002278 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_I2C_Master_Receive+0x30>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0d4      	b.n	800227a <HAL_I2C_Master_Receive+0x1da>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020d8:	f7ff fb96 	bl	8001808 <HAL_GetTick>
 80020dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2319      	movs	r3, #25
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f8f2 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0bf      	b.n	800227a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2222      	movs	r2, #34	@ 0x22
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2210      	movs	r2, #16
 8002106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	893a      	ldrh	r2, [r7, #8]
 800211a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	2bff      	cmp	r3, #255	@ 0xff
 800212a:	d90e      	bls.n	800214a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	22ff      	movs	r2, #255	@ 0xff
 8002130:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002136:	b2da      	uxtb	r2, r3
 8002138:	8979      	ldrh	r1, [r7, #10]
 800213a:	4b52      	ldr	r3, [pc, #328]	@ (8002284 <HAL_I2C_Master_Receive+0x1e4>)
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb02 	bl	800274c <I2C_TransferConfig>
 8002148:	e06d      	b.n	8002226 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	b2da      	uxtb	r2, r3
 800215a:	8979      	ldrh	r1, [r7, #10]
 800215c:	4b49      	ldr	r3, [pc, #292]	@ (8002284 <HAL_I2C_Master_Receive+0x1e4>)
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 faf1 	bl	800274c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800216a:	e05c      	b.n	8002226 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	6a39      	ldr	r1, [r7, #32]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f989 	bl	8002488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e07c      	b.n	800227a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d034      	beq.n	8002226 <HAL_I2C_Master_Receive+0x186>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d130      	bne.n	8002226 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2200      	movs	r2, #0
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f880 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e04d      	b.n	800227a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2bff      	cmp	r3, #255	@ 0xff
 80021e6:	d90e      	bls.n	8002206 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	22ff      	movs	r2, #255	@ 0xff
 80021ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	8979      	ldrh	r1, [r7, #10]
 80021f6:	2300      	movs	r3, #0
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 faa4 	bl	800274c <I2C_TransferConfig>
 8002204:	e00f      	b.n	8002226 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	b2da      	uxtb	r2, r3
 8002216:	8979      	ldrh	r1, [r7, #10]
 8002218:	2300      	movs	r3, #0
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fa93 	bl	800274c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d19d      	bne.n	800216c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	6a39      	ldr	r1, [r7, #32]
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f8e3 	bl	8002400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e01a      	b.n	800227a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2220      	movs	r2, #32
 800224a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <HAL_I2C_Master_Receive+0x1e8>)
 8002258:	400b      	ands	r3, r1
 800225a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	80002400 	.word	0x80002400
 8002288:	fe00e800 	.word	0xfe00e800

0800228c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d103      	bne.n	80022aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d007      	beq.n	80022c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	619a      	str	r2, [r3, #24]
  }
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e4:	e031      	b.n	800234a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d02d      	beq.n	800234a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ee:	f7ff fa8b 	bl	8001808 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d302      	bcc.n	8002304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d122      	bne.n	800234a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	429a      	cmp	r2, r3
 8002320:	d113      	bne.n	800234a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4013      	ands	r3, r2
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	429a      	cmp	r2, r3
 8002366:	d0be      	beq.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800237e:	e033      	b.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f901 	bl	800258c <I2C_IsErrorOccurred>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e031      	b.n	80023f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239a:	d025      	beq.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239c:	f7ff fa34 	bl	8001808 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d302      	bcc.n	80023b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11a      	bne.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d013      	beq.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e007      	b.n	80023f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d1c4      	bne.n	8002380 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240c:	e02f      	b.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8ba 	bl	800258c <I2C_IsErrorOccurred>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02d      	b.n	800247e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002422:	f7ff f9f1 	bl	8001808 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11a      	bne.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b20      	cmp	r3, #32
 8002444:	d013      	beq.n	800246e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e007      	b.n	800247e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d1c8      	bne.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002494:	e06b      	b.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f876 	bl	800258c <I2C_IsErrorOccurred>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e069      	b.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d138      	bne.n	800252a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d105      	bne.n	80024d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e055      	b.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d107      	bne.n	80024f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2210      	movs	r2, #16
 80024e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2204      	movs	r2, #4
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80024ee:	e002      	b.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2220      	movs	r2, #32
 80024fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b1f      	ldr	r3, [pc, #124]	@ (8002588 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800250a:	400b      	ands	r3, r1
 800250c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e029      	b.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7ff f96d 	bl	8001808 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d116      	bne.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d00f      	beq.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f043 0220 	orr.w	r2, r3, #32
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e007      	b.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b04      	cmp	r3, #4
 800257a:	d18c      	bne.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	fe00e800 	.word	0xfe00e800

0800258c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	@ 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d068      	beq.n	800268a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2210      	movs	r2, #16
 80025be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025c0:	e049      	b.n	8002656 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d045      	beq.n	8002656 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff f91d 	bl	8001808 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_IsErrorOccurred+0x54>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d13a      	bne.n	8002656 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002602:	d121      	bne.n	8002648 <I2C_IsErrorOccurred+0xbc>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800260a:	d01d      	beq.n	8002648 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b20      	cmp	r3, #32
 8002610:	d01a      	beq.n	8002648 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002620:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002622:	f7ff f8f1 	bl	8001808 <HAL_GetTick>
 8002626:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002628:	e00e      	b.n	8002648 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800262a:	f7ff f8ed 	bl	8001808 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b19      	cmp	r3, #25
 8002636:	d907      	bls.n	8002648 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f043 0320 	orr.w	r3, r3, #32
 800263e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002646:	e006      	b.n	8002656 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b20      	cmp	r3, #32
 8002654:	d1e9      	bne.n	800262a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d003      	beq.n	800266c <I2C_IsErrorOccurred+0xe0>
 8002664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0aa      	beq.n	80025c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800266c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2220      	movs	r2, #32
 800267a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80026f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01c      	beq.n	800273a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fdc3 	bl	800228c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <I2C_IsErrorOccurred+0x1bc>)
 8002712:	400b      	ands	r3, r1
 8002714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800273a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800273e:	4618      	mov	r0, r3
 8002740:	3728      	adds	r7, #40	@ 0x28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	fe00e800 	.word	0xfe00e800

0800274c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	4613      	mov	r3, r2
 800275c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002764:	7a7b      	ldrb	r3, [r7, #9]
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800276c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	4313      	orrs	r3, r2
 8002776:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800277a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <I2C_TransferConfig+0x60>)
 800278c:	430b      	orrs	r3, r1
 800278e:	43db      	mvns	r3, r3
 8002790:	ea02 0103 	and.w	r1, r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	03ff63ff 	.word	0x03ff63ff

080027b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d138      	bne.n	8002838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e032      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	@ 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	d139      	bne.n	80028d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002866:	2302      	movs	r3, #2
 8002868:	e033      	b.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2224      	movs	r2, #36	@ 0x24
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40007000 	.word	0x40007000

08002900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002904:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <HAL_PWREx_GetVoltageRange+0x18>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40007000 	.word	0x40007000

0800291c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800292a:	d130      	bne.n	800298e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800292c:	4b23      	ldr	r3, [pc, #140]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002938:	d038      	beq.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800293a:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002942:	4a1e      	ldr	r2, [pc, #120]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002944:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800294a:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2232      	movs	r2, #50	@ 0x32
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	4a1b      	ldr	r2, [pc, #108]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0c9b      	lsrs	r3, r3, #18
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002960:	e002      	b.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b01      	subs	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002968:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002974:	d102      	bne.n	800297c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f2      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800297c:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002988:	d110      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800298e:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299a:	d007      	beq.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029a4:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40007000 	.word	0x40007000
 80029c0:	20000000 	.word	0x20000000
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f000 bc02 	b.w	80031e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029dc:	4b96      	ldr	r3, [pc, #600]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e6:	4b94      	ldr	r3, [pc, #592]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80e4 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4c>
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	f040 808b 	bne.w	8002b22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	f040 8087 	bne.w	8002b22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a14:	4b88      	ldr	r3, [pc, #544]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_OscConfig+0x64>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e3d9      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	4b81      	ldr	r3, [pc, #516]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <HAL_RCC_OscConfig+0x7e>
 8002a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a44:	e005      	b.n	8002a52 <HAL_RCC_OscConfig+0x8a>
 8002a46:	4b7c      	ldr	r3, [pc, #496]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d223      	bcs.n	8002a9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fd8c 	bl	8003578 <RCC_SetFlashLatencyFromMSIRange>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e3ba      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6a:	4b73      	ldr	r3, [pc, #460]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a72      	ldr	r2, [pc, #456]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b70      	ldr	r3, [pc, #448]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	496d      	ldr	r1, [pc, #436]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a88:	4b6b      	ldr	r3, [pc, #428]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	4968      	ldr	r1, [pc, #416]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
 8002a9c:	e025      	b.n	8002aea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9e:	4b66      	ldr	r3, [pc, #408]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a65      	ldr	r2, [pc, #404]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b63      	ldr	r3, [pc, #396]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4960      	ldr	r1, [pc, #384]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	495b      	ldr	r1, [pc, #364]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fd4c 	bl	8003578 <RCC_SetFlashLatencyFromMSIRange>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e37a      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aea:	f000 fc81 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b51      	ldr	r3, [pc, #324]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4950      	ldr	r1, [pc, #320]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	4a4e      	ldr	r2, [pc, #312]	@ (8002c40 <HAL_RCC_OscConfig+0x278>)
 8002b08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fe2a 	bl	8001768 <HAL_InitTick>
 8002b14:	4603      	mov	r3, r0
 8002b16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d052      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	e35e      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d032      	beq.n	8002b90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b2a:	4b43      	ldr	r3, [pc, #268]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a42      	ldr	r2, [pc, #264]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fe67 	bl	8001808 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fe63 	bl	8001808 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e347      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b50:	4b39      	ldr	r3, [pc, #228]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5c:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a35      	ldr	r2, [pc, #212]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b62:	f043 0308 	orr.w	r3, r3, #8
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b33      	ldr	r3, [pc, #204]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4930      	ldr	r1, [pc, #192]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	492b      	ldr	r1, [pc, #172]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
 8002b8e:	e01a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b90:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a28      	ldr	r2, [pc, #160]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fe34 	bl	8001808 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fe30 	bl	8001808 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e314      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1dc>
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d073      	beq.n	8002cba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_OscConfig+0x21c>
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d10e      	bne.n	8002bfc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d063      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d15f      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e2f1      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x24c>
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e025      	b.n	8002c60 <HAL_RCC_OscConfig+0x298>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c1c:	d114      	bne.n	8002c48 <HAL_RCC_OscConfig+0x280>
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a05      	ldr	r2, [pc, #20]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b03      	ldr	r3, [pc, #12]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a02      	ldr	r2, [pc, #8]	@ (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e013      	b.n	8002c60 <HAL_RCC_OscConfig+0x298>
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	08005414 	.word	0x08005414
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004
 8002c48:	4ba0      	ldr	r3, [pc, #640]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a9f      	ldr	r2, [pc, #636]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b9d      	ldr	r3, [pc, #628]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a9c      	ldr	r2, [pc, #624]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fdce 	bl	8001808 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fdca 	bl	8001808 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e2ae      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c82:	4b92      	ldr	r3, [pc, #584]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x2a8>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fdba 	bl	8001808 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe fdb6 	bl	8001808 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e29a      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002caa:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2d0>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d060      	beq.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x310>
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d119      	bne.n	8002d06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d116      	bne.n	8002d06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd8:	4b7c      	ldr	r3, [pc, #496]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x328>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e277      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	4973      	ldr	r1, [pc, #460]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d04:	e040      	b.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d023      	beq.n	8002d56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6e      	ldr	r2, [pc, #440]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fd75 	bl	8001808 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d22:	f7fe fd71 	bl	8001808 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e255      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d34:	4b65      	ldr	r3, [pc, #404]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b62      	ldr	r3, [pc, #392]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	495f      	ldr	r1, [pc, #380]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
 8002d54:	e018      	b.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fd51 	bl	8001808 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fd4d 	bl	8001808 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e231      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d03c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe fd2c 	bl	8001808 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fd28 	bl	8001808 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e20c      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ef      	beq.n	8002db4 <HAL_RCC_OscConfig+0x3ec>
 8002dd4:	e01b      	b.n	8002e0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ddc:	4a3b      	ldr	r2, [pc, #236]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7fe fd0f 	bl	8001808 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe fd0b 	bl	8001808 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1ef      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e00:	4b32      	ldr	r3, [pc, #200]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1ef      	bne.n	8002dee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80a6 	beq.w	8002f68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10d      	bne.n	8002e48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2c:	4b27      	ldr	r3, [pc, #156]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	4a26      	ldr	r2, [pc, #152]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e38:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e48:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <HAL_RCC_OscConfig+0x508>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d118      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed0 <HAL_RCC_OscConfig+0x508>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed0 <HAL_RCC_OscConfig+0x508>)
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e60:	f7fe fcd2 	bl	8001808 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e68:	f7fe fcce 	bl	8001808 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1b2      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <HAL_RCC_OscConfig+0x508>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d108      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4d8>
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e9e:	e029      	b.n	8002ef4 <HAL_RCC_OscConfig+0x52c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d115      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x50c>
 8002ea8:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	4a07      	ldr	r2, [pc, #28]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebe:	4a03      	ldr	r2, [pc, #12]	@ (8002ecc <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ec8:	e014      	b.n	8002ef4 <HAL_RCC_OscConfig+0x52c>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eda:	4a99      	ldr	r2, [pc, #612]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee4:	4b96      	ldr	r3, [pc, #600]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eea:	4a95      	ldr	r2, [pc, #596]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d016      	beq.n	8002f2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe fc84 	bl	8001808 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe fc80 	bl	8001808 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e162      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1a:	4b89      	ldr	r3, [pc, #548]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ed      	beq.n	8002f04 <HAL_RCC_OscConfig+0x53c>
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fc6d 	bl	8001808 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe fc69 	bl	8001808 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e14b      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f48:	4b7d      	ldr	r3, [pc, #500]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ed      	bne.n	8002f32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f56:	7ffb      	ldrb	r3, [r7, #31]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4b78      	ldr	r3, [pc, #480]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	4a77      	ldr	r2, [pc, #476]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03c      	beq.n	8002fee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f7c:	4b70      	ldr	r3, [pc, #448]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f82:	4a6f      	ldr	r2, [pc, #444]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fc3c 	bl	8001808 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f94:	f7fe fc38 	bl	8001808 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e11c      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fa6:	4b66      	ldr	r3, [pc, #408]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCC_OscConfig+0x5cc>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fb6:	4b62      	ldr	r3, [pc, #392]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fbc:	4a60      	ldr	r2, [pc, #384]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fc1f 	bl	8001808 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fce:	f7fe fc1b 	bl	8001808 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0ff      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe0:	4b57      	ldr	r3, [pc, #348]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8002fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ef      	bne.n	8002fce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80f3 	beq.w	80031de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	f040 80c9 	bne.w	8003194 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003002:	4b4f      	ldr	r3, [pc, #316]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003012:	429a      	cmp	r2, r3
 8003014:	d12c      	bne.n	8003070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	3b01      	subs	r3, #1
 8003022:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d123      	bne.n	8003070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d11b      	bne.n	8003070 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003042:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d113      	bne.n	8003070 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	3b01      	subs	r3, #1
 8003056:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d109      	bne.n	8003070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d06b      	beq.n	8003148 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d062      	beq.n	800313c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003076:	4b32      	ldr	r3, [pc, #200]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0ac      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003086:	4b2e      	ldr	r3, [pc, #184]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 800308c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003090:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003092:	f7fe fbb9 	bl	8001808 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fbb5 	bl	8001808 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e099      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ac:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b8:	4b21      	ldr	r3, [pc, #132]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <HAL_RCC_OscConfig+0x77c>)
 80030be:	4013      	ands	r3, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030c8:	3a01      	subs	r2, #1
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	4311      	orrs	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030d2:	0212      	lsls	r2, r2, #8
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030da:	0852      	lsrs	r2, r2, #1
 80030dc:	3a01      	subs	r2, #1
 80030de:	0552      	lsls	r2, r2, #21
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030e6:	0852      	lsrs	r2, r2, #1
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0652      	lsls	r2, r2, #25
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030f2:	06d2      	lsls	r2, r2, #27
 80030f4:	430a      	orrs	r2, r1
 80030f6:	4912      	ldr	r1, [pc, #72]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030fc:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0f      	ldr	r2, [pc, #60]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8003102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003106:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003108:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a0c      	ldr	r2, [pc, #48]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 800310e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003112:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003114:	f7fe fb78 	bl	8001808 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe fb74 	bl	8001808 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e058      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <HAL_RCC_OscConfig+0x778>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800313a:	e050      	b.n	80031de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e04f      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
 8003140:	40021000 	.word	0x40021000
 8003144:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d144      	bne.n	80031de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003154:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a23      	ldr	r2, [pc, #140]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800315e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003160:	4b21      	ldr	r3, [pc, #132]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a20      	ldr	r2, [pc, #128]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800316c:	f7fe fb4c 	bl	8001808 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fb48 	bl	8001808 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e02c      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003186:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x7ac>
 8003192:	e024      	b.n	80031de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d01f      	beq.n	80031da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a12      	ldr	r2, [pc, #72]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 80031a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fe fb2f 	bl	8001808 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fe fb2b 	bl	8001808 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e00f      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c0:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	4905      	ldr	r1, [pc, #20]	@ (80031e8 <HAL_RCC_OscConfig+0x820>)
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_RCC_OscConfig+0x824>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
 80031d8:	e001      	b.n	80031de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	feeefffc 	.word	0xfeeefffc

080031f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0e7      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b75      	ldr	r3, [pc, #468]	@ (80033dc <HAL_RCC_ClockConfig+0x1ec>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d910      	bls.n	8003234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b72      	ldr	r3, [pc, #456]	@ (80033dc <HAL_RCC_ClockConfig+0x1ec>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4970      	ldr	r1, [pc, #448]	@ (80033dc <HAL_RCC_ClockConfig+0x1ec>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b6e      	ldr	r3, [pc, #440]	@ (80033dc <HAL_RCC_ClockConfig+0x1ec>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0cf      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d010      	beq.n	8003262 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	4b66      	ldr	r3, [pc, #408]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800324c:	429a      	cmp	r2, r3
 800324e:	d908      	bls.n	8003262 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b63      	ldr	r3, [pc, #396]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4960      	ldr	r1, [pc, #384]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04c      	beq.n	8003308 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003276:	4b5a      	ldr	r3, [pc, #360]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d121      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0a6      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328e:	4b54      	ldr	r3, [pc, #336]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d115      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e09a      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032a6:	4b4e      	ldr	r3, [pc, #312]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e08e      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032b6:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e086      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c6:	4b46      	ldr	r3, [pc, #280]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 0203 	bic.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4943      	ldr	r1, [pc, #268]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fe fa96 	bl	8001808 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e0:	f7fe fa92 	bl	8001808 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e06e      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	4b3a      	ldr	r3, [pc, #232]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 020c 	and.w	r2, r3, #12
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	429a      	cmp	r2, r3
 8003306:	d1eb      	bne.n	80032e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d010      	beq.n	8003336 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003320:	429a      	cmp	r2, r3
 8003322:	d208      	bcs.n	8003336 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003324:	4b2e      	ldr	r3, [pc, #184]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	492b      	ldr	r1, [pc, #172]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003336:	4b29      	ldr	r3, [pc, #164]	@ (80033dc <HAL_RCC_ClockConfig+0x1ec>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d210      	bcs.n	8003366 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003344:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <HAL_RCC_ClockConfig+0x1ec>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 0207 	bic.w	r2, r3, #7
 800334c:	4923      	ldr	r1, [pc, #140]	@ (80033dc <HAL_RCC_ClockConfig+0x1ec>)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003354:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <HAL_RCC_ClockConfig+0x1ec>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e036      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003372:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4918      	ldr	r1, [pc, #96]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003380:	4313      	orrs	r3, r2
 8003382:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4910      	ldr	r1, [pc, #64]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a4:	f000 f824 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <HAL_RCC_ClockConfig+0x1f0>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	490b      	ldr	r1, [pc, #44]	@ (80033e4 <HAL_RCC_ClockConfig+0x1f4>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <HAL_RCC_ClockConfig+0x1f8>)
 80033c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_RCC_ClockConfig+0x1fc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe f9cd 	bl	8001768 <HAL_InitTick>
 80033ce:	4603      	mov	r3, r0
 80033d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80033d2:	7afb      	ldrb	r3, [r7, #11]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08005414 	.word	0x08005414
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	@ 0x24
 80033f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fe:	4b3e      	ldr	r3, [pc, #248]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003408:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x34>
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	d121      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d11e      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003424:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003430:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	e005      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003440:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800344c:	4a2b      	ldr	r2, [pc, #172]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003454:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d102      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x110>)
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e004      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d101      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003474:	4b23      	ldr	r3, [pc, #140]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x114>)
 8003476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d134      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0xa6>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d003      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0xac>
 8003494:	e005      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003496:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x110>)
 8003498:	617b      	str	r3, [r7, #20]
      break;
 800349a:	e005      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800349c:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x114>)
 800349e:	617b      	str	r3, [r7, #20]
      break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	617b      	str	r3, [r7, #20]
      break;
 80034a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034a8:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	3301      	adds	r3, #1
 80034b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	fb03 f202 	mul.w	r2, r3, r2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	0e5b      	lsrs	r3, r3, #25
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	3301      	adds	r3, #1
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034e8:	69bb      	ldr	r3, [r7, #24]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	@ 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	0800542c 	.word	0x0800542c
 8003500:	00f42400 	.word	0x00f42400
 8003504:	007a1200 	.word	0x007a1200

08003508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b03      	ldr	r3, [pc, #12]	@ (800351c <HAL_RCC_GetHCLKFreq+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000000 	.word	0x20000000

08003520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003524:	f7ff fff0 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4904      	ldr	r1, [pc, #16]	@ (8003548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	08005424 	.word	0x08005424

0800354c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003550:	f7ff ffda 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0adb      	lsrs	r3, r3, #11
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4904      	ldr	r1, [pc, #16]	@ (8003574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	08005424 	.word	0x08005424

08003578 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003584:	4b2a      	ldr	r3, [pc, #168]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003590:	f7ff f9b6 	bl	8002900 <HAL_PWREx_GetVoltageRange>
 8003594:	6178      	str	r0, [r7, #20]
 8003596:	e014      	b.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003598:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	4a24      	ldr	r2, [pc, #144]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035a4:	4b22      	ldr	r3, [pc, #136]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035b0:	f7ff f9a6 	bl	8002900 <HAL_PWREx_GetVoltageRange>
 80035b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c8:	d10b      	bne.n	80035e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b80      	cmp	r3, #128	@ 0x80
 80035ce:	d919      	bls.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80035d4:	d902      	bls.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d6:	2302      	movs	r3, #2
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	e013      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e010      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b80      	cmp	r3, #128	@ 0x80
 80035e6:	d902      	bls.n	80035ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035e8:	2303      	movs	r3, #3
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	e00a      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b80      	cmp	r3, #128	@ 0x80
 80035f2:	d102      	bne.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f4:	2302      	movs	r3, #2
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	e004      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b70      	cmp	r3, #112	@ 0x70
 80035fe:	d101      	bne.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003600:	2301      	movs	r3, #1
 8003602:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 0207 	bic.w	r2, r3, #7
 800360c:	4909      	ldr	r1, [pc, #36]	@ (8003634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003614:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	429a      	cmp	r2, r3
 8003620:	d001      	beq.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000
 8003634:	40022000 	.word	0x40022000

08003638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003640:	2300      	movs	r3, #0
 8003642:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003644:	2300      	movs	r3, #0
 8003646:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003650:	2b00      	cmp	r3, #0
 8003652:	d031      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800365c:	d01a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800365e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003662:	d814      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003668:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800366c:	d10f      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800366e:	4b5d      	ldr	r3, [pc, #372]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4a5c      	ldr	r2, [pc, #368]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800367a:	e00c      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f9de 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	74fb      	strb	r3, [r7, #19]
      break;
 8003692:	e000      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800369c:	4b51      	ldr	r3, [pc, #324]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036aa:	494e      	ldr	r1, [pc, #312]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036b2:	e001      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 809e 	beq.w	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036ca:	4b46      	ldr	r3, [pc, #280]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b40      	ldr	r3, [pc, #256]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	4a3f      	ldr	r2, [pc, #252]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ec:	4b3d      	ldr	r3, [pc, #244]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fc:	4b3a      	ldr	r3, [pc, #232]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a39      	ldr	r2, [pc, #228]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003708:	f7fe f87e 	bl	8001808 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800370e:	e009      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fe f87a 	bl	8001808 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d902      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	74fb      	strb	r3, [r7, #19]
        break;
 8003722:	e005      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003724:	4b30      	ldr	r3, [pc, #192]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ef      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d15a      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003736:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01e      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	429a      	cmp	r2, r3
 8003750:	d019      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003752:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800375c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800375e:	4b21      	ldr	r3, [pc, #132]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003764:	4a1f      	ldr	r2, [pc, #124]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376e:	4b1d      	ldr	r3, [pc, #116]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800377e:	4a19      	ldr	r2, [pc, #100]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d016      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe f83a 	bl	8001808 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003796:	e00b      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fe f836 	bl	8001808 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	74fb      	strb	r3, [r7, #19]
            break;
 80037ae:	e006      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ec      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c4:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d2:	4904      	ldr	r1, [pc, #16]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037da:	e009      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f0:	7c7b      	ldrb	r3, [r7, #17]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	4a89      	ldr	r2, [pc, #548]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800380e:	4b84      	ldr	r3, [pc, #528]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003814:	f023 0203 	bic.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4980      	ldr	r1, [pc, #512]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003830:	4b7b      	ldr	r3, [pc, #492]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f023 020c 	bic.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	4978      	ldr	r1, [pc, #480]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003852:	4b73      	ldr	r3, [pc, #460]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003858:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003860:	496f      	ldr	r1, [pc, #444]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003874:	4b6a      	ldr	r3, [pc, #424]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003882:	4967      	ldr	r1, [pc, #412]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003896:	4b62      	ldr	r3, [pc, #392]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	495e      	ldr	r1, [pc, #376]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b8:	4b59      	ldr	r3, [pc, #356]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c6:	4956      	ldr	r1, [pc, #344]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038da:	4b51      	ldr	r3, [pc, #324]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	494d      	ldr	r1, [pc, #308]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d028      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038fc:	4b48      	ldr	r3, [pc, #288]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003902:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	4945      	ldr	r1, [pc, #276]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800391a:	d106      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391c:	4b40      	ldr	r3, [pc, #256]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a3f      	ldr	r2, [pc, #252]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003926:	60d3      	str	r3, [r2, #12]
 8003928:	e011      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003932:	d10c      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f882 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d028      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800395a:	4b31      	ldr	r3, [pc, #196]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003968:	492d      	ldr	r1, [pc, #180]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003978:	d106      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800397a:	4b29      	ldr	r3, [pc, #164]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a28      	ldr	r2, [pc, #160]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003980:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003984:	60d3      	str	r3, [r2, #12]
 8003986:	e011      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003990:	d10c      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	2101      	movs	r1, #1
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f853 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80039a8:	7cfb      	ldrb	r3, [r7, #19]
 80039aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01c      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c6:	4916      	ldr	r1, [pc, #88]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	2102      	movs	r1, #2
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f830 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a04:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0c:	4904      	ldr	r1, [pc, #16]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000

08003a24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000

08003a44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a52:	4b74      	ldr	r3, [pc, #464]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d018      	beq.n	8003a90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a5e:	4b71      	ldr	r3, [pc, #452]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0203 	and.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d10d      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
       ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a76:	4b6b      	ldr	r3, [pc, #428]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
       ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d047      	beq.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	e044      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d018      	beq.n	8003aca <RCCEx_PLLSAI1_Config+0x86>
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d825      	bhi.n	8003ae8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d002      	beq.n	8003aa6 <RCCEx_PLLSAI1_Config+0x62>
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d009      	beq.n	8003ab8 <RCCEx_PLLSAI1_Config+0x74>
 8003aa4:	e020      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11d      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab6:	e01a      	b.n	8003aee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d116      	bne.n	8003af2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac8:	e013      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aca:	4b56      	ldr	r3, [pc, #344]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10f      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ad6:	4b53      	ldr	r3, [pc, #332]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ae6:	e006      	b.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e004      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aee:	bf00      	nop
 8003af0:	e002      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003afe:	4b49      	ldr	r3, [pc, #292]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	430b      	orrs	r3, r1
 8003b14:	4943      	ldr	r1, [pc, #268]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d17c      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b20:	4b40      	ldr	r3, [pc, #256]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a3f      	ldr	r2, [pc, #252]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2c:	f7fd fe6c 	bl	8001808 <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b32:	e009      	b.n	8003b48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b34:	f7fd fe68 	bl	8001808 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d902      	bls.n	8003b48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	73fb      	strb	r3, [r7, #15]
        break;
 8003b46:	e005      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ef      	bne.n	8003b34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d15f      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d110      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b60:	4b30      	ldr	r3, [pc, #192]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003b68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6892      	ldr	r2, [r2, #8]
 8003b70:	0211      	lsls	r1, r2, #8
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	06d2      	lsls	r2, r2, #27
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	492a      	ldr	r1, [pc, #168]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	610b      	str	r3, [r1, #16]
 8003b80:	e027      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d112      	bne.n	8003bae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b88:	4b26      	ldr	r3, [pc, #152]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	0211      	lsls	r1, r2, #8
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6912      	ldr	r2, [r2, #16]
 8003b9e:	0852      	lsrs	r2, r2, #1
 8003ba0:	3a01      	subs	r2, #1
 8003ba2:	0552      	lsls	r2, r2, #21
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	491f      	ldr	r1, [pc, #124]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	610b      	str	r3, [r1, #16]
 8003bac:	e011      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bae:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	0211      	lsls	r1, r2, #8
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6952      	ldr	r2, [r2, #20]
 8003bc4:	0852      	lsrs	r2, r2, #1
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0652      	lsls	r2, r2, #25
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	4915      	ldr	r1, [pc, #84]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bd2:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fd fe13 	bl	8001808 <HAL_GetTick>
 8003be2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003be4:	e009      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003be6:	f7fd fe0f 	bl	8001808 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d902      	bls.n	8003bfa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	73fb      	strb	r3, [r7, #15]
          break;
 8003bf8:	e005      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ef      	beq.n	8003be6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c0c:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4903      	ldr	r1, [pc, #12]	@ (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000

08003c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e095      	b.n	8003d66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c4a:	d009      	beq.n	8003c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	e005      	b.n	8003c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fc44 	bl	8001508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ca0:	d902      	bls.n	8003ca8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e002      	b.n	8003cae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003cb6:	d007      	beq.n	8003cc8 <HAL_SPI_Init+0xa0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cc0:	d002      	beq.n	8003cc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	ea42 0103 	orr.w	r1, r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	f003 0204 	and.w	r2, r3, #4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b088      	sub	sp, #32
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_SPI_Transmit+0x22>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e15f      	b.n	8004050 <HAL_SPI_Transmit+0x2e2>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d98:	f7fd fd36 	bl	8001808 <HAL_GetTick>
 8003d9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
 8003db0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003db2:	e148      	b.n	8004046 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_Transmit+0x52>
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dc4:	e13f      	b.n	8004046 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e10:	d10f      	bne.n	8003e32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b40      	cmp	r3, #64	@ 0x40
 8003e3e:	d007      	beq.n	8003e50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e58:	d94f      	bls.n	8003efa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_Transmit+0xfa>
 8003e62:	8afb      	ldrh	r3, [r7, #22]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d142      	bne.n	8003eee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e8c:	e02f      	b.n	8003eee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d112      	bne.n	8003ec2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea0:	881a      	ldrh	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ec0:	e015      	b.n	8003eee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec2:	f7fd fca1 	bl	8001808 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d803      	bhi.n	8003eda <HAL_SPI_Transmit+0x16c>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Transmit+0x172>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d106      	bne.n	8003eee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003eec:	e0ab      	b.n	8004046 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1ca      	bne.n	8003e8e <HAL_SPI_Transmit+0x120>
 8003ef8:	e080      	b.n	8003ffc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_SPI_Transmit+0x19a>
 8003f02:	8afb      	ldrh	r3, [r7, #22]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d174      	bne.n	8003ff2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d912      	bls.n	8003f38 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b02      	subs	r3, #2
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f36:	e05c      	b.n	8003ff2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	7812      	ldrb	r2, [r2, #0]
 8003f44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f5e:	e048      	b.n	8003ff2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d12b      	bne.n	8003fc6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d912      	bls.n	8003f9e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b02      	subs	r3, #2
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f9c:	e029      	b.n	8003ff2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	7812      	ldrb	r2, [r2, #0]
 8003faa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fc4:	e015      	b.n	8003ff2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc6:	f7fd fc1f 	bl	8001808 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d803      	bhi.n	8003fde <HAL_SPI_Transmit+0x270>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d102      	bne.n	8003fe4 <HAL_SPI_Transmit+0x276>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003ff0:	e029      	b.n	8004046 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1b1      	bne.n	8003f60 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fcf9 	bl	80049f8 <SPI_EndRxTxTransaction>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e003      	b.n	8004046 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800404e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d002      	beq.n	800407e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004078:	2302      	movs	r3, #2
 800407a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800407c:	e11a      	b.n	80042b4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004086:	d112      	bne.n	80040ae <HAL_SPI_Receive+0x56>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10e      	bne.n	80040ae <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2204      	movs	r2, #4
 8004094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004098:	88fa      	ldrh	r2, [r7, #6]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f90e 	bl	80042c6 <HAL_SPI_TransmitReceive>
 80040aa:	4603      	mov	r3, r0
 80040ac:	e107      	b.n	80042be <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_SPI_Receive+0x64>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e100      	b.n	80042be <HAL_SPI_Receive+0x266>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c4:	f7fd fba0 	bl	8001808 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_Receive+0x7e>
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040da:	e0eb      	b.n	80042b4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2204      	movs	r2, #4
 80040e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004126:	d908      	bls.n	800413a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	e007      	b.n	800414a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004148:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004152:	d10f      	bne.n	8004174 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004162:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004172:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d007      	beq.n	8004192 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800419a:	d86f      	bhi.n	800427c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800419c:	e034      	b.n	8004208 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d117      	bne.n	80041dc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f103 020c 	add.w	r2, r3, #12
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	7812      	ldrb	r2, [r2, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80041da:	e015      	b.n	8004208 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041dc:	f7fd fb14 	bl	8001808 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d803      	bhi.n	80041f4 <HAL_SPI_Receive+0x19c>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d102      	bne.n	80041fa <HAL_SPI_Receive+0x1a2>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004206:	e055      	b.n	80042b4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1c4      	bne.n	800419e <HAL_SPI_Receive+0x146>
 8004214:	e038      	b.n	8004288 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d115      	bne.n	8004250 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	b292      	uxth	r2, r2
 8004230:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	1c9a      	adds	r2, r3, #2
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800424e:	e015      	b.n	800427c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004250:	f7fd fada 	bl	8001808 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d803      	bhi.n	8004268 <HAL_SPI_Receive+0x210>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d102      	bne.n	800426e <HAL_SPI_Receive+0x216>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800427a:	e01b      	b.n	80042b4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1c6      	bne.n	8004216 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	6839      	ldr	r1, [r7, #0]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fb5b 	bl	8004948 <SPI_EndRxTransaction>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
 80042aa:	e003      	b.n	80042b4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b08a      	sub	sp, #40	@ 0x28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042d4:	2301      	movs	r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x26>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e20a      	b.n	8004702 <HAL_SPI_TransmitReceive+0x43c>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f4:	f7fd fa88 	bl	8001808 <HAL_GetTick>
 80042f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004300:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800430c:	887b      	ldrh	r3, [r7, #2]
 800430e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004310:	7efb      	ldrb	r3, [r7, #27]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d00e      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x6e>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800431c:	d106      	bne.n	800432c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <HAL_SPI_TransmitReceive+0x66>
 8004326:	7efb      	ldrb	r3, [r7, #27]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d003      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800432c:	2302      	movs	r3, #2
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004332:	e1e0      	b.n	80046f6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x80>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x80>
 8004340:	887b      	ldrh	r3, [r7, #2]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800434c:	e1d3      	b.n	80046f6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b04      	cmp	r3, #4
 8004358:	d003      	beq.n	8004362 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2205      	movs	r2, #5
 800435e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	887a      	ldrh	r2, [r7, #2]
 8004372:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	887a      	ldrh	r2, [r7, #2]
 800437a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	887a      	ldrh	r2, [r7, #2]
 800438e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043a4:	d802      	bhi.n	80043ac <HAL_SPI_TransmitReceive+0xe6>
 80043a6:	8a3b      	ldrh	r3, [r7, #16]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d908      	bls.n	80043be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	e007      	b.n	80043ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b40      	cmp	r3, #64	@ 0x40
 80043da:	d007      	beq.n	80043ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043f4:	f240 8081 	bls.w	80044fa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_SPI_TransmitReceive+0x140>
 8004400:	8a7b      	ldrh	r3, [r7, #18]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d16d      	bne.n	80044e2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004416:	1c9a      	adds	r2, r3, #2
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442a:	e05a      	b.n	80044e2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d11b      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x1ac>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d016      	beq.n	8004472 <HAL_SPI_TransmitReceive+0x1ac>
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	2b01      	cmp	r3, #1
 8004448:	d113      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445a:	1c9a      	adds	r2, r3, #2
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d11c      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x1f4>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d016      	beq.n	80044ba <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	b292      	uxth	r2, r2
 8004498:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	1c9a      	adds	r2, r3, #2
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044b6:	2301      	movs	r3, #1
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044ba:	f7fd f9a5 	bl	8001808 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d80b      	bhi.n	80044e2 <HAL_SPI_TransmitReceive+0x21c>
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d007      	beq.n	80044e2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80044e0:	e109      	b.n	80046f6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d19f      	bne.n	800442c <HAL_SPI_TransmitReceive+0x166>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d199      	bne.n	800442c <HAL_SPI_TransmitReceive+0x166>
 80044f8:	e0e3      	b.n	80046c2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_SPI_TransmitReceive+0x244>
 8004502:	8a7b      	ldrh	r3, [r7, #18]
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 80cf 	bne.w	80046a8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d912      	bls.n	800453a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b02      	subs	r3, #2
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004538:	e0b6      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004560:	e0a2      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d134      	bne.n	80045da <HAL_SPI_TransmitReceive+0x314>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d02f      	beq.n	80045da <HAL_SPI_TransmitReceive+0x314>
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	2b01      	cmp	r3, #1
 800457e:	d12c      	bne.n	80045da <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	d912      	bls.n	80045b0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b02      	subs	r3, #2
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045ae:	e012      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	330c      	adds	r3, #12
 80045ba:	7812      	ldrb	r2, [r2, #0]
 80045bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d148      	bne.n	800467a <HAL_SPI_TransmitReceive+0x3b4>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d042      	beq.n	800467a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d923      	bls.n	8004648 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	b292      	uxth	r2, r2
 800460c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	1c9a      	adds	r2, r3, #2
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b02      	subs	r3, #2
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	d81f      	bhi.n	8004676 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	e016      	b.n	8004676 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f103 020c 	add.w	r2, r3, #12
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	7812      	ldrb	r2, [r2, #0]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004676:	2301      	movs	r3, #1
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800467a:	f7fd f8c5 	bl	8001808 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004686:	429a      	cmp	r2, r3
 8004688:	d803      	bhi.n	8004692 <HAL_SPI_TransmitReceive+0x3cc>
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d102      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x3d2>
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	2b00      	cmp	r3, #0
 8004696:	d107      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80046a6:	e026      	b.n	80046f6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f47f af57 	bne.w	8004562 <HAL_SPI_TransmitReceive+0x29c>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f47f af50 	bne.w	8004562 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f996 	bl	80049f8 <SPI_EndRxTxTransaction>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ec:	e003      	b.n	80046f6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80046fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004702:	4618      	mov	r0, r3
 8004704:	3728      	adds	r7, #40	@ 0x28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800471c:	f7fd f874 	bl	8001808 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	4413      	add	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800472c:	f7fd f86c 	bl	8001808 <HAL_GetTick>
 8004730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004732:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	0d1b      	lsrs	r3, r3, #20
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004742:	e054      	b.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d050      	beq.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800474c:	f7fd f85c 	bl	8001808 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	429a      	cmp	r2, r3
 800475a:	d902      	bls.n	8004762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13d      	bne.n	80047de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800477a:	d111      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004784:	d004      	beq.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800478e:	d107      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a8:	d10f      	bne.n	80047ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e017      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	429a      	cmp	r2, r3
 800480a:	d19b      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000000 	.word	0x20000000

0800481c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800482e:	f7fc ffeb 	bl	8001808 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	4413      	add	r3, r2
 800483c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800483e:	f7fc ffe3 	bl	8001808 <HAL_GetTick>
 8004842:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800484c:	4b3d      	ldr	r3, [pc, #244]	@ (8004944 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00da      	lsls	r2, r3, #3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	0d1b      	lsrs	r3, r3, #20
 800485c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004864:	e060      	b.n	8004928 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800486c:	d107      	bne.n	800487e <SPI_WaitFifoStateUntilTimeout+0x62>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800487c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d050      	beq.n	8004928 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004886:	f7fc ffbf 	bl	8001808 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004892:	429a      	cmp	r2, r3
 8004894:	d902      	bls.n	800489c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13d      	bne.n	8004918 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048b4:	d111      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048be:	d004      	beq.n	80048ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c8:	d107      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e2:	d10f      	bne.n	8004904 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e010      	b.n	800493a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	3b01      	subs	r3, #1
 8004926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d196      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	@ 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000000 	.word	0x20000000

08004948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800495c:	d111      	bne.n	8004982 <SPI_EndRxTransaction+0x3a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004966:	d004      	beq.n	8004972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004970:	d107      	bne.n	8004982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2200      	movs	r2, #0
 800498a:	2180      	movs	r1, #128	@ 0x80
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff febd 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e023      	b.n	80049f0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b0:	d11d      	bne.n	80049ee <SPI_EndRxTransaction+0xa6>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ba:	d004      	beq.n	80049c6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c4:	d113      	bne.n	80049ee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff22 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e000      	b.n	80049f0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ff03 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e027      	b.n	8004a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2200      	movs	r2, #0
 8004a34:	2180      	movs	r1, #128	@ 0x80
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fe68 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e014      	b.n	8004a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff fedc 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e000      	b.n	8004a7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e040      	b.n	8004b18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc fd70 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	@ 0x24
 8004ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fa54 	bl	8004f78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f825 	bl	8004b20 <UART_SetConfig>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e01b      	b.n	8004b18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fad3 	bl	80050bc <UART_CheckIdleState>
 8004b16:	4603      	mov	r3, r0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b08a      	sub	sp, #40	@ 0x28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4bb4      	ldr	r3, [pc, #720]	@ (8004e20 <UART_SetConfig+0x300>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4aa9      	ldr	r2, [pc, #676]	@ (8004e24 <UART_SetConfig+0x304>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4aa0      	ldr	r2, [pc, #640]	@ (8004e28 <UART_SetConfig+0x308>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d126      	bne.n	8004bf8 <UART_SetConfig+0xd8>
 8004baa:	4ba0      	ldr	r3, [pc, #640]	@ (8004e2c <UART_SetConfig+0x30c>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d81b      	bhi.n	8004bf0 <UART_SetConfig+0xd0>
 8004bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc0 <UART_SetConfig+0xa0>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bd1 	.word	0x08004bd1
 8004bc4:	08004be1 	.word	0x08004be1
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	e080      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bde:	e07c      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be6:	e078      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bee:	e074      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf6:	e070      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a8c      	ldr	r2, [pc, #560]	@ (8004e30 <UART_SetConfig+0x310>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d138      	bne.n	8004c74 <UART_SetConfig+0x154>
 8004c02:	4b8a      	ldr	r3, [pc, #552]	@ (8004e2c <UART_SetConfig+0x30c>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	d82d      	bhi.n	8004c6c <UART_SetConfig+0x14c>
 8004c10:	a201      	add	r2, pc, #4	@ (adr r2, 8004c18 <UART_SetConfig+0xf8>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004c6d 	.word	0x08004c6d
 8004c20:	08004c6d 	.word	0x08004c6d
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004c6d 	.word	0x08004c6d
 8004c30:	08004c6d 	.word	0x08004c6d
 8004c34:	08004c6d 	.word	0x08004c6d
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	08004c6d 	.word	0x08004c6d
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	08004c6d 	.word	0x08004c6d
 8004c48:	08004c65 	.word	0x08004c65
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c52:	e042      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004c54:	2302      	movs	r3, #2
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5a:	e03e      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c62:	e03a      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004c64:	2308      	movs	r3, #8
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	e036      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c72:	e032      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a6a      	ldr	r2, [pc, #424]	@ (8004e24 <UART_SetConfig+0x304>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d12a      	bne.n	8004cd4 <UART_SetConfig+0x1b4>
 8004c7e:	4b6b      	ldr	r3, [pc, #428]	@ (8004e2c <UART_SetConfig+0x30c>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c8c:	d01a      	beq.n	8004cc4 <UART_SetConfig+0x1a4>
 8004c8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c92:	d81b      	bhi.n	8004ccc <UART_SetConfig+0x1ac>
 8004c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c98:	d00c      	beq.n	8004cb4 <UART_SetConfig+0x194>
 8004c9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c9e:	d815      	bhi.n	8004ccc <UART_SetConfig+0x1ac>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <UART_SetConfig+0x18c>
 8004ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca8:	d008      	beq.n	8004cbc <UART_SetConfig+0x19c>
 8004caa:	e00f      	b.n	8004ccc <UART_SetConfig+0x1ac>
 8004cac:	2300      	movs	r3, #0
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	e012      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cba:	e00e      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc2:	e00a      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cca:	e006      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd2:	e002      	b.n	8004cda <UART_SetConfig+0x1ba>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a51      	ldr	r2, [pc, #324]	@ (8004e24 <UART_SetConfig+0x304>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d17a      	bne.n	8004dda <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d824      	bhi.n	8004d36 <UART_SetConfig+0x216>
 8004cec:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf4 <UART_SetConfig+0x1d4>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d37 	.word	0x08004d37
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d37 	.word	0x08004d37
 8004d04:	08004d27 	.word	0x08004d27
 8004d08:	08004d37 	.word	0x08004d37
 8004d0c:	08004d37 	.word	0x08004d37
 8004d10:	08004d37 	.word	0x08004d37
 8004d14:	08004d2f 	.word	0x08004d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fe fc02 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	61f8      	str	r0, [r7, #28]
        break;
 8004d1e:	e010      	b.n	8004d42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d20:	4b44      	ldr	r3, [pc, #272]	@ (8004e34 <UART_SetConfig+0x314>)
 8004d22:	61fb      	str	r3, [r7, #28]
        break;
 8004d24:	e00d      	b.n	8004d42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d26:	f7fe fb63 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004d2a:	61f8      	str	r0, [r7, #28]
        break;
 8004d2c:	e009      	b.n	8004d42 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d32:	61fb      	str	r3, [r7, #28]
        break;
 8004d34:	e005      	b.n	8004d42 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8107 	beq.w	8004f58 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4413      	add	r3, r2
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d305      	bcc.n	8004d66 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d903      	bls.n	8004d6e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d6c:	e0f4      	b.n	8004f58 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	2200      	movs	r2, #0
 8004d72:	461c      	mov	r4, r3
 8004d74:	4615      	mov	r5, r2
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	022b      	lsls	r3, r5, #8
 8004d80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d84:	0222      	lsls	r2, r4, #8
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	6849      	ldr	r1, [r1, #4]
 8004d8a:	0849      	lsrs	r1, r1, #1
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	4688      	mov	r8, r1
 8004d90:	4681      	mov	r9, r0
 8004d92:	eb12 0a08 	adds.w	sl, r2, r8
 8004d96:	eb43 0b09 	adc.w	fp, r3, r9
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004da8:	4650      	mov	r0, sl
 8004daa:	4659      	mov	r1, fp
 8004dac:	f7fb fdfc 	bl	80009a8 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4613      	mov	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dbe:	d308      	bcc.n	8004dd2 <UART_SetConfig+0x2b2>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dc6:	d204      	bcs.n	8004dd2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e0c2      	b.n	8004f58 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004dd8:	e0be      	b.n	8004f58 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de2:	d16a      	bne.n	8004eba <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d834      	bhi.n	8004e56 <UART_SetConfig+0x336>
 8004dec:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <UART_SetConfig+0x2d4>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e39 	.word	0x08004e39
 8004dfc:	08004e41 	.word	0x08004e41
 8004e00:	08004e57 	.word	0x08004e57
 8004e04:	08004e47 	.word	0x08004e47
 8004e08:	08004e57 	.word	0x08004e57
 8004e0c:	08004e57 	.word	0x08004e57
 8004e10:	08004e57 	.word	0x08004e57
 8004e14:	08004e4f 	.word	0x08004e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fe fb82 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	61f8      	str	r0, [r7, #28]
        break;
 8004e1e:	e020      	b.n	8004e62 <UART_SetConfig+0x342>
 8004e20:	efff69f3 	.word	0xefff69f3
 8004e24:	40008000 	.word	0x40008000
 8004e28:	40013800 	.word	0x40013800
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40004400 	.word	0x40004400
 8004e34:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7fe fb88 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 8004e3c:	61f8      	str	r0, [r7, #28]
        break;
 8004e3e:	e010      	b.n	8004e62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e40:	4b4c      	ldr	r3, [pc, #304]	@ (8004f74 <UART_SetConfig+0x454>)
 8004e42:	61fb      	str	r3, [r7, #28]
        break;
 8004e44:	e00d      	b.n	8004e62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e46:	f7fe fad3 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004e4a:	61f8      	str	r0, [r7, #28]
        break;
 8004e4c:	e009      	b.n	8004e62 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e52:	61fb      	str	r3, [r7, #28]
        break;
 8004e54:	e005      	b.n	8004e62 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d077      	beq.n	8004f58 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005a      	lsls	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	441a      	add	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b0f      	cmp	r3, #15
 8004e82:	d916      	bls.n	8004eb2 <UART_SetConfig+0x392>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e8a:	d212      	bcs.n	8004eb2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f023 030f 	bic.w	r3, r3, #15
 8004e94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	8afb      	ldrh	r3, [r7, #22]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	8afa      	ldrh	r2, [r7, #22]
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	e052      	b.n	8004f58 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004eb8:	e04e      	b.n	8004f58 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d827      	bhi.n	8004f12 <UART_SetConfig+0x3f2>
 8004ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <UART_SetConfig+0x3a8>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	08004f13 	.word	0x08004f13
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f13 	.word	0x08004f13
 8004ee8:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fe fb18 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	61f8      	str	r0, [r7, #28]
        break;
 8004ef2:	e014      	b.n	8004f1e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fe fb2a 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 8004ef8:	61f8      	str	r0, [r7, #28]
        break;
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <UART_SetConfig+0x454>)
 8004efe:	61fb      	str	r3, [r7, #28]
        break;
 8004f00:	e00d      	b.n	8004f1e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7fe fa75 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004f06:	61f8      	str	r0, [r7, #28]
        break;
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0e:	61fb      	str	r3, [r7, #28]
        break;
 8004f10:	e005      	b.n	8004f1e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d019      	beq.n	8004f58 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	085a      	lsrs	r2, r3, #1
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	441a      	add	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b0f      	cmp	r3, #15
 8004f3c:	d909      	bls.n	8004f52 <UART_SetConfig+0x432>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f44:	d205      	bcs.n	8004f52 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e002      	b.n	8004f58 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3728      	adds	r7, #40	@ 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f72:	bf00      	nop
 8004f74:	00f42400 	.word	0x00f42400

08004f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01a      	beq.n	800508e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005076:	d10a      	bne.n	800508e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b098      	sub	sp, #96	@ 0x60
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050cc:	f7fc fb9c 	bl	8001808 <HAL_GetTick>
 80050d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d12e      	bne.n	800513e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e8:	2200      	movs	r2, #0
 80050ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f88c 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d021      	beq.n	800513e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800510e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005118:	647b      	str	r3, [r7, #68]	@ 0x44
 800511a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800511e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e6      	bne.n	80050fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e062      	b.n	8005204 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d149      	bne.n	80051e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f856 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d03c      	beq.n	80051e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	623b      	str	r3, [r7, #32]
   return(result);
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800517a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
 8005186:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800518a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051b8:	61fa      	str	r2, [r7, #28]
 80051ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	69b9      	ldr	r1, [r7, #24]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	617b      	str	r3, [r7, #20]
   return(result);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e011      	b.n	8005204 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3758      	adds	r7, #88	@ 0x58
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521c:	e049      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d045      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7fc faef 	bl	8001808 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	429a      	cmp	r2, r3
 8005234:	d302      	bcc.n	800523c <UART_WaitOnFlagUntilTimeout+0x30>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e048      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d031      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d110      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2208      	movs	r2, #8
 8005262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f838 	bl	80052da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2208      	movs	r2, #8
 800526e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e029      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800528c:	d111      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f81e 	bl	80052da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e00f      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d0a6      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052da:	b480      	push	{r7}
 80052dc:	b095      	sub	sp, #84	@ 0x54
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005300:	643b      	str	r3, [r7, #64]	@ 0x40
 8005302:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005306:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e6      	bne.n	80052e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	61fb      	str	r3, [r7, #28]
   return(result);
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005334:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800533a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e5      	bne.n	8005314 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534c:	2b01      	cmp	r3, #1
 800534e:	d118      	bne.n	8005382 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	60bb      	str	r3, [r7, #8]
   return(result);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 0310 	bic.w	r3, r3, #16
 8005364:	647b      	str	r3, [r7, #68]	@ 0x44
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6979      	ldr	r1, [r7, #20]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	613b      	str	r3, [r7, #16]
   return(result);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005396:	bf00      	nop
 8005398:	3754      	adds	r7, #84	@ 0x54
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <memset>:
 80053a2:	4402      	add	r2, r0
 80053a4:	4603      	mov	r3, r0
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d100      	bne.n	80053ac <memset+0xa>
 80053aa:	4770      	bx	lr
 80053ac:	f803 1b01 	strb.w	r1, [r3], #1
 80053b0:	e7f9      	b.n	80053a6 <memset+0x4>
	...

080053b4 <__libc_init_array>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4d0d      	ldr	r5, [pc, #52]	@ (80053ec <__libc_init_array+0x38>)
 80053b8:	4c0d      	ldr	r4, [pc, #52]	@ (80053f0 <__libc_init_array+0x3c>)
 80053ba:	1b64      	subs	r4, r4, r5
 80053bc:	10a4      	asrs	r4, r4, #2
 80053be:	2600      	movs	r6, #0
 80053c0:	42a6      	cmp	r6, r4
 80053c2:	d109      	bne.n	80053d8 <__libc_init_array+0x24>
 80053c4:	4d0b      	ldr	r5, [pc, #44]	@ (80053f4 <__libc_init_array+0x40>)
 80053c6:	4c0c      	ldr	r4, [pc, #48]	@ (80053f8 <__libc_init_array+0x44>)
 80053c8:	f000 f818 	bl	80053fc <_init>
 80053cc:	1b64      	subs	r4, r4, r5
 80053ce:	10a4      	asrs	r4, r4, #2
 80053d0:	2600      	movs	r6, #0
 80053d2:	42a6      	cmp	r6, r4
 80053d4:	d105      	bne.n	80053e2 <__libc_init_array+0x2e>
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
 80053d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053dc:	4798      	blx	r3
 80053de:	3601      	adds	r6, #1
 80053e0:	e7ee      	b.n	80053c0 <__libc_init_array+0xc>
 80053e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e6:	4798      	blx	r3
 80053e8:	3601      	adds	r6, #1
 80053ea:	e7f2      	b.n	80053d2 <__libc_init_array+0x1e>
 80053ec:	08005464 	.word	0x08005464
 80053f0:	08005464 	.word	0x08005464
 80053f4:	08005464 	.word	0x08005464
 80053f8:	08005468 	.word	0x08005468

080053fc <_init>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr

08005408 <_fini>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr
