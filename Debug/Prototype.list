
Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  0800fa70  0800fa70  00010a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010268  08010268  00012060  2**0
                  CONTENTS
  4 .ARM          00000008  08010268  08010268  00011268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010270  08010270  00012060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010270  08010270  00011270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010274  08010274  00011274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08010278  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003318  20000060  080102d8  00012060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003378  080102d8  00012378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f45  00000000  00000000  00012090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e3f  00000000  00000000  00038fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002070  00000000  00000000  0003de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001954  00000000  00000000  0003fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260c6  00000000  00000000  000417dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027f37  00000000  00000000  000678a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea79c  00000000  00000000  0008f7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fb8  00000000  00000000  00179fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00182f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa54 	.word	0x0800fa54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800fa54 	.word	0x0800fa54

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96a 	b.w	8000e74 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d14e      	bne.n	8000c62 <__udivmoddi4+0xaa>
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	458c      	cmp	ip, r1
 8000bc8:	4686      	mov	lr, r0
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	d962      	bls.n	8000c96 <__udivmoddi4+0xde>
 8000bd0:	b14a      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd2:	f1c2 0320 	rsb	r3, r2, #32
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	4319      	orrs	r1, r3
 8000be2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f f68c 	uxth.w	r6, ip
 8000bee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb04 f106 	mul.w	r1, r4, r6
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x64>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c0e:	f080 8112 	bcs.w	8000e36 <__udivmoddi4+0x27e>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 810f 	bls.w	8000e36 <__udivmoddi4+0x27e>
 8000c18:	3c02      	subs	r4, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a59      	subs	r1, r3, r1
 8000c1e:	fa1f f38e 	uxth.w	r3, lr
 8000c22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c26:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb00 f606 	mul.w	r6, r0, r6
 8000c32:	429e      	cmp	r6, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3e:	f080 80fc 	bcs.w	8000e3a <__udivmoddi4+0x282>
 8000c42:	429e      	cmp	r6, r3
 8000c44:	f240 80f9 	bls.w	8000e3a <__udivmoddi4+0x282>
 8000c48:	4463      	add	r3, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa6>
 8000c56:	40d3      	lsrs	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xba>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb4>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x150>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xcc>
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	f0c0 80f0 	bcc.w	8000e64 <__udivmoddi4+0x2ac>
 8000c84:	1a86      	subs	r6, r0, r2
 8000c86:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d0e6      	beq.n	8000c5e <__udivmoddi4+0xa6>
 8000c90:	e9c5 6300 	strd	r6, r3, [r5]
 8000c94:	e7e3      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x204>
 8000c9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ca0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb07 f006 	mul.w	r0, r7, r6
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x11c>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x11a>
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	f200 80cd 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000cd2:	4626      	mov	r6, r4
 8000cd4:	1a1c      	subs	r4, r3, r0
 8000cd6:	fa1f f38e 	uxth.w	r3, lr
 8000cda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cde:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb00 f707 	mul.w	r7, r0, r7
 8000cea:	429f      	cmp	r7, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x148>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x146>
 8000cf8:	429f      	cmp	r7, r3
 8000cfa:	f200 80b0 	bhi.w	8000e5e <__udivmoddi4+0x2a6>
 8000cfe:	4620      	mov	r0, r4
 8000d00:	1bdb      	subs	r3, r3, r7
 8000d02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x9c>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d18:	fa04 f301 	lsl.w	r3, r4, r1
 8000d1c:	ea43 030c 	orr.w	r3, r3, ip
 8000d20:	40f4      	lsrs	r4, r6
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	0c38      	lsrs	r0, r7, #16
 8000d28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d30:	fa1f fc87 	uxth.w	ip, r7
 8000d34:	fb00 441e 	mls	r4, r0, lr, r4
 8000d38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d90a      	bls.n	8000d5e <__udivmoddi4+0x1a6>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d4e:	f080 8084 	bcs.w	8000e5a <__udivmoddi4+0x2a2>
 8000d52:	45a1      	cmp	r9, r4
 8000d54:	f240 8081 	bls.w	8000e5a <__udivmoddi4+0x2a2>
 8000d58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	eba4 0409 	sub.w	r4, r4, r9
 8000d62:	fa1f f983 	uxth.w	r9, r3
 8000d66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1d2>
 8000d7a:	193c      	adds	r4, r7, r4
 8000d7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d80:	d267      	bcs.n	8000e52 <__udivmoddi4+0x29a>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d965      	bls.n	8000e52 <__udivmoddi4+0x29a>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d92:	eba4 040c 	sub.w	r4, r4, ip
 8000d96:	429c      	cmp	r4, r3
 8000d98:	46ce      	mov	lr, r9
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	d351      	bcc.n	8000e42 <__udivmoddi4+0x28a>
 8000d9e:	d04e      	beq.n	8000e3e <__udivmoddi4+0x286>
 8000da0:	b155      	cbz	r5, 8000db8 <__udivmoddi4+0x200>
 8000da2:	ebb8 030e 	subs.w	r3, r8, lr
 8000da6:	eb64 040c 	sbc.w	r4, r4, ip
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	40cb      	lsrs	r3, r1
 8000db0:	431e      	orrs	r6, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c5 6400 	strd	r6, r4, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e750      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dcc:	4094      	lsls	r4, r2
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3110 	mls	r1, r8, r0, r3
 8000de4:	0c23      	lsrs	r3, r4, #16
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f107 	mul.w	r1, r0, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x24c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfa:	d22c      	bcs.n	8000e56 <__udivmoddi4+0x29e>
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d92a      	bls.n	8000e56 <__udivmoddi4+0x29e>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e14:	fb01 f307 	mul.w	r3, r1, r7
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x276>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e24:	d213      	bcs.n	8000e4e <__udivmoddi4+0x296>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d911      	bls.n	8000e4e <__udivmoddi4+0x296>
 8000e2a:	3902      	subs	r1, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	1ae4      	subs	r4, r4, r3
 8000e30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e34:	e739      	b.n	8000caa <__udivmoddi4+0xf2>
 8000e36:	4604      	mov	r4, r0
 8000e38:	e6f0      	b.n	8000c1c <__udivmoddi4+0x64>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e706      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e3e:	45c8      	cmp	r8, r9
 8000e40:	d2ae      	bcs.n	8000da0 <__udivmoddi4+0x1e8>
 8000e42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4a:	3801      	subs	r0, #1
 8000e4c:	e7a8      	b.n	8000da0 <__udivmoddi4+0x1e8>
 8000e4e:	4631      	mov	r1, r6
 8000e50:	e7ed      	b.n	8000e2e <__udivmoddi4+0x276>
 8000e52:	4603      	mov	r3, r0
 8000e54:	e799      	b.n	8000d8a <__udivmoddi4+0x1d2>
 8000e56:	4630      	mov	r0, r6
 8000e58:	e7d4      	b.n	8000e04 <__udivmoddi4+0x24c>
 8000e5a:	46d6      	mov	lr, sl
 8000e5c:	e77f      	b.n	8000d5e <__udivmoddi4+0x1a6>
 8000e5e:	4463      	add	r3, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e74d      	b.n	8000d00 <__udivmoddi4+0x148>
 8000e64:	4606      	mov	r6, r0
 8000e66:	4623      	mov	r3, r4
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e70f      	b.n	8000c8c <__udivmoddi4+0xd4>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	e730      	b.n	8000cd4 <__udivmoddi4+0x11c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <write_ADC>:

// includes
#include "main.h"


void write_ADC(uint8_t reg, uint8_t data){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
	uint8_t ADC_tx_buff[3] = {WRITE, reg, data};
 8000e88:	2308      	movs	r3, #8
 8000e8a:	733b      	strb	r3, [r7, #12]
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	737b      	strb	r3, [r7, #13]
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2110      	movs	r1, #16
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f006 f81c 	bl	8006ed8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, ADC_tx_buff, 3, 100);
 8000ea0:	f107 010c 	add.w	r1, r7, #12
 8000ea4:	2364      	movs	r3, #100	@ 0x64
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	4806      	ldr	r0, [pc, #24]	@ (8000ec4 <write_ADC+0x4c>)
 8000eaa:	f008 f87a 	bl	8008fa2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb6:	f006 f80f 	bl	8006ed8 <HAL_GPIO_WritePin>

	return;
 8000eba:	bf00      	nop
}
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000134 	.word	0x20000134

08000ec8 <read_ADC>:

uint8_t read_ADC(uint8_t reg){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]

	uint8_t ADC_tx_buff[3] = {READ, reg, 0x00};
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	733b      	strb	r3, [r7, #12]
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	737b      	strb	r3, [r7, #13]
 8000eda:	2300      	movs	r3, #0
 8000edc:	73bb      	strb	r3, [r7, #14]
	uint8_t ADC_rx_buff[3];

	// write data to ADC
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f005 fff7 	bl	8006ed8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, ADC_tx_buff, 3, 100);
 8000eea:	f107 010c 	add.w	r1, r7, #12
 8000eee:	2364      	movs	r3, #100	@ 0x64
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	4810      	ldr	r0, [pc, #64]	@ (8000f34 <read_ADC+0x6c>)
 8000ef4:	f008 f855 	bl	8008fa2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2110      	movs	r1, #16
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f005 ffea 	bl	8006ed8 <HAL_GPIO_WritePin>

	// read data from ADC
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f005 ffe4 	bl	8006ed8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, ADC_rx_buff, 3, 100);
 8000f10:	f107 0108 	add.w	r1, r7, #8
 8000f14:	2364      	movs	r3, #100	@ 0x64
 8000f16:	2203      	movs	r2, #3
 8000f18:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <read_ADC+0x6c>)
 8000f1a:	f008 f9b7 	bl	800928c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2110      	movs	r1, #16
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f26:	f005 ffd7 	bl	8006ed8 <HAL_GPIO_WritePin>

	return ADC_rx_buff[0];
 8000f2a:	7a3b      	ldrb	r3, [r7, #8]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000134 	.word	0x20000134

08000f38 <check_ADC>:

uint8_t check_ADC(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

	if(read_ADC(SYSTEM_STATUS) == 0x81){
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff ffc3 	bl	8000ec8 <read_ADC>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b81      	cmp	r3, #129	@ 0x81
 8000f46:	d101      	bne.n	8000f4c <check_ADC+0x14>
		return 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <check_ADC+0x16>
	}
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <ADC_change_polarity>:

void ADC_change_polarity(void){
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0

	uint8_t REG_DATA_CGF = read_ADC(DATA_CFG);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff ffb5 	bl	8000ec8 <read_ADC>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	write_ADC(DATA_CFG, (REG_DATA_CGF|(1<<2)) );
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f7ff ff83 	bl	8000e78 <write_ADC>

	return;
 8000f72:	bf00      	nop
}
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <ADC_mult>:

	return val;
}

// to read the voltage of different changes the ADC must change from channel before conversion
void ADC_mult(uint8_t cnt, uint8_t sel_ch[], float volt[]){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	73fb      	strb	r3, [r7, #15]
	uint16_t result = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	83bb      	strh	r3, [r7, #28]
	uint8_t ADC_tx_buff[3];
	uint8_t ADC_rx_buff[3];
	ADC_tx_buff[0] = WRITE;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	753b      	strb	r3, [r7, #20]
	ADC_tx_buff[1]= CHANNEL_SEL;
 8000f92:	2311      	movs	r3, #17
 8000f94:	757b      	strb	r3, [r7, #21]

	if(cnt > 0){
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d015      	beq.n	8000fc8 <ADC_mult+0x4c>
		ADC_tx_buff[2] = sel_ch[0];
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	75bb      	strb	r3, [r7, #22]
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000faa:	f005 ff95 	bl	8006ed8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, ADC_tx_buff, 3, 100);
 8000fae:	f107 0114 	add.w	r1, r7, #20
 8000fb2:	2364      	movs	r3, #100	@ 0x64
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4873      	ldr	r0, [pc, #460]	@ (8001184 <ADC_mult+0x208>)
 8000fb8:	f007 fff3 	bl	8008fa2 <HAL_SPI_Transmit>
		// nothing to read
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc4:	f005 ff88 	bl	8006ed8 <HAL_GPIO_WritePin>
	}
	if(cnt > 1){
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d915      	bls.n	8000ffa <ADC_mult+0x7e>
		ADC_tx_buff[2] = sel_ch[1];
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	75bb      	strb	r3, [r7, #22]
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fdc:	f005 ff7c 	bl	8006ed8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, ADC_tx_buff, 3, 100);
 8000fe0:	f107 0114 	add.w	r1, r7, #20
 8000fe4:	2364      	movs	r3, #100	@ 0x64
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	4866      	ldr	r0, [pc, #408]	@ (8001184 <ADC_mult+0x208>)
 8000fea:	f007 ffda 	bl	8008fa2 <HAL_SPI_Transmit>
		// nothing to read (conversion is happening)
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff6:	f005 ff6f 	bl	8006ed8 <HAL_GPIO_WritePin>
	}
	// data is ready but also new data is loaded
	for(int8_t i=0;i<(cnt-2);i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	77fb      	strb	r3, [r7, #31]
 8000ffe:	e042      	b.n	8001086 <ADC_mult+0x10a>
		uint8_t ch = (uint8_t)(i+2);
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	3302      	adds	r3, #2
 8001004:	76fb      	strb	r3, [r7, #27]
		ADC_tx_buff[2] = sel_ch[ch];
 8001006:	7efb      	ldrb	r3, [r7, #27]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	75bb      	strb	r3, [r7, #22]
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2110      	movs	r1, #16
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f005 ff5e 	bl	8006ed8 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, ADC_rx_buff, 3, 100);
 800101c:	f107 0110 	add.w	r1, r7, #16
 8001020:	2364      	movs	r3, #100	@ 0x64
 8001022:	2203      	movs	r2, #3
 8001024:	4857      	ldr	r0, [pc, #348]	@ (8001184 <ADC_mult+0x208>)
 8001026:	f008 f931 	bl	800928c <HAL_SPI_Receive>
		HAL_SPI_Transmit(&hspi1, ADC_tx_buff, 3, 100);
 800102a:	f107 0114 	add.w	r1, r7, #20
 800102e:	2364      	movs	r3, #100	@ 0x64
 8001030:	2203      	movs	r2, #3
 8001032:	4854      	ldr	r0, [pc, #336]	@ (8001184 <ADC_mult+0x208>)
 8001034:	f007 ffb5 	bl	8008fa2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f005 ff4a 	bl	8006ed8 <HAL_GPIO_WritePin>
		result = (ADC_rx_buff[0] << 8) + ADC_rx_buff[1];
 8001044:	7c3b      	ldrb	r3, [r7, #16]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	7c7a      	ldrb	r2, [r7, #17]
 800104c:	4413      	add	r3, r2
 800104e:	83bb      	strh	r3, [r7, #28]
		uint8_t k = (uint8_t)i;
 8001050:	7ffb      	ldrb	r3, [r7, #31]
 8001052:	76bb      	strb	r3, [r7, #26]
		volt[k] = (float)result * 33/655360;
 8001054:	8bbb      	ldrh	r3, [r7, #28]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001188 <ADC_mult+0x20c>
 8001062:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001066:	7ebb      	ldrb	r3, [r7, #26]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	eddf 6a47 	vldr	s13, [pc, #284]	@ 800118c <ADC_mult+0x210>
 8001072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001076:	edc3 7a00 	vstr	s15, [r3]
	for(int8_t i=0;i<(cnt-2);i++){
 800107a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	3301      	adds	r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	77fb      	strb	r3, [r7, #31]
 8001086:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3b02      	subs	r3, #2
 800108e:	429a      	cmp	r2, r3
 8001090:	dbb6      	blt.n	8001000 <ADC_mult+0x84>
	}
	if(cnt > 1){
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d92e      	bls.n	80010f6 <ADC_mult+0x17a>
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2110      	movs	r1, #16
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f005 ff1a 	bl	8006ed8 <HAL_GPIO_WritePin>
		// nothing to write
		HAL_SPI_Receive(&hspi1, ADC_rx_buff, 3, 100);
 80010a4:	f107 0110 	add.w	r1, r7, #16
 80010a8:	2364      	movs	r3, #100	@ 0x64
 80010aa:	2203      	movs	r2, #3
 80010ac:	4835      	ldr	r0, [pc, #212]	@ (8001184 <ADC_mult+0x208>)
 80010ae:	f008 f8ed 	bl	800928c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2110      	movs	r1, #16
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ba:	f005 ff0d 	bl	8006ed8 <HAL_GPIO_WritePin>
		result = (ADC_rx_buff[0] << 8) + ADC_rx_buff[1];
 80010be:	7c3b      	ldrb	r3, [r7, #16]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	7c7a      	ldrb	r2, [r7, #17]
 80010c6:	4413      	add	r3, r2
 80010c8:	83bb      	strh	r3, [r7, #28]
		volt[cnt-2] = (float)result * 33/655360;
 80010ca:	8bbb      	ldrh	r3, [r7, #28]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001188 <ADC_mult+0x20c>
 80010d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80010e2:	3b02      	subs	r3, #2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800118c <ADC_mult+0x210>
 80010ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f2:	edc3 7a00 	vstr	s15, [r3]
	}
	if(cnt == 1){
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10b      	bne.n	8001114 <ADC_mult+0x198>
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2110      	movs	r1, #16
 8001100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001104:	f005 fee8 	bl	8006ed8 <HAL_GPIO_WritePin>
		// nothing to write
		// nothing to read
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001110:	f005 fee2 	bl	8006ed8 <HAL_GPIO_WritePin>
	}
	if(cnt > 0){
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d02f      	beq.n	800117a <ADC_mult+0x1fe>
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001122:	f005 fed9 	bl	8006ed8 <HAL_GPIO_WritePin>
		// nothing to write
		HAL_SPI_Receive(&hspi1, ADC_rx_buff, 3, 100);
 8001126:	f107 0110 	add.w	r1, r7, #16
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	2203      	movs	r2, #3
 800112e:	4815      	ldr	r0, [pc, #84]	@ (8001184 <ADC_mult+0x208>)
 8001130:	f008 f8ac 	bl	800928c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2110      	movs	r1, #16
 8001138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113c:	f005 fecc 	bl	8006ed8 <HAL_GPIO_WritePin>
		result = (ADC_rx_buff[0] << 8) + ADC_rx_buff[1];
 8001140:	7c3b      	ldrb	r3, [r7, #16]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b29b      	uxth	r3, r3
 8001146:	7c7a      	ldrb	r2, [r7, #17]
 8001148:	4413      	add	r3, r2
 800114a:	83bb      	strh	r3, [r7, #28]
		volt[cnt-1] = (float)result * 33/655360;
 800114c:	8bbb      	ldrh	r3, [r7, #28]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001156:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001188 <ADC_mult+0x20c>
 800115a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001164:	3b01      	subs	r3, #1
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800118c <ADC_mult+0x210>
 8001170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001174:	edc3 7a00 	vstr	s15, [r3]
	}

	return;
 8001178:	bf00      	nop
 800117a:	bf00      	nop
}
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000134 	.word	0x20000134
 8001188:	42040000 	.word	0x42040000
 800118c:	49200000 	.word	0x49200000

08001190 <float_to_ASCII>:
 */

// includes
#include "main.h"

uint8_t float_to_ASCII(float val, uint8_t buf[]){
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	ed87 0a01 	vstr	s0, [r7, #4]
 800119a:	6038      	str	r0, [r7, #0]
	// 5123.946 -> 5123 / -0.001 -> -0.001/ 12.00 -> 12.0

	// size is normally 3
	uint8_t size = 5;
 800119c:	2305      	movs	r3, #5
 800119e:	727b      	strb	r3, [r7, #9]
	uint8_t ngtv_flg = 0;	// number is negative
 80011a0:	2300      	movs	r3, #0
 80011a2:	77fb      	strb	r3, [r7, #31]
	uint8_t cntr = 0;		// length of array
 80011a4:	2300      	movs	r3, #0
 80011a6:	77bb      	strb	r3, [r7, #30]
	float pos = 0.0;		// absolute value
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]

	// if value is zero
	if(val == 0.0){
 80011ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d104      	bne.n	80011c6 <float_to_ASCII+0x36>
		buf[0] = 48;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2230      	movs	r2, #48	@ 0x30
 80011c0:	701a      	strb	r2, [r3, #0]
		return 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e163      	b.n	800148e <float_to_ASCII+0x2fe>
	}

	// check if value is negative
	if(val < 0.0){
 80011c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	d518      	bpl.n	8001206 <float_to_ASCII+0x76>
		ngtv_flg = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	77fb      	strb	r3, [r7, #31]
		pos = val * -1.0;
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff f95d 	bl	8000498 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc7f 	bl	8000ae8 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef1 7a67 	vneg.f32	s15, s15
 80011f4:	edc7 7a06 	vstr	s15, [r7, #24]
		cntr += 1;
 80011f8:	7fbb      	ldrb	r3, [r7, #30]
 80011fa:	3301      	adds	r3, #1
 80011fc:	77bb      	strb	r3, [r7, #30]
		buf[0] = 45;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	222d      	movs	r2, #45	@ 0x2d
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e001      	b.n	800120a <float_to_ASCII+0x7a>
	}
	else{
		pos = val;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	61bb      	str	r3, [r7, #24]
	}

	// check how many integers there are
	uint8_t intgr = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
	float prfx = 1.0;
 800120e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001212:	613b      	str	r3, [r7, #16]
	while(pos >= prfx){
 8001214:	e00a      	b.n	800122c <float_to_ASCII+0x9c>
		prfx *= 10.0;
 8001216:	edd7 7a04 	vldr	s15, [r7, #16]
 800121a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800121e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001222:	edc7 7a04 	vstr	s15, [r7, #16]
		intgr += 1;
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	3301      	adds	r3, #1
 800122a:	75fb      	strb	r3, [r7, #23]
	while(pos >= prfx){
 800122c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001230:	edd7 7a04 	vldr	s15, [r7, #16]
 8001234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123c:	daeb      	bge.n	8001216 <float_to_ASCII+0x86>
	}

	// 51235.122 -> 51235
	if(intgr >= size){
 800123e:	7dfa      	ldrb	r2, [r7, #23]
 8001240:	7a7b      	ldrb	r3, [r7, #9]
 8001242:	429a      	cmp	r2, r3
 8001244:	d33b      	bcc.n	80012be <float_to_ASCII+0x12e>
		for(uint8_t j=cntr;j<(intgr+cntr); j++){
 8001246:	7fbb      	ldrb	r3, [r7, #30]
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e02e      	b.n	80012aa <float_to_ASCII+0x11a>
			buf[j] = (uint8_t) fmod(pos / (prfx/10), 10) + 48;
 800124c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001250:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001254:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001258:	ed97 7a06 	vldr	s14, [r7, #24]
 800125c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001260:	ee16 0a90 	vmov	r0, s13
 8001264:	f7ff f918 	bl	8000498 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8001498 <float_to_ASCII+0x308>
 8001270:	ec43 2b10 	vmov	d0, r2, r3
 8001274:	f00e fab6 	bl	800f7e4 <fmod>
 8001278:	ec53 2b10 	vmov	r2, r3, d0
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc12 	bl	8000aa8 <__aeabi_d2uiz>
 8001284:	4603      	mov	r3, r0
 8001286:	b2da      	uxtb	r2, r3
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	440b      	add	r3, r1
 800128e:	3230      	adds	r2, #48	@ 0x30
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	701a      	strb	r2, [r3, #0]
			prfx /= 10;
 8001294:	ed97 7a04 	vldr	s14, [r7, #16]
 8001298:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800129c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a0:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint8_t j=cntr;j<(intgr+cntr); j++){
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	7df9      	ldrb	r1, [r7, #23]
 80012ae:	7fbb      	ldrb	r3, [r7, #30]
 80012b0:	440b      	add	r3, r1
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dbca      	blt.n	800124c <float_to_ASCII+0xbc>
		}
		cntr = intgr + cntr;
 80012b6:	7dfa      	ldrb	r2, [r7, #23]
 80012b8:	7fbb      	ldrb	r3, [r7, #30]
 80012ba:	4413      	add	r3, r2
 80012bc:	77bb      	strb	r3, [r7, #30]
	}
	// -12.96 -> -12.9 (transform to three numbers)
	if(intgr < size && intgr > 0){
 80012be:	7dfa      	ldrb	r2, [r7, #23]
 80012c0:	7a7b      	ldrb	r3, [r7, #9]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d269      	bcs.n	800139a <float_to_ASCII+0x20a>
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d066      	beq.n	800139a <float_to_ASCII+0x20a>
		// get the 3 number containing information (12.9 -> 129)
		for(uint8_t j=intgr;j<size;j++){
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	73bb      	strb	r3, [r7, #14]
 80012d0:	e012      	b.n	80012f8 <float_to_ASCII+0x168>
			pos *= 10;
 80012d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80012d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	edc7 7a06 	vstr	s15, [r7, #24]
			prfx *= 10;
 80012e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ee:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint8_t j=intgr;j<size;j++){
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	3301      	adds	r3, #1
 80012f6:	73bb      	strb	r3, [r7, #14]
 80012f8:	7bba      	ldrb	r2, [r7, #14]
 80012fa:	7a7b      	ldrb	r3, [r7, #9]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3e8      	bcc.n	80012d2 <float_to_ASCII+0x142>
		}
		// add the point and the numbers holding information
		for(uint8_t j=cntr;j<(size+cntr+1); j++){
 8001300:	7fbb      	ldrb	r3, [r7, #30]
 8001302:	737b      	strb	r3, [r7, #13]
 8001304:	e03d      	b.n	8001382 <float_to_ASCII+0x1f2>
			if(j == intgr+cntr){
 8001306:	7b7a      	ldrb	r2, [r7, #13]
 8001308:	7df9      	ldrb	r1, [r7, #23]
 800130a:	7fbb      	ldrb	r3, [r7, #30]
 800130c:	440b      	add	r3, r1
 800130e:	429a      	cmp	r2, r3
 8001310:	d108      	bne.n	8001324 <float_to_ASCII+0x194>
				buf[cntr+intgr] = 46;
 8001312:	7fba      	ldrb	r2, [r7, #30]
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	4413      	add	r3, r2
 8001318:	461a      	mov	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	222e      	movs	r2, #46	@ 0x2e
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e02b      	b.n	800137c <float_to_ASCII+0x1ec>
			}
			else{
				buf[j] = (uint8_t) fmod(pos / (prfx/10), 10) + 48;
 8001324:	ed97 7a04 	vldr	s14, [r7, #16]
 8001328:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800132c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001330:	ed97 7a06 	vldr	s14, [r7, #24]
 8001334:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001338:	ee16 0a90 	vmov	r0, s13
 800133c:	f7ff f8ac 	bl	8000498 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8001498 <float_to_ASCII+0x308>
 8001348:	ec43 2b10 	vmov	d0, r2, r3
 800134c:	f00e fa4a 	bl	800f7e4 <fmod>
 8001350:	ec53 2b10 	vmov	r2, r3, d0
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fba6 	bl	8000aa8 <__aeabi_d2uiz>
 800135c:	4603      	mov	r3, r0
 800135e:	b2da      	uxtb	r2, r3
 8001360:	7b7b      	ldrb	r3, [r7, #13]
 8001362:	6839      	ldr	r1, [r7, #0]
 8001364:	440b      	add	r3, r1
 8001366:	3230      	adds	r2, #48	@ 0x30
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]
				prfx /= 10;
 800136c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001370:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001378:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint8_t j=cntr;j<(size+cntr+1); j++){
 800137c:	7b7b      	ldrb	r3, [r7, #13]
 800137e:	3301      	adds	r3, #1
 8001380:	737b      	strb	r3, [r7, #13]
 8001382:	7a7a      	ldrb	r2, [r7, #9]
 8001384:	7fbb      	ldrb	r3, [r7, #30]
 8001386:	441a      	add	r2, r3
 8001388:	7b7b      	ldrb	r3, [r7, #13]
 800138a:	429a      	cmp	r2, r3
 800138c:	dabb      	bge.n	8001306 <float_to_ASCII+0x176>
			}
		}
		cntr = cntr + size + 1;
 800138e:	7fba      	ldrb	r2, [r7, #30]
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	4413      	add	r3, r2
 8001394:	b2db      	uxtb	r3, r3
 8001396:	3301      	adds	r3, #1
 8001398:	77bb      	strb	r3, [r7, #30]
	}
	// 0.0012345 -> 0.00123 / 0.99951 -> 0.999 / 0.100000 -> 0.100 (transform to three numbers)
	if(intgr <= 0){
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d175      	bne.n	800148c <float_to_ASCII+0x2fc>
		// steps are i.e. 0.000123 -> 0. + 000 + 123
		uint8_t frctnl = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	733b      	strb	r3, [r7, #12]
		// make 0.
		buf[cntr] = 48;
 80013a4:	7fbb      	ldrb	r3, [r7, #30]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	2230      	movs	r2, #48	@ 0x30
 80013ac:	701a      	strb	r2, [r3, #0]
		cntr += 1;
 80013ae:	7fbb      	ldrb	r3, [r7, #30]
 80013b0:	3301      	adds	r3, #1
 80013b2:	77bb      	strb	r3, [r7, #30]
		buf[cntr] = 46;
 80013b4:	7fbb      	ldrb	r3, [r7, #30]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	222e      	movs	r2, #46	@ 0x2e
 80013bc:	701a      	strb	r2, [r3, #0]
		cntr += 1;
 80013be:	7fbb      	ldrb	r3, [r7, #30]
 80013c0:	3301      	adds	r3, #1
 80013c2:	77bb      	strb	r3, [r7, #30]
		// get the three numbers that hold the information
		while(pos < 100){
 80013c4:	e00a      	b.n	80013dc <float_to_ASCII+0x24c>
			pos *= 10;
 80013c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d2:	edc7 7a06 	vstr	s15, [r7, #24]
			frctnl += 1;
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	3301      	adds	r3, #1
 80013da:	733b      	strb	r3, [r7, #12]
		while(pos < 100){
 80013dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80014a0 <float_to_ASCII+0x310>
 80013e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	d4eb      	bmi.n	80013c6 <float_to_ASCII+0x236>
		}
		// pad zeros (+ 000)
		for(uint8_t i=cntr;i<(frctnl-1+ngtv_flg);i++){
 80013ee:	7fbb      	ldrb	r3, [r7, #30]
 80013f0:	72fb      	strb	r3, [r7, #11]
 80013f2:	e00a      	b.n	800140a <float_to_ASCII+0x27a>
			buf[i] = 48;
 80013f4:	7afb      	ldrb	r3, [r7, #11]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	2230      	movs	r2, #48	@ 0x30
 80013fc:	701a      	strb	r2, [r3, #0]
			cntr += 1;
 80013fe:	7fbb      	ldrb	r3, [r7, #30]
 8001400:	3301      	adds	r3, #1
 8001402:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i=cntr;i<(frctnl-1+ngtv_flg);i++){
 8001404:	7afb      	ldrb	r3, [r7, #11]
 8001406:	3301      	adds	r3, #1
 8001408:	72fb      	strb	r3, [r7, #11]
 800140a:	7afa      	ldrb	r2, [r7, #11]
 800140c:	7b3b      	ldrb	r3, [r7, #12]
 800140e:	1e59      	subs	r1, r3, #1
 8001410:	7ffb      	ldrb	r3, [r7, #31]
 8001412:	440b      	add	r3, r1
 8001414:	429a      	cmp	r2, r3
 8001416:	dbed      	blt.n	80013f4 <float_to_ASCII+0x264>
		}
		// add the numbers containing information to the array (+ 123)
		prfx = 100;
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <float_to_ASCII+0x314>)
 800141a:	613b      	str	r3, [r7, #16]
		for(uint8_t j=cntr;j<(cntr+size); j++){
 800141c:	7fbb      	ldrb	r3, [r7, #30]
 800141e:	72bb      	strb	r3, [r7, #10]
 8001420:	e02a      	b.n	8001478 <float_to_ASCII+0x2e8>
			buf[j] = (uint8_t) fmod(pos / (prfx), 10) + 48;
 8001422:	ed97 7a06 	vldr	s14, [r7, #24]
 8001426:	edd7 7a04 	vldr	s15, [r7, #16]
 800142a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800142e:	ee16 0a90 	vmov	r0, s13
 8001432:	f7ff f831 	bl	8000498 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8001498 <float_to_ASCII+0x308>
 800143e:	ec43 2b10 	vmov	d0, r2, r3
 8001442:	f00e f9cf 	bl	800f7e4 <fmod>
 8001446:	ec53 2b10 	vmov	r2, r3, d0
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb2b 	bl	8000aa8 <__aeabi_d2uiz>
 8001452:	4603      	mov	r3, r0
 8001454:	b2da      	uxtb	r2, r3
 8001456:	7abb      	ldrb	r3, [r7, #10]
 8001458:	6839      	ldr	r1, [r7, #0]
 800145a:	440b      	add	r3, r1
 800145c:	3230      	adds	r2, #48	@ 0x30
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]
			prfx /= 10;
 8001462:	ed97 7a04 	vldr	s14, [r7, #16]
 8001466:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800146a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146e:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint8_t j=cntr;j<(cntr+size); j++){
 8001472:	7abb      	ldrb	r3, [r7, #10]
 8001474:	3301      	adds	r3, #1
 8001476:	72bb      	strb	r3, [r7, #10]
 8001478:	7aba      	ldrb	r2, [r7, #10]
 800147a:	7fb9      	ldrb	r1, [r7, #30]
 800147c:	7a7b      	ldrb	r3, [r7, #9]
 800147e:	440b      	add	r3, r1
 8001480:	429a      	cmp	r2, r3
 8001482:	dbce      	blt.n	8001422 <float_to_ASCII+0x292>
		}
		cntr = cntr + size;
 8001484:	7fba      	ldrb	r2, [r7, #30]
 8001486:	7a7b      	ldrb	r3, [r7, #9]
 8001488:	4413      	add	r3, r2
 800148a:	77bb      	strb	r3, [r7, #30]
	}
	return cntr;
 800148c:	7fbb      	ldrb	r3, [r7, #30]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	00000000 	.word	0x00000000
 800149c:	40240000 	.word	0x40240000
 80014a0:	42c80000 	.word	0x42c80000
 80014a4:	42c80000 	.word	0x42c80000

080014a8 <ASCII_to_float>:

float ASCII_to_float(uint8_t begin, uint8_t end){
 80014a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	460a      	mov	r2, r1
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	4613      	mov	r3, r2
 80014b8:	71bb      	strb	r3, [r7, #6]
	float val = 0.0;		// result
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
	uint8_t k = begin;		// increment
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	74fb      	strb	r3, [r7, #19]
	uint8_t dot = 0;		// dot for decimal calculation
 80014c4:	2300      	movs	r3, #0
 80014c6:	74bb      	strb	r3, [r7, #18]
	float dcmlpnt = 1.0;	// decimal point counter
 80014c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014cc:	60fb      	str	r3, [r7, #12]
	uint8_t ngtv_flg = 0;	// number is negative
 80014ce:	2300      	movs	r3, #0
 80014d0:	72fb      	strb	r3, [r7, #11]

	if(UART_rx_buff[k] == 45){	// check if UART send 45 is '-' (negative sign)
 80014d2:	7cfb      	ldrb	r3, [r7, #19]
 80014d4:	4a46      	ldr	r2, [pc, #280]	@ (80015f0 <ASCII_to_float+0x148>)
 80014d6:	5cd3      	ldrb	r3, [r2, r3]
 80014d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80014da:	d168      	bne.n	80015ae <ASCII_to_float+0x106>
	  ngtv_flg = 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	72fb      	strb	r3, [r7, #11]
	  k = begin + 1;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	3301      	adds	r3, #1
 80014e4:	74fb      	strb	r3, [r7, #19]
	}
	// loop through UART Rx buffer
	while(k != end){
 80014e6:	e062      	b.n	80015ae <ASCII_to_float+0x106>
	  if(UART_rx_buff[k] == 46){	// 46 is ASCII '.' (dot)
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
 80014ea:	4a41      	ldr	r2, [pc, #260]	@ (80015f0 <ASCII_to_float+0x148>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80014f0:	d104      	bne.n	80014fc <ASCII_to_float+0x54>
		  dot = 1;
 80014f2:	2301      	movs	r3, #1
 80014f4:	74bb      	strb	r3, [r7, #18]
		  k += 1;
 80014f6:	7cfb      	ldrb	r3, [r7, #19]
 80014f8:	3301      	adds	r3, #1
 80014fa:	74fb      	strb	r3, [r7, #19]
	  }
	  // calculate value from UART uint8_t to float
	  if(dot == 0){
 80014fc:	7cbb      	ldrb	r3, [r7, #18]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d115      	bne.n	800152e <ASCII_to_float+0x86>
		  val = val * 10 + (float)UART_rx_buff[k] - 48.0;
 8001502:	edd7 7a05 	vldr	s15, [r7, #20]
 8001506:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800150a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800150e:	7cfb      	ldrb	r3, [r7, #19]
 8001510:	4a37      	ldr	r2, [pc, #220]	@ (80015f0 <ASCII_to_float+0x148>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80015f4 <ASCII_to_float+0x14c>
 8001524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001528:	edc7 7a05 	vstr	s15, [r7, #20]
 800152c:	e03c      	b.n	80015a8 <ASCII_to_float+0x100>
	  }
	  else{
		  val = val + (((float)UART_rx_buff[k] - 48.0) / (10.0 * dcmlpnt));
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7fe ffb2 	bl	8000498 <__aeabi_f2d>
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	4a2d      	ldr	r2, [pc, #180]	@ (80015f0 <ASCII_to_float+0x148>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001546:	ee17 0a90 	vmov	r0, s15
 800154a:	f7fe ffa5 	bl	8000498 <__aeabi_f2d>
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <ASCII_to_float+0x150>)
 8001554:	f7fe fe40 	bl	80001d8 <__aeabi_dsub>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4690      	mov	r8, r2
 800155e:	4699      	mov	r9, r3
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7fe ff99 	bl	8000498 <__aeabi_f2d>
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <ASCII_to_float+0x154>)
 800156c:	f7fe ffec 	bl	8000548 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4640      	mov	r0, r8
 8001576:	4649      	mov	r1, r9
 8001578:	f7ff f910 	bl	800079c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4620      	mov	r0, r4
 8001582:	4629      	mov	r1, r5
 8001584:	f7fe fe2a 	bl	80001dc <__adddf3>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff faaa 	bl	8000ae8 <__aeabi_d2f>
 8001594:	4603      	mov	r3, r0
 8001596:	617b      	str	r3, [r7, #20]
		  dcmlpnt *= 10.0;
 8001598:	edd7 7a03 	vldr	s15, [r7, #12]
 800159c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	edc7 7a03 	vstr	s15, [r7, #12]
	  }
	  k += 1;
 80015a8:	7cfb      	ldrb	r3, [r7, #19]
 80015aa:	3301      	adds	r3, #1
 80015ac:	74fb      	strb	r3, [r7, #19]
	while(k != end){
 80015ae:	7cfa      	ldrb	r2, [r7, #19]
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d198      	bne.n	80014e8 <ASCII_to_float+0x40>
	}
	// make value negative
	if(ngtv_flg == 1){
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d10f      	bne.n	80015dc <ASCII_to_float+0x134>
	  val *= -1.0;
 80015bc:	6978      	ldr	r0, [r7, #20]
 80015be:	f7fe ff6b 	bl	8000498 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa8d 	bl	8000ae8 <__aeabi_d2f>
 80015ce:	4603      	mov	r3, r0
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef1 7a67 	vneg.f32	s15, s15
 80015d8:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return val;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	ee07 3a90 	vmov	s15, r3
}
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015ee:	bf00      	nop
 80015f0:	20000304 	.word	0x20000304
 80015f4:	42400000 	.word	0x42400000
 80015f8:	40480000 	.word	0x40480000
 80015fc:	40240000 	.word	0x40240000

08001600 <show_parameter>:
 */

// includes
#include "main.h"

void show_parameter(float val, uint8_t message[], uint8_t mssg_end){
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	ed87 0a03 	vstr	s0, [r7, #12]
 800160a:	60b8      	str	r0, [r7, #8]
 800160c:	460b      	mov	r3, r1
 800160e:	71fb      	strb	r3, [r7, #7]
	// show parameter
	while(UART_tx_flag != 0);
 8001610:	bf00      	nop
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <show_parameter+0x84>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1fb      	bne.n	8001612 <show_parameter+0x12>
	HAL_UART_Transmit_DMA(&huart2, message, mssg_end);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	b29b      	uxth	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	4819      	ldr	r0, [pc, #100]	@ (8001688 <show_parameter+0x88>)
 8001624:	f008 fdf8 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <show_parameter+0x84>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
	// communicate to console
	uint8_t buff2[10];
	uint8_t size = float_to_ASCII(val, buff2);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4618      	mov	r0, r3
 8001634:	ed97 0a03 	vldr	s0, [r7, #12]
 8001638:	f7ff fdaa 	bl	8001190 <float_to_ASCII>
 800163c:	4603      	mov	r3, r0
 800163e:	77fb      	strb	r3, [r7, #31]
	while(UART_tx_flag != 0);
 8001640:	bf00      	nop
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <show_parameter+0x84>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1fb      	bne.n	8001642 <show_parameter+0x42>
	HAL_UART_Transmit_DMA(&huart2, buff2, size);
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <show_parameter+0x88>)
 8001656:	f008 fddf 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <show_parameter+0x84>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
	while(UART_tx_flag != 0);
 8001660:	bf00      	nop
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <show_parameter+0x84>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1fb      	bne.n	8001662 <show_parameter+0x62>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n:", 1);
 800166a:	2201      	movs	r2, #1
 800166c:	4907      	ldr	r1, [pc, #28]	@ (800168c <show_parameter+0x8c>)
 800166e:	4806      	ldr	r0, [pc, #24]	@ (8001688 <show_parameter+0x88>)
 8001670:	f008 fdd2 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <show_parameter+0x84>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]

	return;
 800167a:	bf00      	nop
}
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002fc 	.word	0x200002fc
 8001688:	20000198 	.word	0x20000198
 800168c:	0800fa70 	.word	0x0800fa70

08001690 <change_voltammetry_parameter>:

void change_voltammetry_parameter(float * val, uint8_t message[], uint8_t mssg_end){
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	4613      	mov	r3, r2
 800169c:	71fb      	strb	r3, [r7, #7]
	uint8_t size = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	77bb      	strb	r3, [r7, #30]
	uint8_t i = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	77fb      	strb	r3, [r7, #31]
	// send which parameter
	while(UART_tx_flag != 0);
 80016a6:	bf00      	nop
 80016a8:	4b30      	ldr	r3, [pc, #192]	@ (800176c <change_voltammetry_parameter+0xdc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1fb      	bne.n	80016a8 <change_voltammetry_parameter+0x18>
	HAL_UART_Transmit_DMA(&huart2, message, mssg_end);
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	482d      	ldr	r0, [pc, #180]	@ (8001770 <change_voltammetry_parameter+0xe0>)
 80016ba:	f008 fdad 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <change_voltammetry_parameter+0xdc>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
	// receive data and set it in a parameter
	while(UART_rx_flag != 1);
 80016c4:	bf00      	nop
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <change_voltammetry_parameter+0xe4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d1fb      	bne.n	80016c6 <change_voltammetry_parameter+0x36>
	i = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	77fb      	strb	r3, [r7, #31]
	while(UART_rx_buff[i] != 10 && UART_rx_buff[i] != 13){
 80016d2:	e002      	b.n	80016da <change_voltammetry_parameter+0x4a>
		i += 1;
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	3301      	adds	r3, #1
 80016d8:	77fb      	strb	r3, [r7, #31]
	while(UART_rx_buff[i] != 10 && UART_rx_buff[i] != 13){
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <change_voltammetry_parameter+0xe8>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	2b0a      	cmp	r3, #10
 80016e2:	d004      	beq.n	80016ee <change_voltammetry_parameter+0x5e>
 80016e4:	7ffb      	ldrb	r3, [r7, #31]
 80016e6:	4a24      	ldr	r2, [pc, #144]	@ (8001778 <change_voltammetry_parameter+0xe8>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	2b0d      	cmp	r3, #13
 80016ec:	d1f2      	bne.n	80016d4 <change_voltammetry_parameter+0x44>
	}
	// if no enter, there is data and set parameter
	if(i != 0){
 80016ee:	7ffb      	ldrb	r3, [r7, #31]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d009      	beq.n	8001708 <change_voltammetry_parameter+0x78>
		*val = ASCII_to_float(0,i);
 80016f4:	7ffb      	ldrb	r3, [r7, #31]
 80016f6:	4619      	mov	r1, r3
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fed5 	bl	80014a8 <ASCII_to_float>
 80016fe:	eef0 7a40 	vmov.f32	s15, s0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	edc3 7a00 	vstr	s15, [r3]
	}
	clear_UART_rx_buff();
 8001708:	f002 fcce 	bl	80040a8 <clear_UART_rx_buff>
	UART_rx_flag = 0;
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <change_voltammetry_parameter+0xe4>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
	// Communicate parameter back to console
	uint8_t buff1[10];
	size = float_to_ASCII(*val, buff1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4618      	mov	r0, r3
 800171e:	eeb0 0a67 	vmov.f32	s0, s15
 8001722:	f7ff fd35 	bl	8001190 <float_to_ASCII>
 8001726:	4603      	mov	r3, r0
 8001728:	77bb      	strb	r3, [r7, #30]
	while(UART_tx_flag != 0);
 800172a:	bf00      	nop
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <change_voltammetry_parameter+0xdc>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1fb      	bne.n	800172c <change_voltammetry_parameter+0x9c>
	HAL_UART_Transmit_DMA(&huart2, buff1, size);
 8001734:	7fbb      	ldrb	r3, [r7, #30]
 8001736:	b29a      	uxth	r2, r3
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	480c      	ldr	r0, [pc, #48]	@ (8001770 <change_voltammetry_parameter+0xe0>)
 8001740:	f008 fd6a 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <change_voltammetry_parameter+0xdc>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
	while(UART_tx_flag != 0);
 800174a:	bf00      	nop
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <change_voltammetry_parameter+0xdc>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1fb      	bne.n	800174c <change_voltammetry_parameter+0xbc>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n:", 1);
 8001754:	2201      	movs	r2, #1
 8001756:	4909      	ldr	r1, [pc, #36]	@ (800177c <change_voltammetry_parameter+0xec>)
 8001758:	4805      	ldr	r0, [pc, #20]	@ (8001770 <change_voltammetry_parameter+0xe0>)
 800175a:	f008 fd5d 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 800175e:	4b03      	ldr	r3, [pc, #12]	@ (800176c <change_voltammetry_parameter+0xdc>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]

	return;
 8001764:	bf00      	nop
}
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200002fc 	.word	0x200002fc
 8001770:	20000198 	.word	0x20000198
 8001774:	200002fd 	.word	0x200002fd
 8001778:	20000304 	.word	0x20000304
 800177c:	0800fa70 	.word	0x0800fa70

08001780 <change_voltammetry_technique>:

void change_voltammetry_technique(uint8_t * val, uint8_t message[], uint8_t mssg_end){
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	4613      	mov	r3, r2
 800178c:	71fb      	strb	r3, [r7, #7]
	uint8_t size = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	77bb      	strb	r3, [r7, #30]
	uint8_t i = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	77fb      	strb	r3, [r7, #31]
	// send which parameter
	while(UART_tx_flag != 0);
 8001796:	bf00      	nop
 8001798:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <change_voltammetry_technique+0xd4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1fb      	bne.n	8001798 <change_voltammetry_technique+0x18>
	HAL_UART_Transmit_DMA(&huart2, message, mssg_end);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	482b      	ldr	r0, [pc, #172]	@ (8001858 <change_voltammetry_technique+0xd8>)
 80017aa:	f008 fd35 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <change_voltammetry_technique+0xd4>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
	// receive data and set it in a parameter
	while(UART_rx_flag != 1);
 80017b4:	bf00      	nop
 80017b6:	4b29      	ldr	r3, [pc, #164]	@ (800185c <change_voltammetry_technique+0xdc>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d1fb      	bne.n	80017b6 <change_voltammetry_technique+0x36>
	i = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	77fb      	strb	r3, [r7, #31]
	while(UART_rx_buff[i] != 10 && UART_rx_buff[i] != 13){
 80017c2:	e002      	b.n	80017ca <change_voltammetry_technique+0x4a>
		i += 1;
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	3301      	adds	r3, #1
 80017c8:	77fb      	strb	r3, [r7, #31]
	while(UART_rx_buff[i] != 10 && UART_rx_buff[i] != 13){
 80017ca:	7ffb      	ldrb	r3, [r7, #31]
 80017cc:	4a24      	ldr	r2, [pc, #144]	@ (8001860 <change_voltammetry_technique+0xe0>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	2b0a      	cmp	r3, #10
 80017d2:	d004      	beq.n	80017de <change_voltammetry_technique+0x5e>
 80017d4:	7ffb      	ldrb	r3, [r7, #31]
 80017d6:	4a22      	ldr	r2, [pc, #136]	@ (8001860 <change_voltammetry_technique+0xe0>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	2b0d      	cmp	r3, #13
 80017dc:	d1f2      	bne.n	80017c4 <change_voltammetry_technique+0x44>
	}
	// if no enter, there is data and set parameter
	if(i != 0){
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00e      	beq.n	8001802 <change_voltammetry_technique+0x82>
		*val = ASCII_to_float(0,i);
 80017e4:	7ffb      	ldrb	r3, [r7, #31]
 80017e6:	4619      	mov	r1, r3
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fe5d 	bl	80014a8 <ASCII_to_float>
 80017ee:	eef0 7a40 	vmov.f32	s15, s0
 80017f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f6:	edc7 7a00 	vstr	s15, [r7]
 80017fa:	783b      	ldrb	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	701a      	strb	r2, [r3, #0]
	}
	clear_UART_rx_buff();
 8001802:	f002 fc51 	bl	80040a8 <clear_UART_rx_buff>
	UART_rx_flag = 0;
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <change_voltammetry_technique+0xdc>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
	// Communicate parameter back to console
	uint8_t buff1[10];
	size = float_to_ASCII(*val, buff1);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4618      	mov	r0, r3
 800181e:	eeb0 0a67 	vmov.f32	s0, s15
 8001822:	f7ff fcb5 	bl	8001190 <float_to_ASCII>
 8001826:	4603      	mov	r3, r0
 8001828:	77bb      	strb	r3, [r7, #30]
	while(UART_tx_flag != 0);
 800182a:	bf00      	nop
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <change_voltammetry_technique+0xd4>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1fb      	bne.n	800182c <change_voltammetry_technique+0xac>
	HAL_UART_Transmit_DMA(&huart2, buff1, size);
 8001834:	7fbb      	ldrb	r3, [r7, #30]
 8001836:	b29a      	uxth	r2, r3
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	@ (8001858 <change_voltammetry_technique+0xd8>)
 8001840:	f008 fcea 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <change_voltammetry_technique+0xd4>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]

	return;
 800184a:	bf00      	nop
}
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002fc 	.word	0x200002fc
 8001858:	20000198 	.word	0x20000198
 800185c:	200002fd 	.word	0x200002fd
 8001860:	20000304 	.word	0x20000304

08001864 <voltammerty_write_SIM_parameter>:

void voltammerty_write_SIM_parameter(uint8_t channel){
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	// get the first broadcast channel settings
	for(uint8_t i=0;i<4;i++){
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e1c4      	b.n	8001bfe <voltammerty_write_SIM_parameter+0x39a>
		if(channels.parameters[i].ch_brdcst_on == 1 && i != channel){
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	4992      	ldr	r1, [pc, #584]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	440b      	add	r3, r1
 8001882:	3304      	adds	r3, #4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	f040 81a8 	bne.w	8001bdc <voltammerty_write_SIM_parameter+0x378>
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	429a      	cmp	r2, r3
 8001892:	f000 81a3 	beq.w	8001bdc <voltammerty_write_SIM_parameter+0x378>
			switch(channels.parameters[channel].technique){
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	4989      	ldr	r1, [pc, #548]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	440b      	add	r3, r1
 80018a4:	3305      	adds	r3, #5
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	f000 810b 	beq.w	8001ac4 <voltammerty_write_SIM_parameter+0x260>
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	f300 8188 	bgt.w	8001bc4 <voltammerty_write_SIM_parameter+0x360>
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d002      	beq.n	80018be <voltammerty_write_SIM_parameter+0x5a>
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d077      	beq.n	80019ac <voltammerty_write_SIM_parameter+0x148>
 80018bc:	e182      	b.n	8001bc4 <voltammerty_write_SIM_parameter+0x360>
				case 1:
					channels.parameters[i].technique = 1;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	497f      	ldr	r1, [pc, #508]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	440b      	add	r3, r1
 80018cc:	3305      	adds	r3, #5
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
					channels.parameters[i].cv.t_equilibration = channels.parameters[channel].cv.t_equilibration;
 80018d2:	79f9      	ldrb	r1, [r7, #7]
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	487a      	ldr	r0, [pc, #488]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80018d8:	460b      	mov	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4403      	add	r3, r0
 80018e2:	3308      	adds	r3, #8
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	4876      	ldr	r0, [pc, #472]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4403      	add	r3, r0
 80018f2:	3308      	adds	r3, #8
 80018f4:	6019      	str	r1, [r3, #0]
					channels.parameters[i].cv.E_begin = channels.parameters[channel].cv.E_begin;
 80018f6:	79f9      	ldrb	r1, [r7, #7]
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	4871      	ldr	r0, [pc, #452]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4403      	add	r3, r0
 8001906:	330c      	adds	r3, #12
 8001908:	6819      	ldr	r1, [r3, #0]
 800190a:	486d      	ldr	r0, [pc, #436]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4403      	add	r3, r0
 8001916:	330c      	adds	r3, #12
 8001918:	6019      	str	r1, [r3, #0]
					channels.parameters[i].cv.E_step = channels.parameters[channel].cv.E_step;
 800191a:	79f9      	ldrb	r1, [r7, #7]
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	4868      	ldr	r0, [pc, #416]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001920:	460b      	mov	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4403      	add	r3, r0
 800192a:	3318      	adds	r3, #24
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	4864      	ldr	r0, [pc, #400]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4403      	add	r3, r0
 800193a:	3318      	adds	r3, #24
 800193c:	6019      	str	r1, [r3, #0]
					channels.parameters[i].cv.E_vertex_1 = channels.parameters[channel].cv.E_vertex_1;
 800193e:	79f9      	ldrb	r1, [r7, #7]
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	485f      	ldr	r0, [pc, #380]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001944:	460b      	mov	r3, r1
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4403      	add	r3, r0
 800194e:	3310      	adds	r3, #16
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	485b      	ldr	r0, [pc, #364]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4403      	add	r3, r0
 800195e:	3310      	adds	r3, #16
 8001960:	6019      	str	r1, [r3, #0]
					channels.parameters[i].cv.E_vertex_2 = channels.parameters[channel].cv.E_vertex_2;
 8001962:	79f9      	ldrb	r1, [r7, #7]
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	4856      	ldr	r0, [pc, #344]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001968:	460b      	mov	r3, r1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	4403      	add	r3, r0
 8001972:	3314      	adds	r3, #20
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	4852      	ldr	r0, [pc, #328]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4403      	add	r3, r0
 8001982:	3314      	adds	r3, #20
 8001984:	6019      	str	r1, [r3, #0]
					channels.parameters[i].cv.scan_rate = channels.parameters[channel].cv.scan_rate;
 8001986:	79f9      	ldrb	r1, [r7, #7]
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	484d      	ldr	r0, [pc, #308]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4403      	add	r3, r0
 8001996:	331c      	adds	r3, #28
 8001998:	6819      	ldr	r1, [r3, #0]
 800199a:	4849      	ldr	r0, [pc, #292]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4403      	add	r3, r0
 80019a6:	331c      	adds	r3, #28
 80019a8:	6019      	str	r1, [r3, #0]
					break;
 80019aa:	e116      	b.n	8001bda <voltammerty_write_SIM_parameter+0x376>
				case 2:
					channels.parameters[i].technique = 2;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	4944      	ldr	r1, [pc, #272]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	440b      	add	r3, r1
 80019ba:	3305      	adds	r3, #5
 80019bc:	2202      	movs	r2, #2
 80019be:	701a      	strb	r2, [r3, #0]
					channels.parameters[i].dpv.t_equilibration = channels.parameters[channel].dpv.t_equilibration;
 80019c0:	79f9      	ldrb	r1, [r7, #7]
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	483e      	ldr	r0, [pc, #248]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80019c6:	460b      	mov	r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4403      	add	r3, r0
 80019d0:	3320      	adds	r3, #32
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	483a      	ldr	r0, [pc, #232]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4403      	add	r3, r0
 80019e0:	3320      	adds	r3, #32
 80019e2:	6019      	str	r1, [r3, #0]
					channels.parameters[i].dpv.E_begin = channels.parameters[channel].dpv.E_begin;
 80019e4:	79f9      	ldrb	r1, [r7, #7]
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	4835      	ldr	r0, [pc, #212]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80019ea:	460b      	mov	r3, r1
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	4403      	add	r3, r0
 80019f4:	3324      	adds	r3, #36	@ 0x24
 80019f6:	6819      	ldr	r1, [r3, #0]
 80019f8:	4831      	ldr	r0, [pc, #196]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4403      	add	r3, r0
 8001a04:	3324      	adds	r3, #36	@ 0x24
 8001a06:	6019      	str	r1, [r3, #0]
					channels.parameters[i].dpv.E_end = channels.parameters[channel].dpv.E_end;
 8001a08:	79f9      	ldrb	r1, [r7, #7]
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	482c      	ldr	r0, [pc, #176]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a0e:	460b      	mov	r3, r1
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4403      	add	r3, r0
 8001a18:	3328      	adds	r3, #40	@ 0x28
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	4828      	ldr	r0, [pc, #160]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4403      	add	r3, r0
 8001a28:	3328      	adds	r3, #40	@ 0x28
 8001a2a:	6019      	str	r1, [r3, #0]
					channels.parameters[i].dpv.E_pulse = channels.parameters[channel].dpv.E_pulse;
 8001a2c:	79f9      	ldrb	r1, [r7, #7]
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	4823      	ldr	r0, [pc, #140]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a32:	460b      	mov	r3, r1
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4403      	add	r3, r0
 8001a3c:	3330      	adds	r3, #48	@ 0x30
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	481f      	ldr	r0, [pc, #124]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4403      	add	r3, r0
 8001a4c:	3330      	adds	r3, #48	@ 0x30
 8001a4e:	6019      	str	r1, [r3, #0]
					channels.parameters[i].dpv.t_pulse = channels.parameters[channel].dpv.t_pulse;
 8001a50:	79f9      	ldrb	r1, [r7, #7]
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	481a      	ldr	r0, [pc, #104]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a56:	460b      	mov	r3, r1
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4403      	add	r3, r0
 8001a60:	3334      	adds	r3, #52	@ 0x34
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	4816      	ldr	r0, [pc, #88]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4403      	add	r3, r0
 8001a70:	3334      	adds	r3, #52	@ 0x34
 8001a72:	6019      	str	r1, [r3, #0]
					channels.parameters[i].dpv.Scan_rate = channels.parameters[channel].dpv.Scan_rate;
 8001a74:	79f9      	ldrb	r1, [r7, #7]
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	4811      	ldr	r0, [pc, #68]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4403      	add	r3, r0
 8001a84:	3338      	adds	r3, #56	@ 0x38
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4403      	add	r3, r0
 8001a94:	3338      	adds	r3, #56	@ 0x38
 8001a96:	6019      	str	r1, [r3, #0]
					channels.parameters[i].dpv.E_step = channels.parameters[channel].dpv.E_step;
 8001a98:	79f9      	ldrb	r1, [r7, #7]
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	4808      	ldr	r0, [pc, #32]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4403      	add	r3, r0
 8001aa8:	332c      	adds	r3, #44	@ 0x2c
 8001aaa:	6819      	ldr	r1, [r3, #0]
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <voltammerty_write_SIM_parameter+0x25c>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4403      	add	r3, r0
 8001ab8:	332c      	adds	r3, #44	@ 0x2c
 8001aba:	6019      	str	r1, [r3, #0]
					break;
 8001abc:	e08d      	b.n	8001bda <voltammerty_write_SIM_parameter+0x376>
 8001abe:	bf00      	nop
 8001ac0:	2000036c 	.word	0x2000036c
				case 3:
					channels.parameters[i].technique = channels.parameters[channel].technique;
 8001ac4:	79f9      	ldrb	r1, [r7, #7]
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	4852      	ldr	r0, [pc, #328]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001aca:	460b      	mov	r3, r1
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4403      	add	r3, r0
 8001ad4:	3305      	adds	r3, #5
 8001ad6:	7818      	ldrb	r0, [r3, #0]
 8001ad8:	494e      	ldr	r1, [pc, #312]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	440b      	add	r3, r1
 8001ae4:	3305      	adds	r3, #5
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	701a      	strb	r2, [r3, #0]
					channels.parameters[i].swv.t_equilibration = channels.parameters[channel].swv.t_equilibration;
 8001aea:	79f9      	ldrb	r1, [r7, #7]
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	4849      	ldr	r0, [pc, #292]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001af0:	460b      	mov	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	4403      	add	r3, r0
 8001afa:	333c      	adds	r3, #60	@ 0x3c
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	4845      	ldr	r0, [pc, #276]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	4403      	add	r3, r0
 8001b0a:	333c      	adds	r3, #60	@ 0x3c
 8001b0c:	6019      	str	r1, [r3, #0]
					channels.parameters[i].swv.E_begin = channels.parameters[channel].swv.E_begin;
 8001b0e:	79f9      	ldrb	r1, [r7, #7]
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	4840      	ldr	r0, [pc, #256]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b14:	460b      	mov	r3, r1
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4403      	add	r3, r0
 8001b1e:	3340      	adds	r3, #64	@ 0x40
 8001b20:	6819      	ldr	r1, [r3, #0]
 8001b22:	483c      	ldr	r0, [pc, #240]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4403      	add	r3, r0
 8001b2e:	3340      	adds	r3, #64	@ 0x40
 8001b30:	6019      	str	r1, [r3, #0]
					channels.parameters[i].swv.E_end = channels.parameters[channel].swv.E_end;
 8001b32:	79f9      	ldrb	r1, [r7, #7]
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	4837      	ldr	r0, [pc, #220]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b38:	460b      	mov	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4403      	add	r3, r0
 8001b42:	3344      	adds	r3, #68	@ 0x44
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	4833      	ldr	r0, [pc, #204]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4403      	add	r3, r0
 8001b52:	3344      	adds	r3, #68	@ 0x44
 8001b54:	6019      	str	r1, [r3, #0]
					channels.parameters[i].swv.Frequency = channels.parameters[channel].swv.Frequency;
 8001b56:	79f9      	ldrb	r1, [r7, #7]
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	482e      	ldr	r0, [pc, #184]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4403      	add	r3, r0
 8001b66:	3350      	adds	r3, #80	@ 0x50
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	482a      	ldr	r0, [pc, #168]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4403      	add	r3, r0
 8001b76:	3350      	adds	r3, #80	@ 0x50
 8001b78:	6019      	str	r1, [r3, #0]
					channels.parameters[i].swv.Amplitude = channels.parameters[channel].swv.Amplitude;
 8001b7a:	79f9      	ldrb	r1, [r7, #7]
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	4825      	ldr	r0, [pc, #148]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b80:	460b      	mov	r3, r1
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4403      	add	r3, r0
 8001b8a:	334c      	adds	r3, #76	@ 0x4c
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	4821      	ldr	r0, [pc, #132]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4403      	add	r3, r0
 8001b9a:	334c      	adds	r3, #76	@ 0x4c
 8001b9c:	6019      	str	r1, [r3, #0]
					channels.parameters[i].swv.E_step = channels.parameters[channel].swv.E_step;
 8001b9e:	79f9      	ldrb	r1, [r7, #7]
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	481c      	ldr	r0, [pc, #112]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4403      	add	r3, r0
 8001bae:	3348      	adds	r3, #72	@ 0x48
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	4818      	ldr	r0, [pc, #96]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4403      	add	r3, r0
 8001bbe:	3348      	adds	r3, #72	@ 0x48
 8001bc0:	6019      	str	r1, [r3, #0]
					break;
 8001bc2:	e00a      	b.n	8001bda <voltammerty_write_SIM_parameter+0x376>
				default:
					channels.parameters[i].technique = 0;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	4913      	ldr	r1, [pc, #76]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3305      	adds	r3, #5
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
					break;
 8001bd8:	bf00      	nop
			switch(channels.parameters[channel].technique){
 8001bda:	e00d      	b.n	8001bf8 <voltammerty_write_SIM_parameter+0x394>
			}
		}
		else if(i != channel){
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d009      	beq.n	8001bf8 <voltammerty_write_SIM_parameter+0x394>
			channels.parameters[i].technique = 0;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	490b      	ldr	r1, [pc, #44]	@ (8001c14 <voltammerty_write_SIM_parameter+0x3b0>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3305      	adds	r3, #5
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<4;i++){
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	f67f ae37 	bls.w	8001874 <voltammerty_write_SIM_parameter+0x10>
		}
	}

	return;
 8001c06:	bf00      	nop
}
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	2000036c 	.word	0x2000036c

08001c18 <voltammerty_write_parameter>:

void voltammerty_write_parameter(uint8_t channel){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]

	// parameters
	change_voltammetry_technique(&(channels.parameters[channel].technique),(uint8_t*)" technique (0 = off, 1 = CV, 2 = DPV, 3= SWV): ",47);
 8001c22:	79fa      	ldrb	r2, [r7, #7]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4ab6      	ldr	r2, [pc, #728]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001c2e:	4413      	add	r3, r2
 8001c30:	3305      	adds	r3, #5
 8001c32:	222f      	movs	r2, #47	@ 0x2f
 8001c34:	49b5      	ldr	r1, [pc, #724]	@ (8001f0c <voltammerty_write_parameter+0x2f4>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fda2 	bl	8001780 <change_voltammetry_technique>
	switch(channels.parameters[channel].technique){
 8001c3c:	79fa      	ldrb	r2, [r7, #7]
 8001c3e:	49b2      	ldr	r1, [pc, #712]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	440b      	add	r3, r1
 8001c4a:	3305      	adds	r3, #5
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	f000 80d8 	beq.w	8001e04 <voltammerty_write_parameter+0x1ec>
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	f300 8137 	bgt.w	8001ec8 <voltammerty_write_parameter+0x2b0>
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d002      	beq.n	8001c64 <voltammerty_write_parameter+0x4c>
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d060      	beq.n	8001d24 <voltammerty_write_parameter+0x10c>
 8001c62:	e131      	b.n	8001ec8 <voltammerty_write_parameter+0x2b0>
		case 1:
			while(UART_tx_flag != 0);
 8001c64:	bf00      	nop
 8001c66:	4baa      	ldr	r3, [pc, #680]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1fb      	bne.n	8001c66 <voltammerty_write_parameter+0x4e>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" - cyclic voltammetry\n", 22);
 8001c6e:	2216      	movs	r2, #22
 8001c70:	49a8      	ldr	r1, [pc, #672]	@ (8001f14 <voltammerty_write_parameter+0x2fc>)
 8001c72:	48a9      	ldr	r0, [pc, #676]	@ (8001f18 <voltammerty_write_parameter+0x300>)
 8001c74:	f008 fad0 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8001c78:	4ba5      	ldr	r3, [pc, #660]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
			change_voltammetry_parameter(&channels.parameters[channel].cv.t_equilibration, (uint8_t*)" t equilibration (s): ",22);
 8001c7e:	79fa      	ldrb	r2, [r7, #7]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4a9f      	ldr	r2, [pc, #636]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	2216      	movs	r2, #22
 8001c90:	49a2      	ldr	r1, [pc, #648]	@ (8001f1c <voltammerty_write_parameter+0x304>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fcfc 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].cv.E_begin, (uint8_t*)" E begin (V): ",14);
 8001c98:	79fa      	ldrb	r2, [r7, #7]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4a99      	ldr	r2, [pc, #612]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001ca4:	4413      	add	r3, r2
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	220e      	movs	r2, #14
 8001caa:	499d      	ldr	r1, [pc, #628]	@ (8001f20 <voltammerty_write_parameter+0x308>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fcef 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].cv.E_step, (uint8_t*)" E step (V): ",13);
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	3310      	adds	r3, #16
 8001cbe:	4a92      	ldr	r2, [pc, #584]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	220d      	movs	r2, #13
 8001cc6:	4997      	ldr	r1, [pc, #604]	@ (8001f24 <voltammerty_write_parameter+0x30c>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fce1 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].cv.E_vertex_1, (uint8_t*)" E Vertex 1 (V): ",17);
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	3308      	adds	r3, #8
 8001cda:	4a8b      	ldr	r2, [pc, #556]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001cdc:	4413      	add	r3, r2
 8001cde:	3308      	adds	r3, #8
 8001ce0:	2211      	movs	r2, #17
 8001ce2:	4991      	ldr	r1, [pc, #580]	@ (8001f28 <voltammerty_write_parameter+0x310>)
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fcd3 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].cv.E_vertex_2, (uint8_t*)" E Vertex 2 (V): ",17);
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	4a84      	ldr	r2, [pc, #528]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	2211      	movs	r2, #17
 8001cfe:	498b      	ldr	r1, [pc, #556]	@ (8001f2c <voltammerty_write_parameter+0x314>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fcc5 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].cv.scan_rate, (uint8_t*)" Scan rate (V/s): ",18);
 8001d06:	79fa      	ldrb	r2, [r7, #7]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	3310      	adds	r3, #16
 8001d12:	4a7d      	ldr	r2, [pc, #500]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001d14:	4413      	add	r3, r2
 8001d16:	330c      	adds	r3, #12
 8001d18:	2212      	movs	r2, #18
 8001d1a:	4985      	ldr	r1, [pc, #532]	@ (8001f30 <voltammerty_write_parameter+0x318>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fcb7 	bl	8001690 <change_voltammetry_parameter>
			break;
 8001d22:	e0df      	b.n	8001ee4 <voltammerty_write_parameter+0x2cc>
		case 2:
			while(UART_tx_flag != 0);
 8001d24:	bf00      	nop
 8001d26:	4b7a      	ldr	r3, [pc, #488]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1fb      	bne.n	8001d26 <voltammerty_write_parameter+0x10e>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" - differential voltammetry\n", 28);
 8001d2e:	221c      	movs	r2, #28
 8001d30:	4980      	ldr	r1, [pc, #512]	@ (8001f34 <voltammerty_write_parameter+0x31c>)
 8001d32:	4879      	ldr	r0, [pc, #484]	@ (8001f18 <voltammerty_write_parameter+0x300>)
 8001d34:	f008 fa70 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8001d38:	4b75      	ldr	r3, [pc, #468]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
			change_voltammetry_parameter(&channels.parameters[channel].dpv.t_equilibration, (uint8_t*)" t equilibration (s): ",22);
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	3318      	adds	r3, #24
 8001d4a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3308      	adds	r3, #8
 8001d50:	2216      	movs	r2, #22
 8001d52:	4972      	ldr	r1, [pc, #456]	@ (8001f1c <voltammerty_write_parameter+0x304>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fc9b 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].dpv.E_begin, (uint8_t*)" E begin (V): ",14);
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	3318      	adds	r3, #24
 8001d66:	4a68      	ldr	r2, [pc, #416]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	330c      	adds	r3, #12
 8001d6c:	220e      	movs	r2, #14
 8001d6e:	496c      	ldr	r1, [pc, #432]	@ (8001f20 <voltammerty_write_parameter+0x308>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fc8d 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].dpv.E_end, (uint8_t*)" E end (V): ",12);
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	3320      	adds	r3, #32
 8001d82:	4a61      	ldr	r2, [pc, #388]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001d84:	4413      	add	r3, r2
 8001d86:	3308      	adds	r3, #8
 8001d88:	220c      	movs	r2, #12
 8001d8a:	496b      	ldr	r1, [pc, #428]	@ (8001f38 <voltammerty_write_parameter+0x320>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fc7f 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].dpv.E_step, (uint8_t*)" E step (V): ",13);
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	3320      	adds	r3, #32
 8001d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001da0:	4413      	add	r3, r2
 8001da2:	330c      	adds	r3, #12
 8001da4:	220d      	movs	r2, #13
 8001da6:	495f      	ldr	r1, [pc, #380]	@ (8001f24 <voltammerty_write_parameter+0x30c>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fc71 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].dpv.E_pulse, (uint8_t*)" E pulse (V): ",14);
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	3328      	adds	r3, #40	@ 0x28
 8001dba:	4a53      	ldr	r2, [pc, #332]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3308      	adds	r3, #8
 8001dc0:	220e      	movs	r2, #14
 8001dc2:	495e      	ldr	r1, [pc, #376]	@ (8001f3c <voltammerty_write_parameter+0x324>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fc63 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].dpv.t_pulse, (uint8_t*)" t pulse (s): ",14);
 8001dca:	79fa      	ldrb	r2, [r7, #7]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	3328      	adds	r3, #40	@ 0x28
 8001dd6:	4a4c      	ldr	r2, [pc, #304]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001dd8:	4413      	add	r3, r2
 8001dda:	330c      	adds	r3, #12
 8001ddc:	220e      	movs	r2, #14
 8001dde:	4958      	ldr	r1, [pc, #352]	@ (8001f40 <voltammerty_write_parameter+0x328>)
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fc55 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].dpv.Scan_rate, (uint8_t*)" Scan rate (V/s): ",18);
 8001de6:	79fa      	ldrb	r2, [r7, #7]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	3330      	adds	r3, #48	@ 0x30
 8001df2:	4a45      	ldr	r2, [pc, #276]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001df4:	4413      	add	r3, r2
 8001df6:	3308      	adds	r3, #8
 8001df8:	2212      	movs	r2, #18
 8001dfa:	494d      	ldr	r1, [pc, #308]	@ (8001f30 <voltammerty_write_parameter+0x318>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fc47 	bl	8001690 <change_voltammetry_parameter>
			break;
 8001e02:	e06f      	b.n	8001ee4 <voltammerty_write_parameter+0x2cc>
		case 3:
			while(UART_tx_flag != 0);
 8001e04:	bf00      	nop
 8001e06:	4b42      	ldr	r3, [pc, #264]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1fb      	bne.n	8001e06 <voltammerty_write_parameter+0x1ee>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" - square wave voltammetry\n", 27);
 8001e0e:	221b      	movs	r2, #27
 8001e10:	494c      	ldr	r1, [pc, #304]	@ (8001f44 <voltammerty_write_parameter+0x32c>)
 8001e12:	4841      	ldr	r0, [pc, #260]	@ (8001f18 <voltammerty_write_parameter+0x300>)
 8001e14:	f008 fa00 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8001e18:	4b3d      	ldr	r3, [pc, #244]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
			change_voltammetry_parameter(&channels.parameters[channel].swv.t_equilibration, (uint8_t*)" t equilibration (s): ",22);
 8001e1e:	79fa      	ldrb	r2, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	3338      	adds	r3, #56	@ 0x38
 8001e2a:	4a37      	ldr	r2, [pc, #220]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3304      	adds	r3, #4
 8001e30:	2216      	movs	r2, #22
 8001e32:	493a      	ldr	r1, [pc, #232]	@ (8001f1c <voltammerty_write_parameter+0x304>)
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fc2b 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].swv.E_begin, (uint8_t*)" E begin (V): ",14);
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	3338      	adds	r3, #56	@ 0x38
 8001e46:	4a30      	ldr	r2, [pc, #192]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	220e      	movs	r2, #14
 8001e4e:	4934      	ldr	r1, [pc, #208]	@ (8001f20 <voltammerty_write_parameter+0x308>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fc1d 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].swv.E_end, (uint8_t*)" E end (V): ",12);
 8001e56:	79fa      	ldrb	r2, [r7, #7]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	3340      	adds	r3, #64	@ 0x40
 8001e62:	4a29      	ldr	r2, [pc, #164]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	220c      	movs	r2, #12
 8001e6a:	4933      	ldr	r1, [pc, #204]	@ (8001f38 <voltammerty_write_parameter+0x320>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fc0f 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].swv.E_step, (uint8_t*)" E step (V): ",13);
 8001e72:	79fa      	ldrb	r2, [r7, #7]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	3340      	adds	r3, #64	@ 0x40
 8001e7e:	4a22      	ldr	r2, [pc, #136]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001e80:	4413      	add	r3, r2
 8001e82:	3308      	adds	r3, #8
 8001e84:	220d      	movs	r2, #13
 8001e86:	4927      	ldr	r1, [pc, #156]	@ (8001f24 <voltammerty_write_parameter+0x30c>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fc01 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].swv.Amplitude, (uint8_t*)" Amplitude (V): ",16);
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	3348      	adds	r3, #72	@ 0x48
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	4929      	ldr	r1, [pc, #164]	@ (8001f48 <voltammerty_write_parameter+0x330>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fbf3 	bl	8001690 <change_voltammetry_parameter>
			change_voltammetry_parameter(&channels.parameters[channel].swv.Frequency, (uint8_t*)" Frequency (Hz): ",17);
 8001eaa:	79fa      	ldrb	r2, [r7, #7]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	3348      	adds	r3, #72	@ 0x48
 8001eb6:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <voltammerty_write_parameter+0x2f0>)
 8001eb8:	4413      	add	r3, r2
 8001eba:	3308      	adds	r3, #8
 8001ebc:	2211      	movs	r2, #17
 8001ebe:	4923      	ldr	r1, [pc, #140]	@ (8001f4c <voltammerty_write_parameter+0x334>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fbe5 	bl	8001690 <change_voltammetry_parameter>
			break;
 8001ec6:	e00d      	b.n	8001ee4 <voltammerty_write_parameter+0x2cc>
		default:
			while(UART_tx_flag != 0);
 8001ec8:	bf00      	nop
 8001eca:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1fb      	bne.n	8001eca <voltammerty_write_parameter+0x2b2>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" - off\n", 7);
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	491e      	ldr	r1, [pc, #120]	@ (8001f50 <voltammerty_write_parameter+0x338>)
 8001ed6:	4810      	ldr	r0, [pc, #64]	@ (8001f18 <voltammerty_write_parameter+0x300>)
 8001ed8:	f008 f99e 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
			break;
 8001ee2:	bf00      	nop
	}
	// end
	while(UART_tx_flag != 0);
 8001ee4:	bf00      	nop
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1fb      	bne.n	8001ee6 <voltammerty_write_parameter+0x2ce>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n", 1);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4918      	ldr	r1, [pc, #96]	@ (8001f54 <voltammerty_write_parameter+0x33c>)
 8001ef2:	4809      	ldr	r0, [pc, #36]	@ (8001f18 <voltammerty_write_parameter+0x300>)
 8001ef4:	f008 f990 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <voltammerty_write_parameter+0x2f8>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
	return;
 8001efe:	bf00      	nop
}
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000036c 	.word	0x2000036c
 8001f0c:	0800fa74 	.word	0x0800fa74
 8001f10:	200002fc 	.word	0x200002fc
 8001f14:	0800faa4 	.word	0x0800faa4
 8001f18:	20000198 	.word	0x20000198
 8001f1c:	0800fabc 	.word	0x0800fabc
 8001f20:	0800fad4 	.word	0x0800fad4
 8001f24:	0800fae4 	.word	0x0800fae4
 8001f28:	0800faf4 	.word	0x0800faf4
 8001f2c:	0800fb08 	.word	0x0800fb08
 8001f30:	0800fb1c 	.word	0x0800fb1c
 8001f34:	0800fb30 	.word	0x0800fb30
 8001f38:	0800fb50 	.word	0x0800fb50
 8001f3c:	0800fb60 	.word	0x0800fb60
 8001f40:	0800fb70 	.word	0x0800fb70
 8001f44:	0800fb80 	.word	0x0800fb80
 8001f48:	0800fb9c 	.word	0x0800fb9c
 8001f4c:	0800fbb0 	.word	0x0800fbb0
 8001f50:	0800fbc4 	.word	0x0800fbc4
 8001f54:	0800fbcc 	.word	0x0800fbcc

08001f58 <voltammerty_simultaneously>:

void voltammerty_simultaneously(void){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	uint8_t channel = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];
	while(UART_tx_flag != 0);
 8001f62:	bf00      	nop
 8001f64:	4b39      	ldr	r3, [pc, #228]	@ (800204c <voltammerty_simultaneously+0xf4>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1fb      	bne.n	8001f64 <voltammerty_simultaneously+0xc>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Choose channels (0 = off & 1 = on): \n", 37);
 8001f6c:	2225      	movs	r2, #37	@ 0x25
 8001f6e:	4938      	ldr	r1, [pc, #224]	@ (8002050 <voltammerty_simultaneously+0xf8>)
 8001f70:	4838      	ldr	r0, [pc, #224]	@ (8002054 <voltammerty_simultaneously+0xfc>)
 8001f72:	f008 f951 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8001f76:	4b35      	ldr	r3, [pc, #212]	@ (800204c <voltammerty_simultaneously+0xf4>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
	// channel
	while(channel != 4){
 8001f7c:	e03b      	b.n	8001ff6 <voltammerty_simultaneously+0x9e>
		while(UART_tx_flag != 0);
 8001f7e:	bf00      	nop
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <voltammerty_simultaneously+0xf4>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1fb      	bne.n	8001f80 <voltammerty_simultaneously+0x28>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel ", 8);
 8001f88:	2208      	movs	r2, #8
 8001f8a:	4933      	ldr	r1, [pc, #204]	@ (8002058 <voltammerty_simultaneously+0x100>)
 8001f8c:	4831      	ldr	r0, [pc, #196]	@ (8002054 <voltammerty_simultaneously+0xfc>)
 8001f8e:	f008 f943 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <voltammerty_simultaneously+0xf4>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
		buf[0] = channel + 49;
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3331      	adds	r3, #49	@ 0x31
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	713b      	strb	r3, [r7, #4]
		while(UART_tx_flag != 0);
 8001fa0:	bf00      	nop
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <voltammerty_simultaneously+0xf4>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1fb      	bne.n	8001fa2 <voltammerty_simultaneously+0x4a>
		HAL_UART_Transmit_DMA(&huart2, buf , 1);
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2201      	movs	r2, #1
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4828      	ldr	r0, [pc, #160]	@ (8002054 <voltammerty_simultaneously+0xfc>)
 8001fb2:	f008 f931 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8001fb6:	4b25      	ldr	r3, [pc, #148]	@ (800204c <voltammerty_simultaneously+0xf4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
		change_voltammetry_technique(&(channels.parameters[channel].ch_brdcst_on), (uint8_t*)": ",2);
 8001fbc:	79fa      	ldrb	r2, [r7, #7]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4a25      	ldr	r2, [pc, #148]	@ (800205c <voltammerty_simultaneously+0x104>)
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4924      	ldr	r1, [pc, #144]	@ (8002060 <voltammerty_simultaneously+0x108>)
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fbd5 	bl	8001780 <change_voltammetry_technique>
		while(UART_tx_flag != 0);
 8001fd6:	bf00      	nop
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <voltammerty_simultaneously+0xf4>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1fb      	bne.n	8001fd8 <voltammerty_simultaneously+0x80>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n", 1);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4920      	ldr	r1, [pc, #128]	@ (8002064 <voltammerty_simultaneously+0x10c>)
 8001fe4:	481b      	ldr	r0, [pc, #108]	@ (8002054 <voltammerty_simultaneously+0xfc>)
 8001fe6:	f008 f917 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8001fea:	4b18      	ldr	r3, [pc, #96]	@ (800204c <voltammerty_simultaneously+0xf4>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]

		channel += 1;
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	71fb      	strb	r3, [r7, #7]
	while(channel != 4){
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d1c0      	bne.n	8001f7e <voltammerty_simultaneously+0x26>
	}
	uint8_t do_once = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0;i<4;i++){
 8002000:	2300      	movs	r3, #0
 8002002:	717b      	strb	r3, [r7, #5]
 8002004:	e01a      	b.n	800203c <voltammerty_simultaneously+0xe4>
		if(channels.parameters[i].ch_brdcst_on == 1 && do_once == 0){
 8002006:	797a      	ldrb	r2, [r7, #5]
 8002008:	4914      	ldr	r1, [pc, #80]	@ (800205c <voltammerty_simultaneously+0x104>)
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	440b      	add	r3, r1
 8002014:	3304      	adds	r3, #4
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d10c      	bne.n	8002036 <voltammerty_simultaneously+0xde>
 800201c:	79bb      	ldrb	r3, [r7, #6]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <voltammerty_simultaneously+0xde>
			voltammerty_write_parameter(i);
 8002022:	797b      	ldrb	r3, [r7, #5]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fdf7 	bl	8001c18 <voltammerty_write_parameter>
			voltammerty_write_SIM_parameter(i);
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fc19 	bl	8001864 <voltammerty_write_SIM_parameter>
			do_once = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0;i<4;i++){
 8002036:	797b      	ldrb	r3, [r7, #5]
 8002038:	3301      	adds	r3, #1
 800203a:	717b      	strb	r3, [r7, #5]
 800203c:	797b      	ldrb	r3, [r7, #5]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d9e1      	bls.n	8002006 <voltammerty_simultaneously+0xae>
		}
	}

	return;
 8002042:	bf00      	nop
}
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002fc 	.word	0x200002fc
 8002050:	0800fbd0 	.word	0x0800fbd0
 8002054:	20000198 	.word	0x20000198
 8002058:	0800fbf8 	.word	0x0800fbf8
 800205c:	2000036c 	.word	0x2000036c
 8002060:	0800fc04 	.word	0x0800fc04
 8002064:	0800fbcc 	.word	0x0800fbcc

08002068 <voltammerty_individually>:

void voltammerty_individually(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
	uint8_t channel = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];
	while(channel != 4){
 8002072:	e032      	b.n	80020da <voltammerty_individually+0x72>
		// show channel
		while(UART_tx_flag != 0);
 8002074:	bf00      	nop
 8002076:	4b1c      	ldr	r3, [pc, #112]	@ (80020e8 <voltammerty_individually+0x80>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1fb      	bne.n	8002076 <voltammerty_individually+0xe>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel ", 8);
 800207e:	2208      	movs	r2, #8
 8002080:	491a      	ldr	r1, [pc, #104]	@ (80020ec <voltammerty_individually+0x84>)
 8002082:	481b      	ldr	r0, [pc, #108]	@ (80020f0 <voltammerty_individually+0x88>)
 8002084:	f008 f8c8 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8002088:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <voltammerty_individually+0x80>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
		while(UART_tx_flag != 0);
 800208e:	bf00      	nop
 8002090:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <voltammerty_individually+0x80>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1fb      	bne.n	8002090 <voltammerty_individually+0x28>
		buf[0] = channel + 49;
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	3331      	adds	r3, #49	@ 0x31
 800209c:	b2db      	uxtb	r3, r3
 800209e:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, buf, 1);
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2201      	movs	r2, #1
 80020a4:	4619      	mov	r1, r3
 80020a6:	4812      	ldr	r0, [pc, #72]	@ (80020f0 <voltammerty_individually+0x88>)
 80020a8:	f008 f8b6 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <voltammerty_individually+0x80>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
		while(UART_tx_flag != 0);
 80020b2:	bf00      	nop
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <voltammerty_individually+0x80>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1fb      	bne.n	80020b4 <voltammerty_individually+0x4c>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)": \n", 3);
 80020bc:	2203      	movs	r2, #3
 80020be:	490d      	ldr	r1, [pc, #52]	@ (80020f4 <voltammerty_individually+0x8c>)
 80020c0:	480b      	ldr	r0, [pc, #44]	@ (80020f0 <voltammerty_individually+0x88>)
 80020c2:	f008 f8a9 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 80020c6:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <voltammerty_individually+0x80>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]

		voltammerty_write_parameter(channel);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fda2 	bl	8001c18 <voltammerty_write_parameter>

		channel += 1;
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	3301      	adds	r3, #1
 80020d8:	71fb      	strb	r3, [r7, #7]
	while(channel != 4){
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d1c9      	bne.n	8002074 <voltammerty_individually+0xc>
	}

	return;
 80020e0:	bf00      	nop
}
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200002fc 	.word	0x200002fc
 80020ec:	0800fbf8 	.word	0x0800fbf8
 80020f0:	20000198 	.word	0x20000198
 80020f4:	0800fc08 	.word	0x0800fc08

080020f8 <start>:

void start(uint8_t * dev, uint8_t message[], uint8_t mssg_end){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	4613      	mov	r3, r2
 8002104:	71fb      	strb	r3, [r7, #7]
	// write to the console
	while(UART_tx_flag != 0);
 8002106:	bf00      	nop
 8002108:	4b3c      	ldr	r3, [pc, #240]	@ (80021fc <start+0x104>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1fb      	bne.n	8002108 <start+0x10>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Start ", 6);
 8002110:	2206      	movs	r2, #6
 8002112:	493b      	ldr	r1, [pc, #236]	@ (8002200 <start+0x108>)
 8002114:	483b      	ldr	r0, [pc, #236]	@ (8002204 <start+0x10c>)
 8002116:	f008 f87f 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 800211a:	4b38      	ldr	r3, [pc, #224]	@ (80021fc <start+0x104>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
	while(UART_tx_flag != 0);
 8002120:	bf00      	nop
 8002122:	4b36      	ldr	r3, [pc, #216]	@ (80021fc <start+0x104>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1fb      	bne.n	8002122 <start+0x2a>
	HAL_UART_Transmit_DMA(&huart2, message, mssg_end);
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	b29b      	uxth	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	4834      	ldr	r0, [pc, #208]	@ (8002204 <start+0x10c>)
 8002134:	f008 f870 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8002138:	4b30      	ldr	r3, [pc, #192]	@ (80021fc <start+0x104>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
	while(UART_tx_flag != 0);
 800213e:	bf00      	nop
 8002140:	4b2e      	ldr	r3, [pc, #184]	@ (80021fc <start+0x104>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1fb      	bne.n	8002140 <start+0x48>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"? [y/n]\n\n", 9);
 8002148:	2209      	movs	r2, #9
 800214a:	492f      	ldr	r1, [pc, #188]	@ (8002208 <start+0x110>)
 800214c:	482d      	ldr	r0, [pc, #180]	@ (8002204 <start+0x10c>)
 800214e:	f008 f863 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8002152:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <start+0x104>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
	// wait for answer
	while(UART_rx_flag != 1);
 8002158:	bf00      	nop
 800215a:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <start+0x114>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d1fb      	bne.n	800215a <start+0x62>
	if(UART_rx_buff[0] == 121){
 8002162:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <start+0x118>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b79      	cmp	r3, #121	@ 0x79
 8002168:	d11f      	bne.n	80021aa <start+0xb2>
		while(UART_tx_flag != 0);
 800216a:	bf00      	nop
 800216c:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <start+0x104>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1fb      	bne.n	800216c <start+0x74>
		HAL_UART_Transmit_DMA(&huart2, message, mssg_end);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	b29b      	uxth	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	4821      	ldr	r0, [pc, #132]	@ (8002204 <start+0x10c>)
 800217e:	f008 f84b 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <start+0x104>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
		while(UART_tx_flag != 0);
 8002188:	bf00      	nop
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <start+0x104>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1fb      	bne.n	800218a <start+0x92>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" started\n\n", 10);
 8002192:	220a      	movs	r2, #10
 8002194:	491f      	ldr	r1, [pc, #124]	@ (8002214 <start+0x11c>)
 8002196:	481b      	ldr	r0, [pc, #108]	@ (8002204 <start+0x10c>)
 8002198:	f008 f83e 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <start+0x104>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
		*dev = ON;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e01e      	b.n	80021e8 <start+0xf0>
	}
	else{
		while(UART_tx_flag != 0);
 80021aa:	bf00      	nop
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <start+0x104>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1fb      	bne.n	80021ac <start+0xb4>
		HAL_UART_Transmit_DMA(&huart2, message, mssg_end);
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	4811      	ldr	r0, [pc, #68]	@ (8002204 <start+0x10c>)
 80021be:	f008 f82b 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <start+0x104>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
		while(UART_tx_flag != 0);
 80021c8:	bf00      	nop
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <start+0x104>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1fb      	bne.n	80021ca <start+0xd2>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" cancelled\n\n", 12);
 80021d2:	220c      	movs	r2, #12
 80021d4:	4910      	ldr	r1, [pc, #64]	@ (8002218 <start+0x120>)
 80021d6:	480b      	ldr	r0, [pc, #44]	@ (8002204 <start+0x10c>)
 80021d8:	f008 f81e 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 80021dc:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <start+0x104>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
		*dev = OFF;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
	}
	clear_UART_rx_buff();
 80021e8:	f001 ff5e 	bl	80040a8 <clear_UART_rx_buff>
	UART_rx_flag = 0;
 80021ec:	4b07      	ldr	r3, [pc, #28]	@ (800220c <start+0x114>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
	return;
 80021f2:	bf00      	nop
}
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200002fc 	.word	0x200002fc
 8002200:	0800fc0c 	.word	0x0800fc0c
 8002204:	20000198 	.word	0x20000198
 8002208:	0800fc14 	.word	0x0800fc14
 800220c:	200002fd 	.word	0x200002fd
 8002210:	20000304 	.word	0x20000304
 8002214:	0800fc20 	.word	0x0800fc20
 8002218:	0800fc2c 	.word	0x0800fc2c

0800221c <change_voltammetry>:

void change_voltammetry(void){
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	// write to the console
	while(UART_tx_flag != 0);
 8002220:	bf00      	nop
 8002222:	4b33      	ldr	r3, [pc, #204]	@ (80022f0 <change_voltammetry+0xd4>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1fb      	bne.n	8002222 <change_voltammetry+0x6>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Change parameters? [y/n].\n", 26);
 800222a:	221a      	movs	r2, #26
 800222c:	4931      	ldr	r1, [pc, #196]	@ (80022f4 <change_voltammetry+0xd8>)
 800222e:	4832      	ldr	r0, [pc, #200]	@ (80022f8 <change_voltammetry+0xdc>)
 8002230:	f007 fff2 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8002234:	4b2e      	ldr	r3, [pc, #184]	@ (80022f0 <change_voltammetry+0xd4>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]

		while(UART_rx_flag != 1);
 800223a:	bf00      	nop
 800223c:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <change_voltammetry+0xe0>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d1fb      	bne.n	800223c <change_voltammetry+0x20>
		if(UART_rx_buff[0] == 121){
 8002244:	4b2e      	ldr	r3, [pc, #184]	@ (8002300 <change_voltammetry+0xe4>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b79      	cmp	r3, #121	@ 0x79
 800224a:	d149      	bne.n	80022e0 <change_voltammetry+0xc4>
			clear_UART_rx_buff();
 800224c:	f001 ff2c 	bl	80040a8 <clear_UART_rx_buff>
			UART_rx_flag = 0;
 8002250:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <change_voltammetry+0xe0>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
			// control simultaneously
			while(UART_tx_flag != 0);
 8002256:	bf00      	nop
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <change_voltammetry+0xd4>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1fb      	bne.n	8002258 <change_voltammetry+0x3c>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Control all channels simultaneously? [y/n]\n\n", 44);
 8002260:	222c      	movs	r2, #44	@ 0x2c
 8002262:	4928      	ldr	r1, [pc, #160]	@ (8002304 <change_voltammetry+0xe8>)
 8002264:	4824      	ldr	r0, [pc, #144]	@ (80022f8 <change_voltammetry+0xdc>)
 8002266:	f007 ffd7 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 800226a:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <change_voltammetry+0xd4>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
			while(UART_rx_flag != 1);
 8002270:	bf00      	nop
 8002272:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <change_voltammetry+0xe0>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d1fb      	bne.n	8002272 <change_voltammetry+0x56>
			if(UART_rx_buff[0] == 121){
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <change_voltammetry+0xe4>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b79      	cmp	r3, #121	@ 0x79
 8002280:	d117      	bne.n	80022b2 <change_voltammetry+0x96>
				clear_UART_rx_buff();
 8002282:	f001 ff11 	bl	80040a8 <clear_UART_rx_buff>
				UART_rx_flag = 0;
 8002286:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <change_voltammetry+0xe0>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
				channels.broadcast = 1;
 800228c:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <change_voltammetry+0xec>)
 800228e:	2201      	movs	r2, #1
 8002290:	705a      	strb	r2, [r3, #1]
				while(UART_tx_flag != 0);
 8002292:	bf00      	nop
 8002294:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <change_voltammetry+0xd4>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1fb      	bne.n	8002294 <change_voltammetry+0x78>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Control all channels simultaneously!\n", 37);
 800229c:	2225      	movs	r2, #37	@ 0x25
 800229e:	491b      	ldr	r1, [pc, #108]	@ (800230c <change_voltammetry+0xf0>)
 80022a0:	4815      	ldr	r0, [pc, #84]	@ (80022f8 <change_voltammetry+0xdc>)
 80022a2:	f007 ffb9 	bl	800a218 <HAL_UART_Transmit_DMA>
				UART_tx_flag = 1;
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <change_voltammetry+0xd4>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
				voltammerty_simultaneously();
 80022ac:	f7ff fe54 	bl	8001f58 <voltammerty_simultaneously>
 80022b0:	e016      	b.n	80022e0 <change_voltammetry+0xc4>
			}
			else{
				clear_UART_rx_buff();
 80022b2:	f001 fef9 	bl	80040a8 <clear_UART_rx_buff>
				UART_rx_flag = 0;
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <change_voltammetry+0xe0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
				channels.broadcast = 0;
 80022bc:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <change_voltammetry+0xec>)
 80022be:	2200      	movs	r2, #0
 80022c0:	705a      	strb	r2, [r3, #1]
				while(UART_tx_flag != 0);
 80022c2:	bf00      	nop
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <change_voltammetry+0xd4>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1fb      	bne.n	80022c4 <change_voltammetry+0xa8>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Control all channels individually!\n", 35);
 80022cc:	2223      	movs	r2, #35	@ 0x23
 80022ce:	4910      	ldr	r1, [pc, #64]	@ (8002310 <change_voltammetry+0xf4>)
 80022d0:	4809      	ldr	r0, [pc, #36]	@ (80022f8 <change_voltammetry+0xdc>)
 80022d2:	f007 ffa1 	bl	800a218 <HAL_UART_Transmit_DMA>
				UART_tx_flag = 1;
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <change_voltammetry+0xd4>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
				voltammerty_individually();
 80022dc:	f7ff fec4 	bl	8002068 <voltammerty_individually>
			}
		}
		clear_UART_rx_buff();
 80022e0:	f001 fee2 	bl	80040a8 <clear_UART_rx_buff>
		UART_rx_flag = 0;
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <change_voltammetry+0xe0>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]

	return;
 80022ea:	bf00      	nop
}
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200002fc 	.word	0x200002fc
 80022f4:	0800fc3c 	.word	0x0800fc3c
 80022f8:	20000198 	.word	0x20000198
 80022fc:	200002fd 	.word	0x200002fd
 8002300:	20000304 	.word	0x20000304
 8002304:	0800fc58 	.word	0x0800fc58
 8002308:	2000036c 	.word	0x2000036c
 800230c:	0800fc88 	.word	0x0800fc88
 8002310:	0800fcb0 	.word	0x0800fcb0

08002314 <show_voltammetry>:

void show_voltammetry(void){
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
	// write to the console
	while(UART_tx_flag != 0);
 800231a:	bf00      	nop
 800231c:	4b76      	ldr	r3, [pc, #472]	@ (80024f8 <show_voltammetry+0x1e4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1fb      	bne.n	800231c <show_voltammetry+0x8>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Voltammetry! The following parameters are:\n\n", 44);
 8002324:	222c      	movs	r2, #44	@ 0x2c
 8002326:	4975      	ldr	r1, [pc, #468]	@ (80024fc <show_voltammetry+0x1e8>)
 8002328:	4875      	ldr	r0, [pc, #468]	@ (8002500 <show_voltammetry+0x1ec>)
 800232a:	f007 ff75 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 800232e:	4b72      	ldr	r3, [pc, #456]	@ (80024f8 <show_voltammetry+0x1e4>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	71fb      	strb	r3, [r7, #7]
	uint8_t arr[1];

	while(i != 4){
 8002338:	e242      	b.n	80027c0 <show_voltammetry+0x4ac>
		// show parameter
		switch(channels.parameters[i].technique){
 800233a:	79fa      	ldrb	r2, [r7, #7]
 800233c:	4971      	ldr	r1, [pc, #452]	@ (8002504 <show_voltammetry+0x1f0>)
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	440b      	add	r3, r1
 8002348:	3305      	adds	r3, #5
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	f200 8233 	bhi.w	80027b8 <show_voltammetry+0x4a4>
 8002352:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <show_voltammetry+0x44>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	08002369 	.word	0x08002369
 800235c:	080023c3 	.word	0x080023c3
 8002360:	08002531 	.word	0x08002531
 8002364:	08002685 	.word	0x08002685
		case 0:
			while(UART_tx_flag != 0);
 8002368:	bf00      	nop
 800236a:	4b63      	ldr	r3, [pc, #396]	@ (80024f8 <show_voltammetry+0x1e4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1fb      	bne.n	800236a <show_voltammetry+0x56>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel ", 8);
 8002372:	2208      	movs	r2, #8
 8002374:	4964      	ldr	r1, [pc, #400]	@ (8002508 <show_voltammetry+0x1f4>)
 8002376:	4862      	ldr	r0, [pc, #392]	@ (8002500 <show_voltammetry+0x1ec>)
 8002378:	f007 ff4e 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 800237c:	4b5e      	ldr	r3, [pc, #376]	@ (80024f8 <show_voltammetry+0x1e4>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
			while(UART_tx_flag != 0);
 8002382:	bf00      	nop
 8002384:	4b5c      	ldr	r3, [pc, #368]	@ (80024f8 <show_voltammetry+0x1e4>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1fb      	bne.n	8002384 <show_voltammetry+0x70>
			arr[0] = i + 49;
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	3331      	adds	r3, #49	@ 0x31
 8002390:	b2db      	uxtb	r3, r3
 8002392:	713b      	strb	r3, [r7, #4]
			HAL_UART_Transmit_DMA(&huart2, arr, 1);
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2201      	movs	r2, #1
 8002398:	4619      	mov	r1, r3
 800239a:	4859      	ldr	r0, [pc, #356]	@ (8002500 <show_voltammetry+0x1ec>)
 800239c:	f007 ff3c 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 80023a0:	4b55      	ldr	r3, [pc, #340]	@ (80024f8 <show_voltammetry+0x1e4>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
			while(UART_tx_flag != 0);
 80023a6:	bf00      	nop
 80023a8:	4b53      	ldr	r3, [pc, #332]	@ (80024f8 <show_voltammetry+0x1e4>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1fb      	bne.n	80023a8 <show_voltammetry+0x94>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" is not used (technique = 0)\n\n", 30);
 80023b0:	221e      	movs	r2, #30
 80023b2:	4956      	ldr	r1, [pc, #344]	@ (800250c <show_voltammetry+0x1f8>)
 80023b4:	4852      	ldr	r0, [pc, #328]	@ (8002500 <show_voltammetry+0x1ec>)
 80023b6:	f007 ff2f 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 80023ba:	4b4f      	ldr	r3, [pc, #316]	@ (80024f8 <show_voltammetry+0x1e4>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
			break;
 80023c0:	e1fb      	b.n	80027ba <show_voltammetry+0x4a6>
		case 1:
			while(UART_tx_flag != 0);
 80023c2:	bf00      	nop
 80023c4:	4b4c      	ldr	r3, [pc, #304]	@ (80024f8 <show_voltammetry+0x1e4>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1fb      	bne.n	80023c4 <show_voltammetry+0xb0>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel ", 8);
 80023cc:	2208      	movs	r2, #8
 80023ce:	494e      	ldr	r1, [pc, #312]	@ (8002508 <show_voltammetry+0x1f4>)
 80023d0:	484b      	ldr	r0, [pc, #300]	@ (8002500 <show_voltammetry+0x1ec>)
 80023d2:	f007 ff21 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 80023d6:	4b48      	ldr	r3, [pc, #288]	@ (80024f8 <show_voltammetry+0x1e4>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
			while(UART_tx_flag != 0);
 80023dc:	bf00      	nop
 80023de:	4b46      	ldr	r3, [pc, #280]	@ (80024f8 <show_voltammetry+0x1e4>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1fb      	bne.n	80023de <show_voltammetry+0xca>
			arr[0] = i + 49;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	3331      	adds	r3, #49	@ 0x31
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	713b      	strb	r3, [r7, #4]
			HAL_UART_Transmit_DMA(&huart2, arr, 1);
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2201      	movs	r2, #1
 80023f2:	4619      	mov	r1, r3
 80023f4:	4842      	ldr	r0, [pc, #264]	@ (8002500 <show_voltammetry+0x1ec>)
 80023f6:	f007 ff0f 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 80023fa:	4b3f      	ldr	r3, [pc, #252]	@ (80024f8 <show_voltammetry+0x1e4>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
			while(UART_tx_flag != 0);
 8002400:	bf00      	nop
 8002402:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <show_voltammetry+0x1e4>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1fb      	bne.n	8002402 <show_voltammetry+0xee>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" uses Cyclic voltammetry (technique = 1)\n", 41);
 800240a:	2229      	movs	r2, #41	@ 0x29
 800240c:	4940      	ldr	r1, [pc, #256]	@ (8002510 <show_voltammetry+0x1fc>)
 800240e:	483c      	ldr	r0, [pc, #240]	@ (8002500 <show_voltammetry+0x1ec>)
 8002410:	f007 ff02 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8002414:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <show_voltammetry+0x1e4>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
			show_parameter(channels.parameters[i].cv.t_equilibration, (uint8_t*)" t equilibration (s): ",22);
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	4939      	ldr	r1, [pc, #228]	@ (8002504 <show_voltammetry+0x1f0>)
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	440b      	add	r3, r1
 8002428:	3308      	adds	r3, #8
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	2116      	movs	r1, #22
 8002430:	4838      	ldr	r0, [pc, #224]	@ (8002514 <show_voltammetry+0x200>)
 8002432:	eeb0 0a67 	vmov.f32	s0, s15
 8002436:	f7ff f8e3 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].cv.E_begin, (uint8_t*)" E begin (V): ",14);
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	4931      	ldr	r1, [pc, #196]	@ (8002504 <show_voltammetry+0x1f0>)
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	440b      	add	r3, r1
 8002448:	330c      	adds	r3, #12
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	210e      	movs	r1, #14
 8002450:	4831      	ldr	r0, [pc, #196]	@ (8002518 <show_voltammetry+0x204>)
 8002452:	eeb0 0a67 	vmov.f32	s0, s15
 8002456:	f7ff f8d3 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].cv.E_step, (uint8_t*)" E step (V): ",13);
 800245a:	79fa      	ldrb	r2, [r7, #7]
 800245c:	4929      	ldr	r1, [pc, #164]	@ (8002504 <show_voltammetry+0x1f0>)
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	440b      	add	r3, r1
 8002468:	3318      	adds	r3, #24
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	210d      	movs	r1, #13
 8002470:	482a      	ldr	r0, [pc, #168]	@ (800251c <show_voltammetry+0x208>)
 8002472:	eeb0 0a67 	vmov.f32	s0, s15
 8002476:	f7ff f8c3 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].cv.E_vertex_1, (uint8_t*)" E Vertex 1 (V): ",17);
 800247a:	79fa      	ldrb	r2, [r7, #7]
 800247c:	4921      	ldr	r1, [pc, #132]	@ (8002504 <show_voltammetry+0x1f0>)
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	440b      	add	r3, r1
 8002488:	3310      	adds	r3, #16
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	2111      	movs	r1, #17
 8002490:	4823      	ldr	r0, [pc, #140]	@ (8002520 <show_voltammetry+0x20c>)
 8002492:	eeb0 0a67 	vmov.f32	s0, s15
 8002496:	f7ff f8b3 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].cv.E_vertex_2, (uint8_t*)" E Vertex 2 (V): ",17);
 800249a:	79fa      	ldrb	r2, [r7, #7]
 800249c:	4919      	ldr	r1, [pc, #100]	@ (8002504 <show_voltammetry+0x1f0>)
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	440b      	add	r3, r1
 80024a8:	3314      	adds	r3, #20
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	2111      	movs	r1, #17
 80024b0:	481c      	ldr	r0, [pc, #112]	@ (8002524 <show_voltammetry+0x210>)
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	f7ff f8a3 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].cv.scan_rate, (uint8_t*)" Scan rate (V/s): ",18);
 80024ba:	79fa      	ldrb	r2, [r7, #7]
 80024bc:	4911      	ldr	r1, [pc, #68]	@ (8002504 <show_voltammetry+0x1f0>)
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	440b      	add	r3, r1
 80024c8:	331c      	adds	r3, #28
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	2112      	movs	r1, #18
 80024d0:	4815      	ldr	r0, [pc, #84]	@ (8002528 <show_voltammetry+0x214>)
 80024d2:	eeb0 0a67 	vmov.f32	s0, s15
 80024d6:	f7ff f893 	bl	8001600 <show_parameter>
			while(UART_tx_flag != 0);
 80024da:	bf00      	nop
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <show_voltammetry+0x1e4>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1fb      	bne.n	80024dc <show_voltammetry+0x1c8>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n:", 1);
 80024e4:	2201      	movs	r2, #1
 80024e6:	4911      	ldr	r1, [pc, #68]	@ (800252c <show_voltammetry+0x218>)
 80024e8:	4805      	ldr	r0, [pc, #20]	@ (8002500 <show_voltammetry+0x1ec>)
 80024ea:	f007 fe95 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 80024ee:	4b02      	ldr	r3, [pc, #8]	@ (80024f8 <show_voltammetry+0x1e4>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
			break;
 80024f4:	e161      	b.n	80027ba <show_voltammetry+0x4a6>
 80024f6:	bf00      	nop
 80024f8:	200002fc 	.word	0x200002fc
 80024fc:	0800fcd4 	.word	0x0800fcd4
 8002500:	20000198 	.word	0x20000198
 8002504:	2000036c 	.word	0x2000036c
 8002508:	0800fbf8 	.word	0x0800fbf8
 800250c:	0800fd04 	.word	0x0800fd04
 8002510:	0800fd24 	.word	0x0800fd24
 8002514:	0800fabc 	.word	0x0800fabc
 8002518:	0800fad4 	.word	0x0800fad4
 800251c:	0800fae4 	.word	0x0800fae4
 8002520:	0800faf4 	.word	0x0800faf4
 8002524:	0800fb08 	.word	0x0800fb08
 8002528:	0800fb1c 	.word	0x0800fb1c
 800252c:	0800fa70 	.word	0x0800fa70
		case 2:
			while(UART_tx_flag != 0);
 8002530:	bf00      	nop
 8002532:	4ba7      	ldr	r3, [pc, #668]	@ (80027d0 <show_voltammetry+0x4bc>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1fb      	bne.n	8002532 <show_voltammetry+0x21e>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel ", 8);
 800253a:	2208      	movs	r2, #8
 800253c:	49a5      	ldr	r1, [pc, #660]	@ (80027d4 <show_voltammetry+0x4c0>)
 800253e:	48a6      	ldr	r0, [pc, #664]	@ (80027d8 <show_voltammetry+0x4c4>)
 8002540:	f007 fe6a 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8002544:	4ba2      	ldr	r3, [pc, #648]	@ (80027d0 <show_voltammetry+0x4bc>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
			while(UART_tx_flag != 0);
 800254a:	bf00      	nop
 800254c:	4ba0      	ldr	r3, [pc, #640]	@ (80027d0 <show_voltammetry+0x4bc>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1fb      	bne.n	800254c <show_voltammetry+0x238>
			arr[0] = i + 49;
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	3331      	adds	r3, #49	@ 0x31
 8002558:	b2db      	uxtb	r3, r3
 800255a:	713b      	strb	r3, [r7, #4]
			HAL_UART_Transmit_DMA(&huart2, arr, 1);
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2201      	movs	r2, #1
 8002560:	4619      	mov	r1, r3
 8002562:	489d      	ldr	r0, [pc, #628]	@ (80027d8 <show_voltammetry+0x4c4>)
 8002564:	f007 fe58 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8002568:	4b99      	ldr	r3, [pc, #612]	@ (80027d0 <show_voltammetry+0x4bc>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
			while(UART_tx_flag != 0);
 800256e:	bf00      	nop
 8002570:	4b97      	ldr	r3, [pc, #604]	@ (80027d0 <show_voltammetry+0x4bc>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1fb      	bne.n	8002570 <show_voltammetry+0x25c>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" uses Differential voltammetry (technique = 2)\n", 47);
 8002578:	222f      	movs	r2, #47	@ 0x2f
 800257a:	4998      	ldr	r1, [pc, #608]	@ (80027dc <show_voltammetry+0x4c8>)
 800257c:	4896      	ldr	r0, [pc, #600]	@ (80027d8 <show_voltammetry+0x4c4>)
 800257e:	f007 fe4b 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8002582:	4b93      	ldr	r3, [pc, #588]	@ (80027d0 <show_voltammetry+0x4bc>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
			show_parameter(channels.parameters[i].dpv.t_equilibration, (uint8_t*)" t equilibration (s): ",22);
 8002588:	79fa      	ldrb	r2, [r7, #7]
 800258a:	4995      	ldr	r1, [pc, #596]	@ (80027e0 <show_voltammetry+0x4cc>)
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	3320      	adds	r3, #32
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	2116      	movs	r1, #22
 800259e:	4891      	ldr	r0, [pc, #580]	@ (80027e4 <show_voltammetry+0x4d0>)
 80025a0:	eeb0 0a67 	vmov.f32	s0, s15
 80025a4:	f7ff f82c 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].dpv.E_begin, (uint8_t*)" E begin (V): ",14);
 80025a8:	79fa      	ldrb	r2, [r7, #7]
 80025aa:	498d      	ldr	r1, [pc, #564]	@ (80027e0 <show_voltammetry+0x4cc>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	440b      	add	r3, r1
 80025b6:	3324      	adds	r3, #36	@ 0x24
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	210e      	movs	r1, #14
 80025be:	488a      	ldr	r0, [pc, #552]	@ (80027e8 <show_voltammetry+0x4d4>)
 80025c0:	eeb0 0a67 	vmov.f32	s0, s15
 80025c4:	f7ff f81c 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].dpv.E_end, (uint8_t*)" E end (V): ",12);
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	4985      	ldr	r1, [pc, #532]	@ (80027e0 <show_voltammetry+0x4cc>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	440b      	add	r3, r1
 80025d6:	3328      	adds	r3, #40	@ 0x28
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	210c      	movs	r1, #12
 80025de:	4883      	ldr	r0, [pc, #524]	@ (80027ec <show_voltammetry+0x4d8>)
 80025e0:	eeb0 0a67 	vmov.f32	s0, s15
 80025e4:	f7ff f80c 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].dpv.E_step, (uint8_t*)" E step (V): ",13);
 80025e8:	79fa      	ldrb	r2, [r7, #7]
 80025ea:	497d      	ldr	r1, [pc, #500]	@ (80027e0 <show_voltammetry+0x4cc>)
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	440b      	add	r3, r1
 80025f6:	332c      	adds	r3, #44	@ 0x2c
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	210d      	movs	r1, #13
 80025fe:	487c      	ldr	r0, [pc, #496]	@ (80027f0 <show_voltammetry+0x4dc>)
 8002600:	eeb0 0a67 	vmov.f32	s0, s15
 8002604:	f7fe fffc 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].dpv.E_pulse, (uint8_t*)" E pulse (V): ",14);
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	4975      	ldr	r1, [pc, #468]	@ (80027e0 <show_voltammetry+0x4cc>)
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	440b      	add	r3, r1
 8002616:	3330      	adds	r3, #48	@ 0x30
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	210e      	movs	r1, #14
 800261e:	4875      	ldr	r0, [pc, #468]	@ (80027f4 <show_voltammetry+0x4e0>)
 8002620:	eeb0 0a67 	vmov.f32	s0, s15
 8002624:	f7fe ffec 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].dpv.t_pulse, (uint8_t*)" t pulse (s): ",14);
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	496d      	ldr	r1, [pc, #436]	@ (80027e0 <show_voltammetry+0x4cc>)
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	440b      	add	r3, r1
 8002636:	3334      	adds	r3, #52	@ 0x34
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	210e      	movs	r1, #14
 800263e:	486e      	ldr	r0, [pc, #440]	@ (80027f8 <show_voltammetry+0x4e4>)
 8002640:	eeb0 0a67 	vmov.f32	s0, s15
 8002644:	f7fe ffdc 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].dpv.Scan_rate, (uint8_t*)" Scan rate (V/s): ",18);
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	4965      	ldr	r1, [pc, #404]	@ (80027e0 <show_voltammetry+0x4cc>)
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	440b      	add	r3, r1
 8002656:	3338      	adds	r3, #56	@ 0x38
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	2112      	movs	r1, #18
 800265e:	4867      	ldr	r0, [pc, #412]	@ (80027fc <show_voltammetry+0x4e8>)
 8002660:	eeb0 0a67 	vmov.f32	s0, s15
 8002664:	f7fe ffcc 	bl	8001600 <show_parameter>
			while(UART_tx_flag != 0);
 8002668:	bf00      	nop
 800266a:	4b59      	ldr	r3, [pc, #356]	@ (80027d0 <show_voltammetry+0x4bc>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1fb      	bne.n	800266a <show_voltammetry+0x356>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n:", 1);
 8002672:	2201      	movs	r2, #1
 8002674:	4962      	ldr	r1, [pc, #392]	@ (8002800 <show_voltammetry+0x4ec>)
 8002676:	4858      	ldr	r0, [pc, #352]	@ (80027d8 <show_voltammetry+0x4c4>)
 8002678:	f007 fdce 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 800267c:	4b54      	ldr	r3, [pc, #336]	@ (80027d0 <show_voltammetry+0x4bc>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
			break;
 8002682:	e09a      	b.n	80027ba <show_voltammetry+0x4a6>
		case 3:
			while(UART_tx_flag != 0);
 8002684:	bf00      	nop
 8002686:	4b52      	ldr	r3, [pc, #328]	@ (80027d0 <show_voltammetry+0x4bc>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1fb      	bne.n	8002686 <show_voltammetry+0x372>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel ", 8);
 800268e:	2208      	movs	r2, #8
 8002690:	4950      	ldr	r1, [pc, #320]	@ (80027d4 <show_voltammetry+0x4c0>)
 8002692:	4851      	ldr	r0, [pc, #324]	@ (80027d8 <show_voltammetry+0x4c4>)
 8002694:	f007 fdc0 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 8002698:	4b4d      	ldr	r3, [pc, #308]	@ (80027d0 <show_voltammetry+0x4bc>)
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
			while(UART_tx_flag != 0);
 800269e:	bf00      	nop
 80026a0:	4b4b      	ldr	r3, [pc, #300]	@ (80027d0 <show_voltammetry+0x4bc>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1fb      	bne.n	80026a0 <show_voltammetry+0x38c>
			arr[0] = i + 49;
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	3331      	adds	r3, #49	@ 0x31
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	713b      	strb	r3, [r7, #4]
			HAL_UART_Transmit_DMA(&huart2, arr, 1);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	2201      	movs	r2, #1
 80026b4:	4619      	mov	r1, r3
 80026b6:	4848      	ldr	r0, [pc, #288]	@ (80027d8 <show_voltammetry+0x4c4>)
 80026b8:	f007 fdae 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 80026bc:	4b44      	ldr	r3, [pc, #272]	@ (80027d0 <show_voltammetry+0x4bc>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
			while(UART_tx_flag != 0);
 80026c2:	bf00      	nop
 80026c4:	4b42      	ldr	r3, [pc, #264]	@ (80027d0 <show_voltammetry+0x4bc>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1fb      	bne.n	80026c4 <show_voltammetry+0x3b0>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" uses Square Wave voltammetry (technique = 3)\n", 46);
 80026cc:	222e      	movs	r2, #46	@ 0x2e
 80026ce:	494d      	ldr	r1, [pc, #308]	@ (8002804 <show_voltammetry+0x4f0>)
 80026d0:	4841      	ldr	r0, [pc, #260]	@ (80027d8 <show_voltammetry+0x4c4>)
 80026d2:	f007 fda1 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 80026d6:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <show_voltammetry+0x4bc>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
			show_parameter(channels.parameters[i].swv.t_equilibration, (uint8_t*)" t equilibration (s): ",22);
 80026dc:	79fa      	ldrb	r2, [r7, #7]
 80026de:	4940      	ldr	r1, [pc, #256]	@ (80027e0 <show_voltammetry+0x4cc>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	440b      	add	r3, r1
 80026ea:	333c      	adds	r3, #60	@ 0x3c
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	2116      	movs	r1, #22
 80026f2:	483c      	ldr	r0, [pc, #240]	@ (80027e4 <show_voltammetry+0x4d0>)
 80026f4:	eeb0 0a67 	vmov.f32	s0, s15
 80026f8:	f7fe ff82 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].swv.E_begin, (uint8_t*)" E begin (V): ",14);
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	4938      	ldr	r1, [pc, #224]	@ (80027e0 <show_voltammetry+0x4cc>)
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	440b      	add	r3, r1
 800270a:	3340      	adds	r3, #64	@ 0x40
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	210e      	movs	r1, #14
 8002712:	4835      	ldr	r0, [pc, #212]	@ (80027e8 <show_voltammetry+0x4d4>)
 8002714:	eeb0 0a67 	vmov.f32	s0, s15
 8002718:	f7fe ff72 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].swv.E_end, (uint8_t*)" E end (V): ",12);
 800271c:	79fa      	ldrb	r2, [r7, #7]
 800271e:	4930      	ldr	r1, [pc, #192]	@ (80027e0 <show_voltammetry+0x4cc>)
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	440b      	add	r3, r1
 800272a:	3344      	adds	r3, #68	@ 0x44
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	210c      	movs	r1, #12
 8002732:	482e      	ldr	r0, [pc, #184]	@ (80027ec <show_voltammetry+0x4d8>)
 8002734:	eeb0 0a67 	vmov.f32	s0, s15
 8002738:	f7fe ff62 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].swv.E_step, (uint8_t*)" E step (V): ",13);
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	4928      	ldr	r1, [pc, #160]	@ (80027e0 <show_voltammetry+0x4cc>)
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	440b      	add	r3, r1
 800274a:	3348      	adds	r3, #72	@ 0x48
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	210d      	movs	r1, #13
 8002752:	4827      	ldr	r0, [pc, #156]	@ (80027f0 <show_voltammetry+0x4dc>)
 8002754:	eeb0 0a67 	vmov.f32	s0, s15
 8002758:	f7fe ff52 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].swv.Amplitude, (uint8_t*)" Amplitude (V): ",16);
 800275c:	79fa      	ldrb	r2, [r7, #7]
 800275e:	4920      	ldr	r1, [pc, #128]	@ (80027e0 <show_voltammetry+0x4cc>)
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	440b      	add	r3, r1
 800276a:	334c      	adds	r3, #76	@ 0x4c
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	2110      	movs	r1, #16
 8002772:	4825      	ldr	r0, [pc, #148]	@ (8002808 <show_voltammetry+0x4f4>)
 8002774:	eeb0 0a67 	vmov.f32	s0, s15
 8002778:	f7fe ff42 	bl	8001600 <show_parameter>
			show_parameter(channels.parameters[i].swv.Frequency, (uint8_t*)" Frequency (Hz): ",17);
 800277c:	79fa      	ldrb	r2, [r7, #7]
 800277e:	4918      	ldr	r1, [pc, #96]	@ (80027e0 <show_voltammetry+0x4cc>)
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	440b      	add	r3, r1
 800278a:	3350      	adds	r3, #80	@ 0x50
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	2111      	movs	r1, #17
 8002792:	481e      	ldr	r0, [pc, #120]	@ (800280c <show_voltammetry+0x4f8>)
 8002794:	eeb0 0a67 	vmov.f32	s0, s15
 8002798:	f7fe ff32 	bl	8001600 <show_parameter>
			while(UART_tx_flag != 0);
 800279c:	bf00      	nop
 800279e:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <show_voltammetry+0x4bc>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1fb      	bne.n	800279e <show_voltammetry+0x48a>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n:", 1);
 80027a6:	2201      	movs	r2, #1
 80027a8:	4915      	ldr	r1, [pc, #84]	@ (8002800 <show_voltammetry+0x4ec>)
 80027aa:	480b      	ldr	r0, [pc, #44]	@ (80027d8 <show_voltammetry+0x4c4>)
 80027ac:	f007 fd34 	bl	800a218 <HAL_UART_Transmit_DMA>
			UART_tx_flag = 1;
 80027b0:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <show_voltammetry+0x4bc>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
			break;
 80027b6:	e000      	b.n	80027ba <show_voltammetry+0x4a6>
		default:
			break;
 80027b8:	bf00      	nop
		}
		i+= 1;
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	3301      	adds	r3, #1
 80027be:	71fb      	strb	r3, [r7, #7]
	while(i != 4){
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	f47f adb9 	bne.w	800233a <show_voltammetry+0x26>
	}
	return;
 80027c8:	bf00      	nop
}
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	200002fc 	.word	0x200002fc
 80027d4:	0800fbf8 	.word	0x0800fbf8
 80027d8:	20000198 	.word	0x20000198
 80027dc:	0800fd50 	.word	0x0800fd50
 80027e0:	2000036c 	.word	0x2000036c
 80027e4:	0800fabc 	.word	0x0800fabc
 80027e8:	0800fad4 	.word	0x0800fad4
 80027ec:	0800fb50 	.word	0x0800fb50
 80027f0:	0800fae4 	.word	0x0800fae4
 80027f4:	0800fb60 	.word	0x0800fb60
 80027f8:	0800fb70 	.word	0x0800fb70
 80027fc:	0800fb1c 	.word	0x0800fb1c
 8002800:	0800fa70 	.word	0x0800fa70
 8002804:	0800fd80 	.word	0x0800fd80
 8002808:	0800fb9c 	.word	0x0800fb9c
 800280c:	0800fbb0 	.word	0x0800fbb0

08002810 <show_potentiostat>:

void show_potentiostat(void){
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
	uint8_t size = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]

	// write to the console
	while(UART_tx_flag != 0);
 800281a:	bf00      	nop
 800281c:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <show_potentiostat+0xe8>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1fb      	bne.n	800281c <show_potentiostat+0xc>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Potentiostat! The following parameters are:\n t interval (s): ", 61);
 8002824:	223d      	movs	r2, #61	@ 0x3d
 8002826:	4935      	ldr	r1, [pc, #212]	@ (80028fc <show_potentiostat+0xec>)
 8002828:	4835      	ldr	r0, [pc, #212]	@ (8002900 <show_potentiostat+0xf0>)
 800282a:	f007 fcf5 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 800282e:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <show_potentiostat+0xe8>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]

	// communicate to console
	uint8_t buff1[10];
	size = float_to_ASCII(p1.t_interval, buff1);
 8002834:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <show_potentiostat+0xf4>)
 8002836:	edd3 7a01 	vldr	s15, [r3, #4]
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4618      	mov	r0, r3
 8002840:	eeb0 0a67 	vmov.f32	s0, s15
 8002844:	f7fe fca4 	bl	8001190 <float_to_ASCII>
 8002848:	4603      	mov	r3, r0
 800284a:	75fb      	strb	r3, [r7, #23]
	while(UART_tx_flag != 0);
 800284c:	bf00      	nop
 800284e:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <show_potentiostat+0xe8>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1fb      	bne.n	800284e <show_potentiostat+0x3e>
	HAL_UART_Transmit_DMA(&huart2, buff1, size);
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	b29a      	uxth	r2, r3
 800285a:	f107 030c 	add.w	r3, r7, #12
 800285e:	4619      	mov	r1, r3
 8002860:	4827      	ldr	r0, [pc, #156]	@ (8002900 <show_potentiostat+0xf0>)
 8002862:	f007 fcd9 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8002866:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <show_potentiostat+0xe8>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
	while(UART_tx_flag != 0);
 800286c:	bf00      	nop
 800286e:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <show_potentiostat+0xe8>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1fb      	bne.n	800286e <show_potentiostat+0x5e>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n:", 1);
 8002876:	2201      	movs	r2, #1
 8002878:	4923      	ldr	r1, [pc, #140]	@ (8002908 <show_potentiostat+0xf8>)
 800287a:	4821      	ldr	r0, [pc, #132]	@ (8002900 <show_potentiostat+0xf0>)
 800287c:	f007 fccc 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8002880:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <show_potentiostat+0xe8>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]

	// show parameter
	while(UART_tx_flag != 0);
 8002886:	bf00      	nop
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <show_potentiostat+0xe8>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1fb      	bne.n	8002888 <show_potentiostat+0x78>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" t run (s): ", 12);
 8002890:	220c      	movs	r2, #12
 8002892:	491e      	ldr	r1, [pc, #120]	@ (800290c <show_potentiostat+0xfc>)
 8002894:	481a      	ldr	r0, [pc, #104]	@ (8002900 <show_potentiostat+0xf0>)
 8002896:	f007 fcbf 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 800289a:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <show_potentiostat+0xe8>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
	// communicate to console
	uint8_t buff2[10];
	size = float_to_ASCII(p1.t_run, buff2);
 80028a0:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <show_potentiostat+0xf4>)
 80028a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028a6:	463b      	mov	r3, r7
 80028a8:	4618      	mov	r0, r3
 80028aa:	eeb0 0a67 	vmov.f32	s0, s15
 80028ae:	f7fe fc6f 	bl	8001190 <float_to_ASCII>
 80028b2:	4603      	mov	r3, r0
 80028b4:	75fb      	strb	r3, [r7, #23]
	while(UART_tx_flag != 0);
 80028b6:	bf00      	nop
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <show_potentiostat+0xe8>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1fb      	bne.n	80028b8 <show_potentiostat+0xa8>
	HAL_UART_Transmit_DMA(&huart2, buff2, size);
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	463b      	mov	r3, r7
 80028c6:	4619      	mov	r1, r3
 80028c8:	480d      	ldr	r0, [pc, #52]	@ (8002900 <show_potentiostat+0xf0>)
 80028ca:	f007 fca5 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <show_potentiostat+0xe8>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
	while(UART_tx_flag != 0);
 80028d4:	bf00      	nop
 80028d6:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <show_potentiostat+0xe8>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1fb      	bne.n	80028d6 <show_potentiostat+0xc6>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n:", 1);
 80028de:	2201      	movs	r2, #1
 80028e0:	4909      	ldr	r1, [pc, #36]	@ (8002908 <show_potentiostat+0xf8>)
 80028e2:	4807      	ldr	r0, [pc, #28]	@ (8002900 <show_potentiostat+0xf0>)
 80028e4:	f007 fc98 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <show_potentiostat+0xe8>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]

	return;
 80028ee:	bf00      	nop
}
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200002fc 	.word	0x200002fc
 80028fc:	0800fdb0 	.word	0x0800fdb0
 8002900:	20000198 	.word	0x20000198
 8002904:	200004b0 	.word	0x200004b0
 8002908:	0800fa70 	.word	0x0800fa70
 800290c:	0800fdf0 	.word	0x0800fdf0

08002910 <change_potentiostat>:

void change_potentiostat(void){
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
	uint8_t size = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	75bb      	strb	r3, [r7, #22]
	uint8_t i = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]

	// write to the console
	while(UART_tx_flag != 0);
 800291e:	bf00      	nop
 8002920:	4b67      	ldr	r3, [pc, #412]	@ (8002ac0 <change_potentiostat+0x1b0>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1fb      	bne.n	8002920 <change_potentiostat+0x10>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Change parameters? [y/n].\n", 26);
 8002928:	221a      	movs	r2, #26
 800292a:	4966      	ldr	r1, [pc, #408]	@ (8002ac4 <change_potentiostat+0x1b4>)
 800292c:	4866      	ldr	r0, [pc, #408]	@ (8002ac8 <change_potentiostat+0x1b8>)
 800292e:	f007 fc73 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8002932:	4b63      	ldr	r3, [pc, #396]	@ (8002ac0 <change_potentiostat+0x1b0>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
	while(UART_rx_flag != 1);
 8002938:	bf00      	nop
 800293a:	4b64      	ldr	r3, [pc, #400]	@ (8002acc <change_potentiostat+0x1bc>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d1fb      	bne.n	800293a <change_potentiostat+0x2a>
	if(UART_rx_buff[0] == 121){
 8002942:	4b63      	ldr	r3, [pc, #396]	@ (8002ad0 <change_potentiostat+0x1c0>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b79      	cmp	r3, #121	@ 0x79
 8002948:	f040 80b0 	bne.w	8002aac <change_potentiostat+0x19c>
		clear_UART_rx_buff();
 800294c:	f001 fbac 	bl	80040a8 <clear_UART_rx_buff>
		UART_rx_flag = 0;
 8002950:	4b5e      	ldr	r3, [pc, #376]	@ (8002acc <change_potentiostat+0x1bc>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]

		// send which parameter
		while(UART_tx_flag != 0);
 8002956:	bf00      	nop
 8002958:	4b59      	ldr	r3, [pc, #356]	@ (8002ac0 <change_potentiostat+0x1b0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1fb      	bne.n	8002958 <change_potentiostat+0x48>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" t interval (s): ", 17);
 8002960:	2211      	movs	r2, #17
 8002962:	495c      	ldr	r1, [pc, #368]	@ (8002ad4 <change_potentiostat+0x1c4>)
 8002964:	4858      	ldr	r0, [pc, #352]	@ (8002ac8 <change_potentiostat+0x1b8>)
 8002966:	f007 fc57 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 800296a:	4b55      	ldr	r3, [pc, #340]	@ (8002ac0 <change_potentiostat+0x1b0>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
		// receive data and set it in a parameter
		while(UART_rx_flag != 1);
 8002970:	bf00      	nop
 8002972:	4b56      	ldr	r3, [pc, #344]	@ (8002acc <change_potentiostat+0x1bc>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d1fb      	bne.n	8002972 <change_potentiostat+0x62>
		i = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
		while(UART_rx_buff[i] != 10 && UART_rx_buff[i] != 13){
 800297e:	e002      	b.n	8002986 <change_potentiostat+0x76>
			i += 1;
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	3301      	adds	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
		while(UART_rx_buff[i] != 10 && UART_rx_buff[i] != 13){
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	4a51      	ldr	r2, [pc, #324]	@ (8002ad0 <change_potentiostat+0x1c0>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	2b0a      	cmp	r3, #10
 800298e:	d004      	beq.n	800299a <change_potentiostat+0x8a>
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	4a4f      	ldr	r2, [pc, #316]	@ (8002ad0 <change_potentiostat+0x1c0>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	2b0d      	cmp	r3, #13
 8002998:	d1f2      	bne.n	8002980 <change_potentiostat+0x70>
		}
		// if no enter, there is data and set parameter
		if(i != 0){
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <change_potentiostat+0xa4>
			p1.t_interval = ASCII_to_float(0,i);
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	4619      	mov	r1, r3
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fe fd7f 	bl	80014a8 <ASCII_to_float>
 80029aa:	eef0 7a40 	vmov.f32	s15, s0
 80029ae:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <change_potentiostat+0x1c8>)
 80029b0:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		clear_UART_rx_buff();
 80029b4:	f001 fb78 	bl	80040a8 <clear_UART_rx_buff>
		UART_rx_flag = 0;
 80029b8:	4b44      	ldr	r3, [pc, #272]	@ (8002acc <change_potentiostat+0x1bc>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
		// Communicate parameter back to console
		uint8_t buff1[10];
		size = float_to_ASCII(p1.t_interval, buff1);
 80029be:	4b46      	ldr	r3, [pc, #280]	@ (8002ad8 <change_potentiostat+0x1c8>)
 80029c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	4618      	mov	r0, r3
 80029ca:	eeb0 0a67 	vmov.f32	s0, s15
 80029ce:	f7fe fbdf 	bl	8001190 <float_to_ASCII>
 80029d2:	4603      	mov	r3, r0
 80029d4:	75bb      	strb	r3, [r7, #22]
		while(UART_tx_flag != 0);
 80029d6:	bf00      	nop
 80029d8:	4b39      	ldr	r3, [pc, #228]	@ (8002ac0 <change_potentiostat+0x1b0>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1fb      	bne.n	80029d8 <change_potentiostat+0xc8>
		HAL_UART_Transmit_DMA(&huart2, buff1, size);
 80029e0:	7dbb      	ldrb	r3, [r7, #22]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	4619      	mov	r1, r3
 80029ea:	4837      	ldr	r0, [pc, #220]	@ (8002ac8 <change_potentiostat+0x1b8>)
 80029ec:	f007 fc14 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 80029f0:	4b33      	ldr	r3, [pc, #204]	@ (8002ac0 <change_potentiostat+0x1b0>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]

		// send which parameter
		while(UART_tx_flag != 0);
 80029f6:	bf00      	nop
 80029f8:	4b31      	ldr	r3, [pc, #196]	@ (8002ac0 <change_potentiostat+0x1b0>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1fb      	bne.n	80029f8 <change_potentiostat+0xe8>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n t run (s): ", 13);
 8002a00:	220d      	movs	r2, #13
 8002a02:	4936      	ldr	r1, [pc, #216]	@ (8002adc <change_potentiostat+0x1cc>)
 8002a04:	4830      	ldr	r0, [pc, #192]	@ (8002ac8 <change_potentiostat+0x1b8>)
 8002a06:	f007 fc07 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac0 <change_potentiostat+0x1b0>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
		// receive data and set it in a parameter
		while(UART_rx_flag != 1);
 8002a10:	bf00      	nop
 8002a12:	4b2e      	ldr	r3, [pc, #184]	@ (8002acc <change_potentiostat+0x1bc>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d1fb      	bne.n	8002a12 <change_potentiostat+0x102>
		i = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]
		while(UART_rx_buff[i] != 10 && UART_rx_buff[i] != 13){
 8002a1e:	e002      	b.n	8002a26 <change_potentiostat+0x116>
			i += 1;
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	3301      	adds	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
		while(UART_rx_buff[i] != 10 && UART_rx_buff[i] != 13){
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	4a29      	ldr	r2, [pc, #164]	@ (8002ad0 <change_potentiostat+0x1c0>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	2b0a      	cmp	r3, #10
 8002a2e:	d004      	beq.n	8002a3a <change_potentiostat+0x12a>
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <change_potentiostat+0x1c0>)
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	2b0d      	cmp	r3, #13
 8002a38:	d1f2      	bne.n	8002a20 <change_potentiostat+0x110>
		}
		// if no enter, there is data and set parameter
		if(i != 0){
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d009      	beq.n	8002a54 <change_potentiostat+0x144>
			p1.t_run = ASCII_to_float(0,i);
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	4619      	mov	r1, r3
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe fd2f 	bl	80014a8 <ASCII_to_float>
 8002a4a:	eef0 7a40 	vmov.f32	s15, s0
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <change_potentiostat+0x1c8>)
 8002a50:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		clear_UART_rx_buff();
 8002a54:	f001 fb28 	bl	80040a8 <clear_UART_rx_buff>
		UART_rx_flag = 0;
 8002a58:	4b1c      	ldr	r3, [pc, #112]	@ (8002acc <change_potentiostat+0x1bc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
		// Communicate parameter back to console
		uint8_t buff2[10];
		size = float_to_ASCII(p1.t_run, buff2);
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <change_potentiostat+0x1c8>)
 8002a60:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a64:	463b      	mov	r3, r7
 8002a66:	4618      	mov	r0, r3
 8002a68:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6c:	f7fe fb90 	bl	8001190 <float_to_ASCII>
 8002a70:	4603      	mov	r3, r0
 8002a72:	75bb      	strb	r3, [r7, #22]
		while(UART_tx_flag != 0);
 8002a74:	bf00      	nop
 8002a76:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <change_potentiostat+0x1b0>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1fb      	bne.n	8002a76 <change_potentiostat+0x166>
		HAL_UART_Transmit_DMA(&huart2, buff2, size);
 8002a7e:	7dbb      	ldrb	r3, [r7, #22]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	463b      	mov	r3, r7
 8002a84:	4619      	mov	r1, r3
 8002a86:	4810      	ldr	r0, [pc, #64]	@ (8002ac8 <change_potentiostat+0x1b8>)
 8002a88:	f007 fbc6 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <change_potentiostat+0x1b0>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]

		// end
		while(UART_tx_flag != 0);
 8002a92:	bf00      	nop
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <change_potentiostat+0x1b0>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1fb      	bne.n	8002a94 <change_potentiostat+0x184>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n", 1);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4910      	ldr	r1, [pc, #64]	@ (8002ae0 <change_potentiostat+0x1d0>)
 8002aa0:	4809      	ldr	r0, [pc, #36]	@ (8002ac8 <change_potentiostat+0x1b8>)
 8002aa2:	f007 fbb9 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <change_potentiostat+0x1b0>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
	}
	clear_UART_rx_buff();
 8002aac:	f001 fafc 	bl	80040a8 <clear_UART_rx_buff>
	UART_rx_flag = 0;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <change_potentiostat+0x1bc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]

	return;
 8002ab6:	bf00      	nop
}
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200002fc 	.word	0x200002fc
 8002ac4:	0800fc3c 	.word	0x0800fc3c
 8002ac8:	20000198 	.word	0x20000198
 8002acc:	200002fd 	.word	0x200002fd
 8002ad0:	20000304 	.word	0x20000304
 8002ad4:	0800fe00 	.word	0x0800fe00
 8002ad8:	200004b0 	.word	0x200004b0
 8002adc:	0800fe14 	.word	0x0800fe14
 8002ae0:	0800fbcc 	.word	0x0800fbcc

08002ae4 <UART_menu>:

void UART_menu(void){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	p1.on = OFF;
 8002ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba4 <UART_menu+0xc0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
	channels.on = OFF;
 8002aee:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba8 <UART_menu+0xc4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
	// start menu
	while(UART_tx_flag != 0);
 8002af4:	bf00      	nop
 8002af6:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <UART_menu+0xc8>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1fb      	bne.n	8002af6 <UART_menu+0x12>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\nInformation about settings can be found on palmsens.com\nType:\n 1. Potentiostat.\n 2. Voltammetry.\n\n", 99);
 8002afe:	2263      	movs	r2, #99	@ 0x63
 8002b00:	492b      	ldr	r1, [pc, #172]	@ (8002bb0 <UART_menu+0xcc>)
 8002b02:	482c      	ldr	r0, [pc, #176]	@ (8002bb4 <UART_menu+0xd0>)
 8002b04:	f007 fb88 	bl	800a218 <HAL_UART_Transmit_DMA>
	UART_tx_flag = 1;
 8002b08:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <UART_menu+0xc8>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]

	while(UART_rx_flag != 1); // wait for new line
 8002b0e:	bf00      	nop
 8002b10:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <UART_menu+0xd4>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d1fb      	bne.n	8002b10 <UART_menu+0x2c>
	switch (UART_rx_buff[0]) {
 8002b18:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <UART_menu+0xd8>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b31      	cmp	r3, #49	@ 0x31
 8002b1e:	d002      	beq.n	8002b26 <UART_menu+0x42>
 8002b20:	2b32      	cmp	r3, #50	@ 0x32
 8002b22:	d01c      	beq.n	8002b5e <UART_menu+0x7a>
		while(UART_tx_flag != 0);
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel, Time (s), Voltage Applied (V), Voltage Out (V), Voltage Ref. (V) \n", 75);
		UART_tx_flag = 1;
	  break;
	default:
		break;
 8002b24:	e037      	b.n	8002b96 <UART_menu+0xb2>
		clear_UART_rx_buff();
 8002b26:	f001 fabf 	bl	80040a8 <clear_UART_rx_buff>
		UART_rx_flag = 0;
 8002b2a:	4b23      	ldr	r3, [pc, #140]	@ (8002bb8 <UART_menu+0xd4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
		show_potentiostat();
 8002b30:	f7ff fe6e 	bl	8002810 <show_potentiostat>
		change_potentiostat();
 8002b34:	f7ff feec 	bl	8002910 <change_potentiostat>
		start(&p1.on, (uint8_t*)"Potentiostat", 12);
 8002b38:	220c      	movs	r2, #12
 8002b3a:	4921      	ldr	r1, [pc, #132]	@ (8002bc0 <UART_menu+0xdc>)
 8002b3c:	4819      	ldr	r0, [pc, #100]	@ (8002ba4 <UART_menu+0xc0>)
 8002b3e:	f7ff fadb 	bl	80020f8 <start>
		while(UART_tx_flag != 0);
 8002b42:	bf00      	nop
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <UART_menu+0xc8>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1fb      	bne.n	8002b44 <UART_menu+0x60>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel, Time (s), Voltage Out (V) \n", 36);
 8002b4c:	2224      	movs	r2, #36	@ 0x24
 8002b4e:	491d      	ldr	r1, [pc, #116]	@ (8002bc4 <UART_menu+0xe0>)
 8002b50:	4818      	ldr	r0, [pc, #96]	@ (8002bb4 <UART_menu+0xd0>)
 8002b52:	f007 fb61 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8002b56:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <UART_menu+0xc8>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
		break;
 8002b5c:	e01b      	b.n	8002b96 <UART_menu+0xb2>
		clear_UART_rx_buff();
 8002b5e:	f001 faa3 	bl	80040a8 <clear_UART_rx_buff>
		UART_rx_flag = 0;
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <UART_menu+0xd4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
		show_voltammetry();
 8002b68:	f7ff fbd4 	bl	8002314 <show_voltammetry>
		change_voltammetry();
 8002b6c:	f7ff fb56 	bl	800221c <change_voltammetry>
		start(&channels.on, (uint8_t*)"Voltammetry", 11);
 8002b70:	220b      	movs	r2, #11
 8002b72:	4915      	ldr	r1, [pc, #84]	@ (8002bc8 <UART_menu+0xe4>)
 8002b74:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <UART_menu+0xc4>)
 8002b76:	f7ff fabf 	bl	80020f8 <start>
		while(UART_tx_flag != 0);
 8002b7a:	bf00      	nop
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <UART_menu+0xc8>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1fb      	bne.n	8002b7c <UART_menu+0x98>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Channel, Time (s), Voltage Applied (V), Voltage Out (V), Voltage Ref. (V) \n", 75);
 8002b84:	224b      	movs	r2, #75	@ 0x4b
 8002b86:	4911      	ldr	r1, [pc, #68]	@ (8002bcc <UART_menu+0xe8>)
 8002b88:	480a      	ldr	r0, [pc, #40]	@ (8002bb4 <UART_menu+0xd0>)
 8002b8a:	f007 fb45 	bl	800a218 <HAL_UART_Transmit_DMA>
		UART_tx_flag = 1;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	@ (8002bac <UART_menu+0xc8>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
	  break;
 8002b94:	bf00      	nop
	}
	clear_UART_rx_buff();
 8002b96:	f001 fa87 	bl	80040a8 <clear_UART_rx_buff>
	UART_rx_flag = 0;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <UART_menu+0xd4>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]

	return;
 8002ba0:	bf00      	nop
}
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200004b0 	.word	0x200004b0
 8002ba8:	2000036c 	.word	0x2000036c
 8002bac:	200002fc 	.word	0x200002fc
 8002bb0:	0800fe24 	.word	0x0800fe24
 8002bb4:	20000198 	.word	0x20000198
 8002bb8:	200002fd 	.word	0x200002fd
 8002bbc:	20000304 	.word	0x20000304
 8002bc0:	0800fe88 	.word	0x0800fe88
 8002bc4:	0800fe98 	.word	0x0800fe98
 8002bc8:	0800fec0 	.word	0x0800fec0
 8002bcc:	0800fecc 	.word	0x0800fecc

08002bd0 <write_DAC>:

// includes
#include "main.h"


void write_DAC(uint8_t dac, uint8_t reg, uint16_t data){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	71bb      	strb	r3, [r7, #6]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80bb      	strh	r3, [r7, #4]

	uint8_t DAC_tx_buff[3] = {(0x0F&reg), (uint16_t)(data>>8), (uint16_t)(data&0x00FF)};
 8002be2:	79bb      	ldrb	r3, [r7, #6]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	733b      	strb	r3, [r7, #12]
 8002bec:	88bb      	ldrh	r3, [r7, #4]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	737b      	strb	r3, [r7, #13]
 8002bf6:	88bb      	ldrh	r3, [r7, #4]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	73bb      	strb	r3, [r7, #14]
	//uint8_t DAC_rx_buff[3];
	if(dac == 1){
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d115      	bne.n	8002c2e <write_DAC+0x5e>
		// write data to DAC1
		HAL_GPIO_WritePin(GPIOA, DAC1_CS_Pin, GPIO_PIN_RESET);
 8002c02:	2200      	movs	r2, #0
 8002c04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c0c:	f004 f964 	bl	8006ed8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, DAC_tx_buff, 3, 100);
 8002c10:	f107 010c 	add.w	r1, r7, #12
 8002c14:	2364      	movs	r3, #100	@ 0x64
 8002c16:	2203      	movs	r2, #3
 8002c18:	4811      	ldr	r0, [pc, #68]	@ (8002c60 <write_DAC+0x90>)
 8002c1a:	f006 f9c2 	bl	8008fa2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, DAC1_CS_Pin, GPIO_PIN_SET);
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c28:	f004 f956 	bl	8006ed8 <HAL_GPIO_WritePin>
		// HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_RESET);
		// HAL_SPI_Receive(&hspi1, DAC_rx_buff, 3, 100);
		// HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_SET);
}

	return;
 8002c2c:	e014      	b.n	8002c58 <write_DAC+0x88>
	else if(dac == 2){
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d111      	bne.n	8002c58 <write_DAC+0x88>
		HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_RESET);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2101      	movs	r1, #1
 8002c38:	480a      	ldr	r0, [pc, #40]	@ (8002c64 <write_DAC+0x94>)
 8002c3a:	f004 f94d 	bl	8006ed8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, DAC_tx_buff, 3, 100);
 8002c3e:	f107 010c 	add.w	r1, r7, #12
 8002c42:	2364      	movs	r3, #100	@ 0x64
 8002c44:	2203      	movs	r2, #3
 8002c46:	4806      	ldr	r0, [pc, #24]	@ (8002c60 <write_DAC+0x90>)
 8002c48:	f006 f9ab 	bl	8008fa2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin, GPIO_PIN_SET);
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4804      	ldr	r0, [pc, #16]	@ (8002c64 <write_DAC+0x94>)
 8002c52:	f004 f941 	bl	8006ed8 <HAL_GPIO_WritePin>
	return;
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
}
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000134 	.word	0x20000134
 8002c64:	48000400 	.word	0x48000400

08002c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c6c:	f002 fa2b 	bl	80050c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c70:	f000 f922 	bl	8002eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c74:	f000 faba 	bl	80031ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002c78:	f000 fa92 	bl	80031a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c7c:	f000 fa60 	bl	8003140 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002c80:	f000 fa20 	bl	80030c4 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002c84:	f000 f9de 	bl	8003044 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002c88:	f000 f978 	bl	8002f7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	// ADC change polarity SPI for DAC's
	ADC_change_polarity();
 8002c8c:	f7fe f961 	bl	8000f52 <ADC_change_polarity>
	SPI1_change_polarity();
 8002c90:	f001 f9f8 	bl	8004084 <SPI1_change_polarity>
	check_ADC();
 8002c94:	f7fe f950 	bl	8000f38 <check_ADC>
	// disable internal reference DAC's
	write_DAC(DAC_1, CONFIG, 0x0100);
 8002c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c9c:	2103      	movs	r1, #3
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f7ff ff96 	bl	8002bd0 <write_DAC>
	write_DAC(DAC_2, CONFIG, 0x0100);
 8002ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ca8:	2103      	movs	r1, #3
 8002caa:	2002      	movs	r0, #2
 8002cac:	f7ff ff90 	bl	8002bd0 <write_DAC>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cb0:	f008 fd74 	bl	800b79c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutexSPI */
  mutexSPIHandle = osMutexNew(&mutexSPI_attributes);
 8002cb4:	484f      	ldr	r0, [pc, #316]	@ (8002df4 <main+0x18c>)
 8002cb6:	f008 feaa 	bl	800ba0e <osMutexNew>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8002df8 <main+0x190>)
 8002cbe:	6013      	str	r3, [r2, #0]

  /* creation of mutexPrint */
  mutexPrintHandle = osMutexNew(&mutexPrint_attributes);
 8002cc0:	484e      	ldr	r0, [pc, #312]	@ (8002dfc <main+0x194>)
 8002cc2:	f008 fea4 	bl	800ba0e <osMutexNew>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002e00 <main+0x198>)
 8002cca:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semV1 */
  semV1Handle = osSemaphoreNew(1, 0, &semV1_attributes);
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	@ (8002e04 <main+0x19c>)
 8002cce:	2100      	movs	r1, #0
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	f008 ffaa 	bl	800bc2a <osSemaphoreNew>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002e08 <main+0x1a0>)
 8002cda:	6013      	str	r3, [r2, #0]

  /* creation of semV2 */
  semV2Handle = osSemaphoreNew(1, 0, &semV2_attributes);
 8002cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8002e0c <main+0x1a4>)
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f008 ffa2 	bl	800bc2a <osSemaphoreNew>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a49      	ldr	r2, [pc, #292]	@ (8002e10 <main+0x1a8>)
 8002cea:	6013      	str	r3, [r2, #0]

  /* creation of semV3 */
  semV3Handle = osSemaphoreNew(1, 0, &semV3_attributes);
 8002cec:	4a49      	ldr	r2, [pc, #292]	@ (8002e14 <main+0x1ac>)
 8002cee:	2100      	movs	r1, #0
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f008 ff9a 	bl	800bc2a <osSemaphoreNew>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4a47      	ldr	r2, [pc, #284]	@ (8002e18 <main+0x1b0>)
 8002cfa:	6013      	str	r3, [r2, #0]

  /* creation of semV4 */
  semV4Handle = osSemaphoreNew(1, 0, &semV4_attributes);
 8002cfc:	4a47      	ldr	r2, [pc, #284]	@ (8002e1c <main+0x1b4>)
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2001      	movs	r0, #1
 8002d02:	f008 ff92 	bl	800bc2a <osSemaphoreNew>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a45      	ldr	r2, [pc, #276]	@ (8002e20 <main+0x1b8>)
 8002d0a:	6013      	str	r3, [r2, #0]

  /* creation of semTemp */
  semTempHandle = osSemaphoreNew(1, 0, &semTemp_attributes);
 8002d0c:	4a45      	ldr	r2, [pc, #276]	@ (8002e24 <main+0x1bc>)
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2001      	movs	r0, #1
 8002d12:	f008 ff8a 	bl	800bc2a <osSemaphoreNew>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4a43      	ldr	r2, [pc, #268]	@ (8002e28 <main+0x1c0>)
 8002d1a:	6013      	str	r3, [r2, #0]

  /* creation of semP1 */
  semP1Handle = osSemaphoreNew(1, 0, &semP1_attributes);
 8002d1c:	4a43      	ldr	r2, [pc, #268]	@ (8002e2c <main+0x1c4>)
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2001      	movs	r0, #1
 8002d22:	f008 ff82 	bl	800bc2a <osSemaphoreNew>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4a41      	ldr	r2, [pc, #260]	@ (8002e30 <main+0x1c8>)
 8002d2a:	6013      	str	r3, [r2, #0]

  /* creation of semVSIM */
  semVSIMHandle = osSemaphoreNew(1, 0, &semVSIM_attributes);
 8002d2c:	4a41      	ldr	r2, [pc, #260]	@ (8002e34 <main+0x1cc>)
 8002d2e:	2100      	movs	r1, #0
 8002d30:	2001      	movs	r0, #1
 8002d32:	f008 ff7a 	bl	800bc2a <osSemaphoreNew>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4a3f      	ldr	r2, [pc, #252]	@ (8002e38 <main+0x1d0>)
 8002d3a:	6013      	str	r3, [r2, #0]

  /* creation of semReturn */
  semReturnHandle = osSemaphoreNew(7, 7, &semReturn_attributes);
 8002d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e3c <main+0x1d4>)
 8002d3e:	2107      	movs	r1, #7
 8002d40:	2007      	movs	r0, #7
 8002d42:	f008 ff72 	bl	800bc2a <osSemaphoreNew>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4a3d      	ldr	r2, [pc, #244]	@ (8002e40 <main+0x1d8>)
 8002d4a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  queueHandle = osMessageQueueNew(20, sizeof(MSGQUEUE_OBJ_t), &queue_attributes);
 8002d4c:	4a3d      	ldr	r2, [pc, #244]	@ (8002e44 <main+0x1dc>)
 8002d4e:	2114      	movs	r1, #20
 8002d50:	2014      	movs	r0, #20
 8002d52:	f009 f889 	bl	800be68 <osMessageQueueNew>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a3b      	ldr	r2, [pc, #236]	@ (8002e48 <main+0x1e0>)
 8002d5a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CLI */
  CLIHandle = osThreadNew(StartCLI, NULL, &CLI_attributes);
 8002d5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e4c <main+0x1e4>)
 8002d5e:	2100      	movs	r1, #0
 8002d60:	483b      	ldr	r0, [pc, #236]	@ (8002e50 <main+0x1e8>)
 8002d62:	f008 fd7a 	bl	800b85a <osThreadNew>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4a3a      	ldr	r2, [pc, #232]	@ (8002e54 <main+0x1ec>)
 8002d6a:	6013      	str	r3, [r2, #0]

  /* creation of Temp */
  TempHandle = osThreadNew(StartTemp, NULL, &Temp_attributes);
 8002d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e58 <main+0x1f0>)
 8002d6e:	2100      	movs	r1, #0
 8002d70:	483a      	ldr	r0, [pc, #232]	@ (8002e5c <main+0x1f4>)
 8002d72:	f008 fd72 	bl	800b85a <osThreadNew>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a39      	ldr	r2, [pc, #228]	@ (8002e60 <main+0x1f8>)
 8002d7a:	6013      	str	r3, [r2, #0]

  /* creation of V1 */
  V1Handle = osThreadNew(StartV1, NULL, &V1_attributes);
 8002d7c:	4a39      	ldr	r2, [pc, #228]	@ (8002e64 <main+0x1fc>)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4839      	ldr	r0, [pc, #228]	@ (8002e68 <main+0x200>)
 8002d82:	f008 fd6a 	bl	800b85a <osThreadNew>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4a38      	ldr	r2, [pc, #224]	@ (8002e6c <main+0x204>)
 8002d8a:	6013      	str	r3, [r2, #0]

  /* creation of V2 */
  V2Handle = osThreadNew(StartV2, NULL, &V2_attributes);
 8002d8c:	4a38      	ldr	r2, [pc, #224]	@ (8002e70 <main+0x208>)
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4838      	ldr	r0, [pc, #224]	@ (8002e74 <main+0x20c>)
 8002d92:	f008 fd62 	bl	800b85a <osThreadNew>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4a37      	ldr	r2, [pc, #220]	@ (8002e78 <main+0x210>)
 8002d9a:	6013      	str	r3, [r2, #0]

  /* creation of V3 */
  V3Handle = osThreadNew(StarV3, NULL, &V3_attributes);
 8002d9c:	4a37      	ldr	r2, [pc, #220]	@ (8002e7c <main+0x214>)
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4837      	ldr	r0, [pc, #220]	@ (8002e80 <main+0x218>)
 8002da2:	f008 fd5a 	bl	800b85a <osThreadNew>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4a36      	ldr	r2, [pc, #216]	@ (8002e84 <main+0x21c>)
 8002daa:	6013      	str	r3, [r2, #0]

  /* creation of V4 */
  V4Handle = osThreadNew(StartV4, NULL, &V4_attributes);
 8002dac:	4a36      	ldr	r2, [pc, #216]	@ (8002e88 <main+0x220>)
 8002dae:	2100      	movs	r1, #0
 8002db0:	4836      	ldr	r0, [pc, #216]	@ (8002e8c <main+0x224>)
 8002db2:	f008 fd52 	bl	800b85a <osThreadNew>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a35      	ldr	r2, [pc, #212]	@ (8002e90 <main+0x228>)
 8002dba:	6013      	str	r3, [r2, #0]

  /* creation of P1 */
  P1Handle = osThreadNew(StartP1, NULL, &P1_attributes);
 8002dbc:	4a35      	ldr	r2, [pc, #212]	@ (8002e94 <main+0x22c>)
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4835      	ldr	r0, [pc, #212]	@ (8002e98 <main+0x230>)
 8002dc2:	f008 fd4a 	bl	800b85a <osThreadNew>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4a34      	ldr	r2, [pc, #208]	@ (8002e9c <main+0x234>)
 8002dca:	6013      	str	r3, [r2, #0]

  /* creation of VSIM */
  VSIMHandle = osThreadNew(StartVSIM, NULL, &VSIM_attributes);
 8002dcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <main+0x238>)
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4834      	ldr	r0, [pc, #208]	@ (8002ea4 <main+0x23c>)
 8002dd2:	f008 fd42 	bl	800b85a <osThreadNew>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a33      	ldr	r2, [pc, #204]	@ (8002ea8 <main+0x240>)
 8002dda:	6013      	str	r3, [r2, #0]

  /* creation of Print */
  PrintHandle = osThreadNew(StartPrint, NULL, &Print_attributes);
 8002ddc:	4a33      	ldr	r2, [pc, #204]	@ (8002eac <main+0x244>)
 8002dde:	2100      	movs	r1, #0
 8002de0:	4833      	ldr	r0, [pc, #204]	@ (8002eb0 <main+0x248>)
 8002de2:	f008 fd3a 	bl	800b85a <osThreadNew>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4a32      	ldr	r2, [pc, #200]	@ (8002eb4 <main+0x24c>)
 8002dea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002dec:	f008 fcfa 	bl	800b7e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <main+0x188>
 8002df4:	08010158 	.word	0x08010158
 8002df8:	200002d4 	.word	0x200002d4
 8002dfc:	08010168 	.word	0x08010168
 8002e00:	200002d8 	.word	0x200002d8
 8002e04:	08010178 	.word	0x08010178
 8002e08:	200002dc 	.word	0x200002dc
 8002e0c:	08010188 	.word	0x08010188
 8002e10:	200002e0 	.word	0x200002e0
 8002e14:	08010198 	.word	0x08010198
 8002e18:	200002e4 	.word	0x200002e4
 8002e1c:	080101a8 	.word	0x080101a8
 8002e20:	200002e8 	.word	0x200002e8
 8002e24:	080101b8 	.word	0x080101b8
 8002e28:	200002ec 	.word	0x200002ec
 8002e2c:	080101c8 	.word	0x080101c8
 8002e30:	200002f0 	.word	0x200002f0
 8002e34:	080101d8 	.word	0x080101d8
 8002e38:	200002f4 	.word	0x200002f4
 8002e3c:	080101e8 	.word	0x080101e8
 8002e40:	200002f8 	.word	0x200002f8
 8002e44:	080101f8 	.word	0x080101f8
 8002e48:	200004bc 	.word	0x200004bc
 8002e4c:	08010014 	.word	0x08010014
 8002e50:	0800415d 	.word	0x0800415d
 8002e54:	200002b0 	.word	0x200002b0
 8002e58:	08010038 	.word	0x08010038
 8002e5c:	080042b1 	.word	0x080042b1
 8002e60:	200002b4 	.word	0x200002b4
 8002e64:	0801005c 	.word	0x0801005c
 8002e68:	080043a9 	.word	0x080043a9
 8002e6c:	200002b8 	.word	0x200002b8
 8002e70:	08010080 	.word	0x08010080
 8002e74:	080043fd 	.word	0x080043fd
 8002e78:	200002bc 	.word	0x200002bc
 8002e7c:	080100a4 	.word	0x080100a4
 8002e80:	08004451 	.word	0x08004451
 8002e84:	200002c0 	.word	0x200002c0
 8002e88:	080100c8 	.word	0x080100c8
 8002e8c:	080044a5 	.word	0x080044a5
 8002e90:	200002c4 	.word	0x200002c4
 8002e94:	080100ec 	.word	0x080100ec
 8002e98:	080044f9 	.word	0x080044f9
 8002e9c:	200002c8 	.word	0x200002c8
 8002ea0:	08010110 	.word	0x08010110
 8002ea4:	08004615 	.word	0x08004615
 8002ea8:	200002cc 	.word	0x200002cc
 8002eac:	08010134 	.word	0x08010134
 8002eb0:	08004719 	.word	0x08004719
 8002eb4:	200002d0 	.word	0x200002d0

08002eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b096      	sub	sp, #88	@ 0x58
 8002ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	2244      	movs	r2, #68	@ 0x44
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f00c fb9e 	bl	800f608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ecc:	463b      	mov	r3, r7
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002eda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ede:	f004 fe05 	bl	8007aec <HAL_PWREx_ControlVoltageScaling>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002ee8:	f001 fe08 	bl	8004afc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002eec:	f004 fde0 	bl	8007ab0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ef0:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <SystemClock_Config+0xc0>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef6:	4a20      	ldr	r2, [pc, #128]	@ (8002f78 <SystemClock_Config+0xc0>)
 8002ef8:	f023 0318 	bic.w	r3, r3, #24
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002f00:	2314      	movs	r3, #20
 8002f02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f04:	2301      	movs	r3, #1
 8002f06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f10:	2360      	movs	r3, #96	@ 0x60
 8002f12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f14:	2302      	movs	r3, #2
 8002f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f20:	2328      	movs	r3, #40	@ 0x28
 8002f22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f24:	2307      	movs	r3, #7
 8002f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 fe2f 	bl	8007b98 <HAL_RCC_OscConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002f40:	f001 fddc 	bl	8004afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f44:	230f      	movs	r3, #15
 8002f46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f58:	463b      	mov	r3, r7
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f005 fa2f 	bl	80083c0 <HAL_RCC_ClockConfig>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002f68:	f001 fdc8 	bl	8004afc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002f6c:	f005 fe74 	bl	8008c58 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002f70:	bf00      	nop
 8002f72:	3758      	adds	r7, #88	@ 0x58
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000

08002f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f82:	463b      	mov	r3, r7
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
 8002f90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002f92:	4b29      	ldr	r3, [pc, #164]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002f94:	4a29      	ldr	r2, [pc, #164]	@ (800303c <MX_ADC1_Init+0xc0>)
 8002f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002f98:	4b27      	ldr	r3, [pc, #156]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f9e:	4b26      	ldr	r3, [pc, #152]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fa4:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002faa:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fb0:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002fb6:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fd0:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fd6:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002fea:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ff2:	4811      	ldr	r0, [pc, #68]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8002ff4:	f002 fab6 	bl	8005564 <HAL_ADC_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002ffe:	f001 fd7d 	bl	8004afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003002:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <MX_ADC1_Init+0xc4>)
 8003004:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003006:	2306      	movs	r3, #6
 8003008:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800300e:	237f      	movs	r3, #127	@ 0x7f
 8003010:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003012:	2304      	movs	r3, #4
 8003014:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800301a:	463b      	mov	r3, r7
 800301c:	4619      	mov	r1, r3
 800301e:	4806      	ldr	r0, [pc, #24]	@ (8003038 <MX_ADC1_Init+0xbc>)
 8003020:	f002 fd14 	bl	8005a4c <HAL_ADC_ConfigChannel>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800302a:	f001 fd67 	bl	8004afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000007c 	.word	0x2000007c
 800303c:	50040000 	.word	0x50040000
 8003040:	19200040 	.word	0x19200040

08003044 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <MX_I2C1_Init+0x74>)
 800304a:	4a1c      	ldr	r2, [pc, #112]	@ (80030bc <MX_I2C1_Init+0x78>)
 800304c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <MX_I2C1_Init+0x74>)
 8003050:	4a1b      	ldr	r2, [pc, #108]	@ (80030c0 <MX_I2C1_Init+0x7c>)
 8003052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003054:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <MX_I2C1_Init+0x74>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800305a:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <MX_I2C1_Init+0x74>)
 800305c:	2201      	movs	r2, #1
 800305e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003060:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <MX_I2C1_Init+0x74>)
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003066:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <MX_I2C1_Init+0x74>)
 8003068:	2200      	movs	r2, #0
 800306a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800306c:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <MX_I2C1_Init+0x74>)
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003072:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <MX_I2C1_Init+0x74>)
 8003074:	2200      	movs	r2, #0
 8003076:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003078:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <MX_I2C1_Init+0x74>)
 800307a:	2200      	movs	r2, #0
 800307c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800307e:	480e      	ldr	r0, [pc, #56]	@ (80030b8 <MX_I2C1_Init+0x74>)
 8003080:	f003 ff42 	bl	8006f08 <HAL_I2C_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800308a:	f001 fd37 	bl	8004afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800308e:	2100      	movs	r1, #0
 8003090:	4809      	ldr	r0, [pc, #36]	@ (80030b8 <MX_I2C1_Init+0x74>)
 8003092:	f004 fc75 	bl	8007980 <HAL_I2CEx_ConfigAnalogFilter>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800309c:	f001 fd2e 	bl	8004afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030a0:	2100      	movs	r1, #0
 80030a2:	4805      	ldr	r0, [pc, #20]	@ (80030b8 <MX_I2C1_Init+0x74>)
 80030a4:	f004 fcb7 	bl	8007a16 <HAL_I2CEx_ConfigDigitalFilter>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80030ae:	f001 fd25 	bl	8004afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200000e0 	.word	0x200000e0
 80030bc:	40005400 	.word	0x40005400
 80030c0:	10909cec 	.word	0x10909cec

080030c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <MX_SPI1_Init+0x74>)
 80030ca:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <MX_SPI1_Init+0x78>)
 80030cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003138 <MX_SPI1_Init+0x74>)
 80030d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030d6:	4b18      	ldr	r3, [pc, #96]	@ (8003138 <MX_SPI1_Init+0x74>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030dc:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <MX_SPI1_Init+0x74>)
 80030de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e4:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <MX_SPI1_Init+0x74>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <MX_SPI1_Init+0x74>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030f0:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <MX_SPI1_Init+0x74>)
 80030f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <MX_SPI1_Init+0x74>)
 80030fa:	2228      	movs	r2, #40	@ 0x28
 80030fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <MX_SPI1_Init+0x74>)
 8003100:	2200      	movs	r2, #0
 8003102:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003104:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <MX_SPI1_Init+0x74>)
 8003106:	2200      	movs	r2, #0
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310a:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <MX_SPI1_Init+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003110:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <MX_SPI1_Init+0x74>)
 8003112:	2207      	movs	r2, #7
 8003114:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <MX_SPI1_Init+0x74>)
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <MX_SPI1_Init+0x74>)
 800311e:	2208      	movs	r2, #8
 8003120:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003122:	4805      	ldr	r0, [pc, #20]	@ (8003138 <MX_SPI1_Init+0x74>)
 8003124:	f005 fe9a 	bl	8008e5c <HAL_SPI_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800312e:	f001 fce5 	bl	8004afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000134 	.word	0x20000134
 800313c:	40013000 	.word	0x40013000

08003140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003144:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 8003146:	4a15      	ldr	r2, [pc, #84]	@ (800319c <MX_USART2_UART_Init+0x5c>)
 8003148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800314a:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 800314c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003158:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 8003166:	220c      	movs	r2, #12
 8003168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003170:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003182:	4805      	ldr	r0, [pc, #20]	@ (8003198 <MX_USART2_UART_Init+0x58>)
 8003184:	f006 fffa 	bl	800a17c <HAL_UART_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800318e:	f001 fcb5 	bl	8004afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000198 	.word	0x20000198
 800319c:	40004400 	.word	0x40004400

080031a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <MX_DMA_Init+0x48>)
 80031a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031aa:	4a0f      	ldr	r2, [pc, #60]	@ (80031e8 <MX_DMA_Init+0x48>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80031b2:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <MX_DMA_Init+0x48>)
 80031b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2105      	movs	r1, #5
 80031c2:	2010      	movs	r0, #16
 80031c4:	f003 fa7e 	bl	80066c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80031c8:	2010      	movs	r0, #16
 80031ca:	f003 fa97 	bl	80066fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2105      	movs	r1, #5
 80031d2:	2011      	movs	r0, #17
 80031d4:	f003 fa76 	bl	80066c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80031d8:	2011      	movs	r0, #17
 80031da:	f003 fa8f 	bl	80066fc <HAL_NVIC_EnableIRQ>

}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000

080031ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f2:	f107 030c 	add.w	r3, r7, #12
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003202:	4b35      	ldr	r3, [pc, #212]	@ (80032d8 <MX_GPIO_Init+0xec>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	4a34      	ldr	r2, [pc, #208]	@ (80032d8 <MX_GPIO_Init+0xec>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800320e:	4b32      	ldr	r3, [pc, #200]	@ (80032d8 <MX_GPIO_Init+0xec>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	4b2f      	ldr	r3, [pc, #188]	@ (80032d8 <MX_GPIO_Init+0xec>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	4a2e      	ldr	r2, [pc, #184]	@ (80032d8 <MX_GPIO_Init+0xec>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003226:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <MX_GPIO_Init+0xec>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	4b29      	ldr	r3, [pc, #164]	@ (80032d8 <MX_GPIO_Init+0xec>)
 8003234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003236:	4a28      	ldr	r2, [pc, #160]	@ (80032d8 <MX_GPIO_Init+0xec>)
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800323e:	4b26      	ldr	r3, [pc, #152]	@ (80032d8 <MX_GPIO_Init+0xec>)
 8003240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin|DAC1_CS_Pin, GPIO_PIN_SET);
 800324a:	2201      	movs	r2, #1
 800324c:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8003250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003254:	f003 fe40 	bl	8006ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC2_CS_Pin|DAC2_DIV_Pin|DAC1_GAIN_Pin|DAC1_DIV_Pin
 8003258:	2201      	movs	r2, #1
 800325a:	219b      	movs	r1, #155	@ 0x9b
 800325c:	481f      	ldr	r0, [pc, #124]	@ (80032dc <MX_GPIO_Init+0xf0>)
 800325e:	f003 fe3b 	bl	8006ed8 <HAL_GPIO_WritePin>
                          |DAC2_GAIN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC1_LAC_Pin|DAC2_LAC_Pin, GPIO_PIN_RESET);
 8003262:	2200      	movs	r2, #0
 8003264:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8003268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800326c:	f003 fe34 	bl	8006ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAC1_RST_Pin|DAC2_RST_Pin, GPIO_PIN_RESET);
 8003270:	2200      	movs	r2, #0
 8003272:	2160      	movs	r1, #96	@ 0x60
 8003274:	4819      	ldr	r0, [pc, #100]	@ (80032dc <MX_GPIO_Init+0xf0>)
 8003276:	f003 fe2f 	bl	8006ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TempAlert_Pin */
  GPIO_InitStruct.Pin = TempAlert_Pin;
 800327a:	2308      	movs	r3, #8
 800327c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TempAlert_GPIO_Port, &GPIO_InitStruct);
 8003286:	f107 030c 	add.w	r3, r7, #12
 800328a:	4619      	mov	r1, r3
 800328c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003290:	f003 fcb8 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin DAC1_LAC_Pin DAC1_CS_Pin DAC2_LAC_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|DAC1_LAC_Pin|DAC1_CS_Pin|DAC2_LAC_Pin;
 8003294:	f641 1310 	movw	r3, #6416	@ 0x1910
 8003298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329a:	2301      	movs	r3, #1
 800329c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	4619      	mov	r1, r3
 80032ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032b0:	f003 fca8 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC2_CS_Pin DAC2_DIV_Pin DAC1_GAIN_Pin DAC1_DIV_Pin
                           DAC1_RST_Pin DAC2_RST_Pin DAC2_GAIN_Pin */
  GPIO_InitStruct.Pin = DAC2_CS_Pin|DAC2_DIV_Pin|DAC1_GAIN_Pin|DAC1_DIV_Pin
 80032b4:	23fb      	movs	r3, #251	@ 0xfb
 80032b6:	60fb      	str	r3, [r7, #12]
                          |DAC1_RST_Pin|DAC2_RST_Pin|DAC2_GAIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	4619      	mov	r1, r3
 80032ca:	4804      	ldr	r0, [pc, #16]	@ (80032dc <MX_GPIO_Init+0xf0>)
 80032cc:	f003 fc9a 	bl	8006c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032d0:	bf00      	nop
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40021000 	.word	0x40021000
 80032dc:	48000400 	.word	0x48000400

080032e0 <ADC_get_send>:

/* USER CODE BEGIN 4 */
// this function gets the value from the
void ADC_get_send(uint8_t setting, uint8_t channel, float dac, uint32_t tick){
 80032e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032e4:	b095      	sub	sp, #84	@ 0x54
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	ed87 0a02 	vstr	s0, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	460b      	mov	r3, r1
 80032f4:	73bb      	strb	r3, [r7, #14]
	MSGQUEUE_OBJ_t msg;

	if(setting == 0){
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d133      	bne.n	8003364 <ADC_get_send+0x84>
		uint8_t sel_ch[2] = {channel*2,channel*2+1};	// channel for both ADC of one voltammerty channel
 80032fc:	7bbb      	ldrb	r3, [r7, #14]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8003306:	7bbb      	ldrb	r3, [r7, #14]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		float volt[2];
		osMutexAcquire(mutexSPIHandle, osWaitForever);
 8003314:	4b88      	ldr	r3, [pc, #544]	@ (8003538 <ADC_get_send+0x258>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	4618      	mov	r0, r3
 800331e:	f008 fbfc 	bl	800bb1a <osMutexAcquire>
		ADC_mult(2,sel_ch,volt);	// two as first argument otherwise nothing is received
 8003322:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800332a:	4619      	mov	r1, r3
 800332c:	2002      	movs	r0, #2
 800332e:	f7fd fe25 	bl	8000f7c <ADC_mult>
		osMutexRelease(mutexSPIHandle);
 8003332:	4b81      	ldr	r3, [pc, #516]	@ (8003538 <ADC_get_send+0x258>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f008 fc3a 	bl	800bbb0 <osMutexRelease>
		// send data
		msg.channel = channel;
 800333c:	7bbb      	ldrb	r3, [r7, #14]
 800333e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		msg.tick = tick;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	63fb      	str	r3, [r7, #60]	@ 0x3c
		msg.val_x = dac;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	637b      	str	r3, [r7, #52]	@ 0x34
		msg.val = volt[0];
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
		msg.val_rf = volt[1];
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	63bb      	str	r3, [r7, #56]	@ 0x38
	    osMessageQueuePut(queueHandle, &msg, 0U, 0U);
 8003352:	4b7a      	ldr	r3, [pc, #488]	@ (800353c <ADC_get_send+0x25c>)
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800335a:	2300      	movs	r3, #0
 800335c:	2200      	movs	r2, #0
 800335e:	f008 fdf7 	bl	800bf50 <osMessageQueuePut>
			msg.val_rf = volt[i*2+1];
		    osMessageQueuePut(queueHandle, &msg, 0U, 0U);
		}
	}

	return;
 8003362:	e0e5      	b.n	8003530 <ADC_get_send+0x250>
	else{
 8003364:	466b      	mov	r3, sp
 8003366:	461e      	mov	r6, r3
		uint8_t cnt = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		uint8_t sel_ch[8] = {0,0,0,0,0,0,0,0};
 800336e:	4a74      	ldr	r2, [pc, #464]	@ (8003540 <ADC_get_send+0x260>)
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003378:	e883 0003 	stmia.w	r3, {r0, r1}
		uint8_t ch[8] = {0,0,0,0};
 800337c:	4a71      	ldr	r2, [pc, #452]	@ (8003544 <ADC_get_send+0x264>)
 800337e:	f107 0314 	add.w	r3, r7, #20
 8003382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003386:	6018      	str	r0, [r3, #0]
 8003388:	3304      	adds	r3, #4
 800338a:	7019      	strb	r1, [r3, #0]
 800338c:	f107 0319 	add.w	r3, r7, #25
 8003390:	2200      	movs	r2, #0
 8003392:	801a      	strh	r2, [r3, #0]
 8003394:	709a      	strb	r2, [r3, #2]
		for(uint8_t i=0;i<4;i++){
 8003396:	2300      	movs	r3, #0
 8003398:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800339c:	e032      	b.n	8003404 <ADC_get_send+0x124>
			if(channel&0x01){
 800339e:	7bbb      	ldrb	r3, [r7, #14]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d025      	beq.n	80033f4 <ADC_get_send+0x114>
				ch[cnt] = i;
 80033a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033ac:	3350      	adds	r3, #80	@ 0x50
 80033ae:	443b      	add	r3, r7
 80033b0:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80033b4:	f803 2c3c 	strb.w	r2, [r3, #-60]
				sel_ch[cnt*2] = i*2;		// two ADC for one voltammerty channel. Thus, 8 channels
 80033b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80033c2:	0052      	lsls	r2, r2, #1
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	3350      	adds	r3, #80	@ 0x50
 80033c8:	443b      	add	r3, r7
 80033ca:	f803 2c34 	strb.w	r2, [r3, #-52]
				sel_ch[cnt*2+1] = i*2+1;
 80033ce:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	3301      	adds	r3, #1
 80033de:	3201      	adds	r2, #1
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	3350      	adds	r3, #80	@ 0x50
 80033e4:	443b      	add	r3, r7
 80033e6:	f803 2c34 	strb.w	r2, [r3, #-52]
				cnt += 1;
 80033ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033ee:	3301      	adds	r3, #1
 80033f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			channel = channel>>1;
 80033f4:	7bbb      	ldrb	r3, [r7, #14]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	73bb      	strb	r3, [r7, #14]
		for(uint8_t i=0;i<4;i++){
 80033fa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80033fe:	3301      	adds	r3, #1
 8003400:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8003404:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003408:	2b03      	cmp	r3, #3
 800340a:	d9c8      	bls.n	800339e <ADC_get_send+0xbe>
		float volt[cnt*2];
 800340c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003410:	0059      	lsls	r1, r3, #1
 8003412:	1e4b      	subs	r3, r1, #1
 8003414:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003416:	460a      	mov	r2, r1
 8003418:	2300      	movs	r3, #0
 800341a:	4690      	mov	r8, r2
 800341c:	4699      	mov	r9, r3
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800342a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800342e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003432:	460a      	mov	r2, r1
 8003434:	2300      	movs	r3, #0
 8003436:	4614      	mov	r4, r2
 8003438:	461d      	mov	r5, r3
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	016b      	lsls	r3, r5, #5
 8003444:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003448:	0162      	lsls	r2, r4, #5
 800344a:	460b      	mov	r3, r1
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3307      	adds	r3, #7
 8003450:	08db      	lsrs	r3, r3, #3
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	ebad 0d03 	sub.w	sp, sp, r3
 8003458:	466b      	mov	r3, sp
 800345a:	3303      	adds	r3, #3
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	647b      	str	r3, [r7, #68]	@ 0x44
		osMutexAcquire(mutexSPIHandle, osWaitForever);
 8003462:	4b35      	ldr	r3, [pc, #212]	@ (8003538 <ADC_get_send+0x258>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f04f 31ff 	mov.w	r1, #4294967295
 800346a:	4618      	mov	r0, r3
 800346c:	f008 fb55 	bl	800bb1a <osMutexAcquire>
		ADC_mult(cnt*2,sel_ch,volt);
 8003470:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f107 011c 	add.w	r1, r7, #28
 800347c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fd7c 	bl	8000f7c <ADC_mult>
		osMutexRelease(mutexSPIHandle);
 8003484:	4b2c      	ldr	r3, [pc, #176]	@ (8003538 <ADC_get_send+0x258>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f008 fb91 	bl	800bbb0 <osMutexRelease>
		for(uint8_t i=0;i<cnt;i++){
 800348e:	2300      	movs	r3, #0
 8003490:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003494:	e044      	b.n	8003520 <ADC_get_send+0x240>
			switch(ch[i]){
 8003496:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800349a:	3350      	adds	r3, #80	@ 0x50
 800349c:	443b      	add	r3, r7
 800349e:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d81a      	bhi.n	80034dc <ADC_get_send+0x1fc>
 80034a6:	a201      	add	r2, pc, #4	@ (adr r2, 80034ac <ADC_get_send+0x1cc>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	080034bd 	.word	0x080034bd
 80034b0:	080034c5 	.word	0x080034c5
 80034b4:	080034cd 	.word	0x080034cd
 80034b8:	080034d5 	.word	0x080034d5
					msg.channel = V1;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
					break;
 80034c2:	e00b      	b.n	80034dc <ADC_get_send+0x1fc>
					msg.channel = V2;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
					break;
 80034ca:	e007      	b.n	80034dc <ADC_get_send+0x1fc>
					msg.channel = V3;
 80034cc:	2302      	movs	r3, #2
 80034ce:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
					break;
 80034d2:	e003      	b.n	80034dc <ADC_get_send+0x1fc>
					msg.channel = V4;
 80034d4:	2303      	movs	r3, #3
 80034d6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
					break;
 80034da:	bf00      	nop
			msg.tick = tick;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	63fb      	str	r3, [r7, #60]	@ 0x3c
			msg.val_x = dac;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	637b      	str	r3, [r7, #52]	@ 0x34
			msg.val = volt[i*2];
 80034e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
			msg.val_rf = volt[i*2+1];
 80034f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	3301      	adds	r3, #1
 80034fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
		    osMessageQueuePut(queueHandle, &msg, 0U, 0U);
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <ADC_get_send+0x25c>)
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800350e:	2300      	movs	r3, #0
 8003510:	2200      	movs	r2, #0
 8003512:	f008 fd1d 	bl	800bf50 <osMessageQueuePut>
		for(uint8_t i=0;i<cnt;i++){
 8003516:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800351a:	3301      	adds	r3, #1
 800351c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003520:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003524:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003528:	429a      	cmp	r2, r3
 800352a:	d3b4      	bcc.n	8003496 <ADC_get_send+0x1b6>
 800352c:	46b5      	mov	sp, r6
	return;
 800352e:	bf00      	nop
}
 8003530:	3754      	adds	r7, #84	@ 0x54
 8003532:	46bd      	mov	sp, r7
 8003534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003538:	200002d4 	.word	0x200002d4
 800353c:	200004bc 	.word	0x200004bc
 8003540:	0800ffac 	.word	0x0800ffac
 8003544:	0800ffb4 	.word	0x0800ffb4

08003548 <DAC_set>:

void DAC_set(uint8_t setting, uint8_t channel, float voltage){
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	460a      	mov	r2, r1
 8003552:	ed87 0a00 	vstr	s0, [r7]
 8003556:	71fb      	strb	r3, [r7, #7]
 8003558:	4613      	mov	r3, r2
 800355a:	71bb      	strb	r3, [r7, #6]
	uint8_t dac = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
	uint16_t result = (uint16_t)(voltage/33.0*655360.0);
 8003560:	6838      	ldr	r0, [r7, #0]
 8003562:	f7fc ff99 	bl	8000498 <__aeabi_f2d>
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	4b35      	ldr	r3, [pc, #212]	@ (8003640 <DAC_set+0xf8>)
 800356c:	f7fd f916 	bl	800079c <__aeabi_ddiv>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <DAC_set+0xfc>)
 800357e:	f7fc ffe3 	bl	8000548 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f7fd fa8d 	bl	8000aa8 <__aeabi_d2uiz>
 800358e:	4603      	mov	r3, r0
 8003590:	81bb      	strh	r3, [r7, #12]

	if(setting == 0){
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d120      	bne.n	80035da <DAC_set+0x92>
		if(channel > CH3){
 8003598:	79bb      	ldrb	r3, [r7, #6]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d905      	bls.n	80035aa <DAC_set+0x62>
			channel -= 4;
 800359e:	79bb      	ldrb	r3, [r7, #6]
 80035a0:	3b04      	subs	r3, #4
 80035a2:	71bb      	strb	r3, [r7, #6]
			dac = DAC_2;
 80035a4:	2302      	movs	r3, #2
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e001      	b.n	80035ae <DAC_set+0x66>
		}
		else{
			dac = DAC_1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
		}
		uint8_t reg = channel + 8;
 80035ae:	79bb      	ldrb	r3, [r7, #6]
 80035b0:	3308      	adds	r3, #8
 80035b2:	72fb      	strb	r3, [r7, #11]

		osMutexAcquire(mutexSPIHandle, osWaitForever);
 80035b4:	4b24      	ldr	r3, [pc, #144]	@ (8003648 <DAC_set+0x100>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f04f 31ff 	mov.w	r1, #4294967295
 80035bc:	4618      	mov	r0, r3
 80035be:	f008 faac 	bl	800bb1a <osMutexAcquire>
		write_DAC(dac, reg, result);
 80035c2:	89ba      	ldrh	r2, [r7, #12]
 80035c4:	7af9      	ldrb	r1, [r7, #11]
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fb01 	bl	8002bd0 <write_DAC>
		osMutexRelease(mutexSPIHandle);
 80035ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003648 <DAC_set+0x100>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f008 faec 	bl	800bbb0 <osMutexRelease>
		write_DAC(DAC_1, BRDCAST, result);
		write_DAC(DAC_2, BRDCAST, result);
		osMutexRelease(mutexSPIHandle);
	}

	return;
 80035d8:	e02d      	b.n	8003636 <DAC_set+0xee>
	else if(setting == 1){
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d12a      	bne.n	8003636 <DAC_set+0xee>
		osMutexAcquire(mutexSPIHandle, osWaitForever);
 80035e0:	4b19      	ldr	r3, [pc, #100]	@ (8003648 <DAC_set+0x100>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295
 80035e8:	4618      	mov	r0, r3
 80035ea:	f008 fa96 	bl	800bb1a <osMutexAcquire>
		write_DAC(DAC_1, SYNC, (channel<<8));
 80035ee:	79bb      	ldrb	r3, [r7, #6]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	2102      	movs	r1, #2
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff fae8 	bl	8002bd0 <write_DAC>
		write_DAC(DAC_2, SYNC, (channel<<4));
 8003600:	79bb      	ldrb	r3, [r7, #6]
 8003602:	b29b      	uxth	r3, r3
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	b29b      	uxth	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	2102      	movs	r1, #2
 800360c:	2002      	movs	r0, #2
 800360e:	f7ff fadf 	bl	8002bd0 <write_DAC>
		write_DAC(DAC_1, BRDCAST, result);
 8003612:	89bb      	ldrh	r3, [r7, #12]
 8003614:	461a      	mov	r2, r3
 8003616:	2106      	movs	r1, #6
 8003618:	2001      	movs	r0, #1
 800361a:	f7ff fad9 	bl	8002bd0 <write_DAC>
		write_DAC(DAC_2, BRDCAST, result);
 800361e:	89bb      	ldrh	r3, [r7, #12]
 8003620:	461a      	mov	r2, r3
 8003622:	2106      	movs	r1, #6
 8003624:	2002      	movs	r0, #2
 8003626:	f7ff fad3 	bl	8002bd0 <write_DAC>
		osMutexRelease(mutexSPIHandle);
 800362a:	4b07      	ldr	r3, [pc, #28]	@ (8003648 <DAC_set+0x100>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f008 fabe 	bl	800bbb0 <osMutexRelease>
	return;
 8003634:	bf00      	nop
 8003636:	bf00      	nop
}
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40408000 	.word	0x40408000
 8003644:	41240000 	.word	0x41240000
 8003648:	200002d4 	.word	0x200002d4

0800364c <voltammerty>:

void voltammerty(uint8_t channel, uint8_t set, uint8_t DAC_Vin, uint8_t DAC_Vw){
 800364c:	b5b0      	push	{r4, r5, r7, lr}
 800364e:	ed2d 8b02 	vpush	{d8}
 8003652:	b09a      	sub	sp, #104	@ 0x68
 8003654:	af00      	add	r7, sp, #0
 8003656:	4604      	mov	r4, r0
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	461a      	mov	r2, r3
 800365e:	4623      	mov	r3, r4
 8003660:	71fb      	strb	r3, [r7, #7]
 8003662:	4603      	mov	r3, r0
 8003664:	71bb      	strb	r3, [r7, #6]
 8003666:	460b      	mov	r3, r1
 8003668:	717b      	strb	r3, [r7, #5]
 800366a:	4613      	mov	r3, r2
 800366c:	713b      	strb	r3, [r7, #4]
	// get only one channel
	uint8_t chnnl = channel;
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(set == SIM){
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d11d      	bne.n	80036b6 <voltammerty+0x6a>
		uint8_t ch = channel;
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		for(uint8_t i=0;i<4;i++){
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003686:	e012      	b.n	80036ae <voltammerty+0x62>
			if(ch&0x01){
 8003688:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <voltammerty+0x4e>
				channel = i;
 8003694:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003698:	71fb      	strb	r3, [r7, #7]
			}
			ch = ch>>1;
 800369a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		for(uint8_t i=0;i<4;i++){
 80036a4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80036a8:	3301      	adds	r3, #1
 80036aa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80036ae:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d9e8      	bls.n	8003688 <voltammerty+0x3c>
		}
	}
	float E = 0;
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	663b      	str	r3, [r7, #96]	@ 0x60
	float vin = 0;
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t equilibration = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	uint32_t tick;
	uint32_t wait;
	uint32_t start_tick = osKernelGetTickCount();
 80036c8:	f008 f8b2 	bl	800b830 <osKernelGetTickCount>
 80036cc:	6438      	str	r0, [r7, #64]	@ 0x40
	switch(channels.parameters[channel].technique){
 80036ce:	79fa      	ldrb	r2, [r7, #7]
 80036d0:	49bf      	ldr	r1, [pc, #764]	@ (80039d0 <voltammerty+0x384>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	440b      	add	r3, r1
 80036dc:	3305      	adds	r3, #5
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	f000 834a 	beq.w	8003d7a <voltammerty+0x72e>
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	f300 84c0 	bgt.w	800406c <voltammerty+0xa20>
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d004      	beq.n	80036fa <voltammerty+0xae>
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	f000 81c1 	beq.w	8003a78 <voltammerty+0x42c>
			DAC_set(set, DAC_Vw, E);
			DAC_set(set, DAC_Vin, 0.0);
			equilibration = 0;
			break;
	}
	return;
 80036f6:	f000 bcb9 	b.w	800406c <voltammerty+0xa20>
			if(channels.parameters[channel].cv.E_vertex_1 < 0.0){
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	49b4      	ldr	r1, [pc, #720]	@ (80039d0 <voltammerty+0x384>)
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	440b      	add	r3, r1
 8003708:	3310      	adds	r3, #16
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	d57e      	bpl.n	8003816 <voltammerty+0x1ca>
				if(channels.parameters[channel].cv.E_begin >= 0.0){
 8003718:	79fa      	ldrb	r2, [r7, #7]
 800371a:	49ad      	ldr	r1, [pc, #692]	@ (80039d0 <voltammerty+0x384>)
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	440b      	add	r3, r1
 8003726:	330c      	adds	r3, #12
 8003728:	edd3 7a00 	vldr	s15, [r3]
 800372c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003734:	db2e      	blt.n	8003794 <voltammerty+0x148>
					E = channels.parameters[channel].cv.E_begin + channels.parameters[channel].cv.E_vertex_1*-2.0;
 8003736:	79fa      	ldrb	r2, [r7, #7]
 8003738:	49a5      	ldr	r1, [pc, #660]	@ (80039d0 <voltammerty+0x384>)
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	440b      	add	r3, r1
 8003744:	330c      	adds	r3, #12
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fc fea5 	bl	8000498 <__aeabi_f2d>
 800374e:	4604      	mov	r4, r0
 8003750:	460d      	mov	r5, r1
 8003752:	79fa      	ldrb	r2, [r7, #7]
 8003754:	499e      	ldr	r1, [pc, #632]	@ (80039d0 <voltammerty+0x384>)
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	440b      	add	r3, r1
 8003760:	3310      	adds	r3, #16
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc fe97 	bl	8000498 <__aeabi_f2d>
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8003772:	f7fc fee9 	bl	8000548 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4620      	mov	r0, r4
 800377c:	4629      	mov	r1, r5
 800377e:	f7fc fd2d 	bl	80001dc <__adddf3>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	f7fd f9ad 	bl	8000ae8 <__aeabi_d2f>
 800378e:	4603      	mov	r3, r0
 8003790:	663b      	str	r3, [r7, #96]	@ 0x60
 8003792:	e02f      	b.n	80037f4 <voltammerty+0x1a8>
					E = channels.parameters[channel].cv.E_vertex_1*-2.0 - channels.parameters[channel].cv.E_begin*-1.0;
 8003794:	79fa      	ldrb	r2, [r7, #7]
 8003796:	498e      	ldr	r1, [pc, #568]	@ (80039d0 <voltammerty+0x384>)
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	440b      	add	r3, r1
 80037a2:	3310      	adds	r3, #16
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fe76 	bl	8000498 <__aeabi_f2d>
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80037b4:	f7fc fec8 	bl	8000548 <__aeabi_dmul>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	79fa      	ldrb	r2, [r7, #7]
 80037c2:	4983      	ldr	r1, [pc, #524]	@ (80039d0 <voltammerty+0x384>)
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	440b      	add	r3, r1
 80037ce:	330c      	adds	r3, #12
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc fe60 	bl	8000498 <__aeabi_f2d>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4620      	mov	r0, r4
 80037de:	4629      	mov	r1, r5
 80037e0:	f7fc fcfc 	bl	80001dc <__adddf3>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd f97c 	bl	8000ae8 <__aeabi_d2f>
 80037f0:	4603      	mov	r3, r0
 80037f2:	663b      	str	r3, [r7, #96]	@ 0x60
				vin = channels.parameters[channel].cv.E_vertex_1*-2.0;
 80037f4:	79fa      	ldrb	r2, [r7, #7]
 80037f6:	4976      	ldr	r1, [pc, #472]	@ (80039d0 <voltammerty+0x384>)
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	440b      	add	r3, r1
 8003802:	3310      	adds	r3, #16
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800380c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003810:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003814:	e005      	b.n	8003822 <voltammerty+0x1d6>
				E = 0.0;
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	663b      	str	r3, [r7, #96]	@ 0x60
				vin = 0.0;
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	65fb      	str	r3, [r7, #92]	@ 0x5c
			DAC_set(set, DAC_Vw, 0.0);
 8003822:	793a      	ldrb	r2, [r7, #4]
 8003824:	79bb      	ldrb	r3, [r7, #6]
 8003826:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 80039d4 <voltammerty+0x388>
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fe8b 	bl	8003548 <DAC_set>
			DAC_set(set, DAC_Vin, 0.0);
 8003832:	797a      	ldrb	r2, [r7, #5]
 8003834:	79bb      	ldrb	r3, [r7, #6]
 8003836:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 80039d4 <voltammerty+0x388>
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fe83 	bl	8003548 <DAC_set>
			float rate = channels.parameters[channel].cv.E_step/channels.parameters[channel].cv.scan_rate*1000;
 8003842:	79fa      	ldrb	r2, [r7, #7]
 8003844:	4962      	ldr	r1, [pc, #392]	@ (80039d0 <voltammerty+0x384>)
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	440b      	add	r3, r1
 8003850:	3318      	adds	r3, #24
 8003852:	edd3 6a00 	vldr	s13, [r3]
 8003856:	79fa      	ldrb	r2, [r7, #7]
 8003858:	495d      	ldr	r1, [pc, #372]	@ (80039d0 <voltammerty+0x384>)
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	440b      	add	r3, r1
 8003864:	331c      	adds	r3, #28
 8003866:	ed93 7a00 	vldr	s14, [r3]
 800386a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80039d8 <voltammerty+0x38c>
 8003872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003876:	edc7 7a07 	vstr	s15, [r7, #28]
			float rise = (channels.parameters[channel].cv.E_vertex_2 - channels.parameters[channel].cv.E_begin)/channels.parameters[channel].cv.E_step;
 800387a:	79fa      	ldrb	r2, [r7, #7]
 800387c:	4954      	ldr	r1, [pc, #336]	@ (80039d0 <voltammerty+0x384>)
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	440b      	add	r3, r1
 8003888:	3314      	adds	r3, #20
 800388a:	ed93 7a00 	vldr	s14, [r3]
 800388e:	79fa      	ldrb	r2, [r7, #7]
 8003890:	494f      	ldr	r1, [pc, #316]	@ (80039d0 <voltammerty+0x384>)
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	440b      	add	r3, r1
 800389c:	330c      	adds	r3, #12
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80038a6:	79fa      	ldrb	r2, [r7, #7]
 80038a8:	4949      	ldr	r1, [pc, #292]	@ (80039d0 <voltammerty+0x384>)
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	440b      	add	r3, r1
 80038b4:	3318      	adds	r3, #24
 80038b6:	ed93 7a00 	vldr	s14, [r3]
 80038ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038be:	edc7 7a06 	vstr	s15, [r7, #24]
			uint32_t end_loop_rise = (uint32_t)rise;
 80038c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80038c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ca:	ee17 3a90 	vmov	r3, s15
 80038ce:	617b      	str	r3, [r7, #20]
			float fall = (channels.parameters[channel].cv.E_vertex_2 - channels.parameters[channel].cv.E_vertex_1)/channels.parameters[channel].cv.E_step;
 80038d0:	79fa      	ldrb	r2, [r7, #7]
 80038d2:	493f      	ldr	r1, [pc, #252]	@ (80039d0 <voltammerty+0x384>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	440b      	add	r3, r1
 80038de:	3314      	adds	r3, #20
 80038e0:	ed93 7a00 	vldr	s14, [r3]
 80038e4:	79fa      	ldrb	r2, [r7, #7]
 80038e6:	493a      	ldr	r1, [pc, #232]	@ (80039d0 <voltammerty+0x384>)
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	440b      	add	r3, r1
 80038f2:	3310      	adds	r3, #16
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80038fc:	79fa      	ldrb	r2, [r7, #7]
 80038fe:	4934      	ldr	r1, [pc, #208]	@ (80039d0 <voltammerty+0x384>)
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	440b      	add	r3, r1
 800390a:	3318      	adds	r3, #24
 800390c:	ed93 7a00 	vldr	s14, [r3]
 8003910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003914:	edc7 7a04 	vstr	s15, [r7, #16]
			uint32_t end_loop_fall = (uint32_t)fall;
 8003918:	edd7 7a04 	vldr	s15, [r7, #16]
 800391c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	60fb      	str	r3, [r7, #12]
			osDelay(channels.parameters[channel].cv.t_equilibration*1000);
 8003926:	79fa      	ldrb	r2, [r7, #7]
 8003928:	4929      	ldr	r1, [pc, #164]	@ (80039d0 <voltammerty+0x384>)
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	440b      	add	r3, r1
 8003934:	3308      	adds	r3, #8
 8003936:	edd3 7a00 	vldr	s15, [r3]
 800393a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80039d8 <voltammerty+0x38c>
 800393e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003946:	ee17 0a90 	vmov	r0, s15
 800394a:	f008 f818 	bl	800b97e <osDelay>
			for(uint32_t i=0;i<end_loop_rise;i++){
 800394e:	2300      	movs	r3, #0
 8003950:	657b      	str	r3, [r7, #84]	@ 0x54
 8003952:	e035      	b.n	80039c0 <voltammerty+0x374>
				E = E + channels.parameters[channel].cv.E_step;
 8003954:	79fa      	ldrb	r2, [r7, #7]
 8003956:	491e      	ldr	r1, [pc, #120]	@ (80039d0 <voltammerty+0x384>)
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	440b      	add	r3, r1
 8003962:	3318      	adds	r3, #24
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				DAC_set(set, DAC_Vw, E);
 8003974:	793a      	ldrb	r2, [r7, #4]
 8003976:	79bb      	ldrb	r3, [r7, #6]
 8003978:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fde2 	bl	8003548 <DAC_set>
				osDelay(rate);
 8003984:	edd7 7a07 	vldr	s15, [r7, #28]
 8003988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800398c:	ee17 0a90 	vmov	r0, s15
 8003990:	f007 fff5 	bl	800b97e <osDelay>
				ADC_get_send(set, chnnl,(E-vin), (osKernelGetTickCount()-start_tick));
 8003994:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003998:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800399c:	ee37 8a67 	vsub.f32	s16, s14, s15
 80039a0:	f007 ff46 	bl	800b830 <osKernelGetTickCount>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a8:	1ad2      	subs	r2, r2, r3
 80039aa:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80039ae:	79bb      	ldrb	r3, [r7, #6]
 80039b0:	eeb0 0a48 	vmov.f32	s0, s16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fc93 	bl	80032e0 <ADC_get_send>
			for(uint32_t i=0;i<end_loop_rise;i++){
 80039ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039bc:	3301      	adds	r3, #1
 80039be:	657b      	str	r3, [r7, #84]	@ 0x54
 80039c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d3c5      	bcc.n	8003954 <voltammerty+0x308>
			for(uint32_t i=0;i<end_loop_fall;i++){
 80039c8:	2300      	movs	r3, #0
 80039ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80039cc:	e03c      	b.n	8003a48 <voltammerty+0x3fc>
 80039ce:	bf00      	nop
 80039d0:	2000036c 	.word	0x2000036c
 80039d4:	00000000 	.word	0x00000000
 80039d8:	447a0000 	.word	0x447a0000
				E = E - channels.parameters[channel].cv.E_step;
 80039dc:	79fa      	ldrb	r2, [r7, #7]
 80039de:	497c      	ldr	r1, [pc, #496]	@ (8003bd0 <voltammerty+0x584>)
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	440b      	add	r3, r1
 80039ea:	3318      	adds	r3, #24
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80039f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				DAC_set(set, DAC_Vw, E);
 80039fc:	793a      	ldrb	r2, [r7, #4]
 80039fe:	79bb      	ldrb	r3, [r7, #6]
 8003a00:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fd9e 	bl	8003548 <DAC_set>
				osDelay(rate);
 8003a0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a14:	ee17 0a90 	vmov	r0, s15
 8003a18:	f007 ffb1 	bl	800b97e <osDelay>
				ADC_get_send(set, chnnl, (E-vin), (osKernelGetTickCount()-start_tick));
 8003a1c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003a20:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003a24:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003a28:	f007 ff02 	bl	800b830 <osKernelGetTickCount>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a30:	1ad2      	subs	r2, r2, r3
 8003a32:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8003a36:	79bb      	ldrb	r3, [r7, #6]
 8003a38:	eeb0 0a48 	vmov.f32	s0, s16
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fc4f 	bl	80032e0 <ADC_get_send>
			for(uint32_t i=0;i<end_loop_fall;i++){
 8003a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a44:	3301      	adds	r3, #1
 8003a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d3c5      	bcc.n	80039dc <voltammerty+0x390>
			E = 0;
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	663b      	str	r3, [r7, #96]	@ 0x60
			DAC_set(set, DAC_Vw, E);
 8003a56:	793a      	ldrb	r2, [r7, #4]
 8003a58:	79bb      	ldrb	r3, [r7, #6]
 8003a5a:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fd71 	bl	8003548 <DAC_set>
			DAC_set(set, DAC_Vin, 0.0);
 8003a66:	797a      	ldrb	r2, [r7, #5]
 8003a68:	79bb      	ldrb	r3, [r7, #6]
 8003a6a:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8003bd4 <voltammerty+0x588>
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fd69 	bl	8003548 <DAC_set>
			break;
 8003a76:	e2f8      	b.n	800406a <voltammerty+0xa1e>
			if(channels.parameters[channel].dpv.E_begin < 0.0){
 8003a78:	79fa      	ldrb	r2, [r7, #7]
 8003a7a:	4955      	ldr	r1, [pc, #340]	@ (8003bd0 <voltammerty+0x584>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	440b      	add	r3, r1
 8003a86:	3324      	adds	r3, #36	@ 0x24
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	d529      	bpl.n	8003aea <voltammerty+0x49e>
				E = channels.parameters[channel].dpv.E_begin*-1.0;
 8003a96:	79fa      	ldrb	r2, [r7, #7]
 8003a98:	494d      	ldr	r1, [pc, #308]	@ (8003bd0 <voltammerty+0x584>)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3324      	adds	r3, #36	@ 0x24
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fc fcf5 	bl	8000498 <__aeabi_f2d>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f7fd f817 	bl	8000ae8 <__aeabi_d2f>
 8003aba:	4603      	mov	r3, r0
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef1 7a67 	vneg.f32	s15, s15
 8003ac4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				vin = channels.parameters[channel].dpv.E_begin*-2.0;
 8003ac8:	79fa      	ldrb	r2, [r7, #7]
 8003aca:	4941      	ldr	r1, [pc, #260]	@ (8003bd0 <voltammerty+0x584>)
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3324      	adds	r3, #36	@ 0x24
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ae4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003ae8:	e00c      	b.n	8003b04 <voltammerty+0x4b8>
				E = channels.parameters[channel].dpv.E_begin;
 8003aea:	79fa      	ldrb	r2, [r7, #7]
 8003aec:	4938      	ldr	r1, [pc, #224]	@ (8003bd0 <voltammerty+0x584>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	440b      	add	r3, r1
 8003af8:	3324      	adds	r3, #36	@ 0x24
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	663b      	str	r3, [r7, #96]	@ 0x60
				vin = 0.0;
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
			DAC_set(set, DAC_Vw, E);
 8003b04:	793a      	ldrb	r2, [r7, #4]
 8003b06:	79bb      	ldrb	r3, [r7, #6]
 8003b08:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fd1a 	bl	8003548 <DAC_set>
			DAC_set(set, DAC_Vin, vin);
 8003b14:	797a      	ldrb	r2, [r7, #5]
 8003b16:	79bb      	ldrb	r3, [r7, #6]
 8003b18:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fd12 	bl	8003548 <DAC_set>
			float t_low = (channels.parameters[channel].dpv.E_step/channels.parameters[channel].dpv.Scan_rate - channels.parameters[channel].dpv.t_pulse) * 1000;
 8003b24:	79fa      	ldrb	r2, [r7, #7]
 8003b26:	492a      	ldr	r1, [pc, #168]	@ (8003bd0 <voltammerty+0x584>)
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	440b      	add	r3, r1
 8003b32:	332c      	adds	r3, #44	@ 0x2c
 8003b34:	edd3 6a00 	vldr	s13, [r3]
 8003b38:	79fa      	ldrb	r2, [r7, #7]
 8003b3a:	4925      	ldr	r1, [pc, #148]	@ (8003bd0 <voltammerty+0x584>)
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	440b      	add	r3, r1
 8003b46:	3338      	adds	r3, #56	@ 0x38
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b50:	79fa      	ldrb	r2, [r7, #7]
 8003b52:	491f      	ldr	r1, [pc, #124]	@ (8003bd0 <voltammerty+0x584>)
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3334      	adds	r3, #52	@ 0x34
 8003b60:	edd3 7a00 	vldr	s15, [r3]
 8003b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b68:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003bd8 <voltammerty+0x58c>
 8003b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b70:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			float end_DPV = (channels.parameters[channel].dpv.E_end-channels.parameters[channel].dpv.E_begin)/channels.parameters[channel].dpv.E_step;
 8003b74:	79fa      	ldrb	r2, [r7, #7]
 8003b76:	4916      	ldr	r1, [pc, #88]	@ (8003bd0 <voltammerty+0x584>)
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	440b      	add	r3, r1
 8003b82:	3328      	adds	r3, #40	@ 0x28
 8003b84:	ed93 7a00 	vldr	s14, [r3]
 8003b88:	79fa      	ldrb	r2, [r7, #7]
 8003b8a:	4911      	ldr	r1, [pc, #68]	@ (8003bd0 <voltammerty+0x584>)
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	440b      	add	r3, r1
 8003b96:	3324      	adds	r3, #36	@ 0x24
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003ba0:	79fa      	ldrb	r2, [r7, #7]
 8003ba2:	490b      	ldr	r1, [pc, #44]	@ (8003bd0 <voltammerty+0x584>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	440b      	add	r3, r1
 8003bae:	332c      	adds	r3, #44	@ 0x2c
 8003bb0:	ed93 7a00 	vldr	s14, [r3]
 8003bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bb8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			uint32_t end_loop_DPV = (uint32_t)end_DPV;
 8003bbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc4:	ee17 3a90 	vmov	r3, s15
 8003bc8:	623b      	str	r3, [r7, #32]
			for(uint32_t i=0;i<(end_loop_DPV+1);i++){
 8003bca:	2300      	movs	r3, #0
 8003bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bce:	e0b7      	b.n	8003d40 <voltammerty+0x6f4>
 8003bd0:	2000036c 	.word	0x2000036c
 8003bd4:	00000000 	.word	0x00000000
 8003bd8:	447a0000 	.word	0x447a0000
				if(equilibration == 0){
 8003bdc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d116      	bne.n	8003c12 <voltammerty+0x5c6>
					osDelay(channels.parameters[channel].dpv.t_equilibration*1000);
 8003be4:	79fa      	ldrb	r2, [r7, #7]
 8003be6:	49b2      	ldr	r1, [pc, #712]	@ (8003eb0 <voltammerty+0x864>)
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3320      	adds	r3, #32
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8003eb4 <voltammerty+0x868>
 8003bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c04:	ee17 0a90 	vmov	r0, s15
 8003c08:	f007 feb9 	bl	800b97e <osDelay>
					equilibration = 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				E = E + channels.parameters[channel].dpv.E_pulse;
 8003c12:	79fa      	ldrb	r2, [r7, #7]
 8003c14:	49a6      	ldr	r1, [pc, #664]	@ (8003eb0 <voltammerty+0x864>)
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	440b      	add	r3, r1
 8003c20:	3330      	adds	r3, #48	@ 0x30
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				DAC_set(set, DAC_Vw, E);
 8003c32:	793a      	ldrb	r2, [r7, #4]
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fc83 	bl	8003548 <DAC_set>
				osDelay(channels.parameters[channel].dpv.t_pulse*1000-1);
 8003c42:	79fa      	ldrb	r2, [r7, #7]
 8003c44:	499a      	ldr	r1, [pc, #616]	@ (8003eb0 <voltammerty+0x864>)
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	440b      	add	r3, r1
 8003c50:	3334      	adds	r3, #52	@ 0x34
 8003c52:	edd3 7a00 	vldr	s15, [r3]
 8003c56:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8003eb4 <voltammerty+0x868>
 8003c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6a:	ee17 0a90 	vmov	r0, s15
 8003c6e:	f007 fe86 	bl	800b97e <osDelay>
				tick = osKernelGetTickCount();
 8003c72:	f007 fddd 	bl	800b830 <osKernelGetTickCount>
 8003c76:	6338      	str	r0, [r7, #48]	@ 0x30
				wait = tick + 1;
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				ADC_get_send(set, chnnl, (E-vin), (tick-start_tick));
 8003c7e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003c82:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8003c94:	79bb      	ldrb	r3, [r7, #6]
 8003c96:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fb20 	bl	80032e0 <ADC_get_send>
				osDelayUntil(wait);
 8003ca0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ca2:	f007 fe87 	bl	800b9b4 <osDelayUntil>
				E = E - channels.parameters[channel].dpv.E_pulse + channels.parameters[channel].dpv.E_step;
 8003ca6:	79fa      	ldrb	r2, [r7, #7]
 8003ca8:	4981      	ldr	r1, [pc, #516]	@ (8003eb0 <voltammerty+0x864>)
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3330      	adds	r3, #48	@ 0x30
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003cbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cc2:	79fa      	ldrb	r2, [r7, #7]
 8003cc4:	497a      	ldr	r1, [pc, #488]	@ (8003eb0 <voltammerty+0x864>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	440b      	add	r3, r1
 8003cd0:	332c      	adds	r3, #44	@ 0x2c
 8003cd2:	edd3 7a00 	vldr	s15, [r3]
 8003cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cda:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				DAC_set(set, DAC_Vw, E);
 8003cde:	793a      	ldrb	r2, [r7, #4]
 8003ce0:	79bb      	ldrb	r3, [r7, #6]
 8003ce2:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fc2d 	bl	8003548 <DAC_set>
				osDelay(t_low-1);
 8003cee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfe:	ee17 0a90 	vmov	r0, s15
 8003d02:	f007 fe3c 	bl	800b97e <osDelay>
				tick = osKernelGetTickCount();
 8003d06:	f007 fd93 	bl	800b830 <osKernelGetTickCount>
 8003d0a:	6338      	str	r0, [r7, #48]	@ 0x30
				wait = tick + 1;
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0e:	3301      	adds	r3, #1
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
				ADC_get_send(set, chnnl, (E-vin), (tick-start_tick));
 8003d12:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003d16:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d22:	1ad2      	subs	r2, r2, r3
 8003d24:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8003d28:	79bb      	ldrb	r3, [r7, #6]
 8003d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fad6 	bl	80032e0 <ADC_get_send>
				osDelayUntil(wait);
 8003d34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d36:	f007 fe3d 	bl	800b9b4 <osDelayUntil>
			for(uint32_t i=0;i<(end_loop_DPV+1);i++){
 8003d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	3301      	adds	r3, #1
 8003d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	f4ff af48 	bcc.w	8003bdc <voltammerty+0x590>
			E = 0;
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	663b      	str	r3, [r7, #96]	@ 0x60
			DAC_set(set, DAC_Vw, E);
 8003d52:	793a      	ldrb	r2, [r7, #4]
 8003d54:	79bb      	ldrb	r3, [r7, #6]
 8003d56:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fbf3 	bl	8003548 <DAC_set>
			DAC_set(set, DAC_Vin, 0.0);
 8003d62:	797a      	ldrb	r2, [r7, #5]
 8003d64:	79bb      	ldrb	r3, [r7, #6]
 8003d66:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003eb8 <voltammerty+0x86c>
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fbeb 	bl	8003548 <DAC_set>
			equilibration = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			break;
 8003d78:	e177      	b.n	800406a <voltammerty+0xa1e>
			if(channels.parameters[channel].swv.E_begin < 0.0){
 8003d7a:	79fa      	ldrb	r2, [r7, #7]
 8003d7c:	494c      	ldr	r1, [pc, #304]	@ (8003eb0 <voltammerty+0x864>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	440b      	add	r3, r1
 8003d88:	3340      	adds	r3, #64	@ 0x40
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	d529      	bpl.n	8003dec <voltammerty+0x7a0>
				E = channels.parameters[channel].swv.E_begin*-1.0;
 8003d98:	79fa      	ldrb	r2, [r7, #7]
 8003d9a:	4945      	ldr	r1, [pc, #276]	@ (8003eb0 <voltammerty+0x864>)
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	440b      	add	r3, r1
 8003da6:	3340      	adds	r3, #64	@ 0x40
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc fb74 	bl	8000498 <__aeabi_f2d>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	f7fc fe96 	bl	8000ae8 <__aeabi_d2f>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef1 7a67 	vneg.f32	s15, s15
 8003dc6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				vin = channels.parameters[channel].swv.E_begin*-2.0;
 8003dca:	79fa      	ldrb	r2, [r7, #7]
 8003dcc:	4938      	ldr	r1, [pc, #224]	@ (8003eb0 <voltammerty+0x864>)
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3340      	adds	r3, #64	@ 0x40
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003dea:	e00c      	b.n	8003e06 <voltammerty+0x7ba>
				E = channels.parameters[channel].swv.E_begin;
 8003dec:	79fa      	ldrb	r2, [r7, #7]
 8003dee:	4930      	ldr	r1, [pc, #192]	@ (8003eb0 <voltammerty+0x864>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	440b      	add	r3, r1
 8003dfa:	3340      	adds	r3, #64	@ 0x40
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	663b      	str	r3, [r7, #96]	@ 0x60
				vin = 0.0;
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
			DAC_set(set, DAC_Vw, E);
 8003e06:	793a      	ldrb	r2, [r7, #4]
 8003e08:	79bb      	ldrb	r3, [r7, #6]
 8003e0a:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fb99 	bl	8003548 <DAC_set>
			DAC_set(set, DAC_Vin, vin);
 8003e16:	797a      	ldrb	r2, [r7, #5]
 8003e18:	79bb      	ldrb	r3, [r7, #6]
 8003e1a:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fb91 	bl	8003548 <DAC_set>
			float period = 1/(2*channels.parameters[channel].swv.Frequency)*1000;
 8003e26:	79fa      	ldrb	r2, [r7, #7]
 8003e28:	4921      	ldr	r1, [pc, #132]	@ (8003eb0 <voltammerty+0x864>)
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	440b      	add	r3, r1
 8003e34:	3350      	adds	r3, #80	@ 0x50
 8003e36:	edd3 7a00 	vldr	s15, [r3]
 8003e3a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e46:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003eb4 <voltammerty+0x868>
 8003e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e4e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
			float end_SWV = (channels.parameters[channel].swv.E_end-channels.parameters[channel].swv.E_begin)/channels.parameters[channel].swv.E_step;
 8003e52:	79fa      	ldrb	r2, [r7, #7]
 8003e54:	4916      	ldr	r1, [pc, #88]	@ (8003eb0 <voltammerty+0x864>)
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	440b      	add	r3, r1
 8003e60:	3344      	adds	r3, #68	@ 0x44
 8003e62:	ed93 7a00 	vldr	s14, [r3]
 8003e66:	79fa      	ldrb	r2, [r7, #7]
 8003e68:	4911      	ldr	r1, [pc, #68]	@ (8003eb0 <voltammerty+0x864>)
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	440b      	add	r3, r1
 8003e74:	3340      	adds	r3, #64	@ 0x40
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e7e:	79fa      	ldrb	r2, [r7, #7]
 8003e80:	490b      	ldr	r1, [pc, #44]	@ (8003eb0 <voltammerty+0x864>)
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3348      	adds	r3, #72	@ 0x48
 8003e8e:	ed93 7a00 	vldr	s14, [r3]
 8003e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e96:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			uint32_t end_loop_SWV = (uint32_t)end_SWV;
 8003e9a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea2:	ee17 3a90 	vmov	r3, s15
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
			for(uint32_t i=0;i<(end_loop_SWV+1);i++){
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eac:	e0c0      	b.n	8004030 <voltammerty+0x9e4>
 8003eae:	bf00      	nop
 8003eb0:	2000036c 	.word	0x2000036c
 8003eb4:	447a0000 	.word	0x447a0000
 8003eb8:	00000000 	.word	0x00000000
				if(equilibration == 0){
 8003ebc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d126      	bne.n	8003f12 <voltammerty+0x8c6>
					osDelay(channels.parameters[channel].swv.t_equilibration*1000);
 8003ec4:	79fa      	ldrb	r2, [r7, #7]
 8003ec6:	496c      	ldr	r1, [pc, #432]	@ (8004078 <voltammerty+0xa2c>)
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	440b      	add	r3, r1
 8003ed2:	333c      	adds	r3, #60	@ 0x3c
 8003ed4:	edd3 7a00 	vldr	s15, [r3]
 8003ed8:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800407c <voltammerty+0xa30>
 8003edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee4:	ee17 0a90 	vmov	r0, s15
 8003ee8:	f007 fd49 	bl	800b97e <osDelay>
					equilibration = 1;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					E = E - channels.parameters[channel].swv.Amplitude;	// to start
 8003ef2:	79fa      	ldrb	r2, [r7, #7]
 8003ef4:	4960      	ldr	r1, [pc, #384]	@ (8004078 <voltammerty+0xa2c>)
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	440b      	add	r3, r1
 8003f00:	334c      	adds	r3, #76	@ 0x4c
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f0e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				E = E + channels.parameters[channel].swv.E_step + 2*channels.parameters[channel].swv.Amplitude;
 8003f12:	79fa      	ldrb	r2, [r7, #7]
 8003f14:	4958      	ldr	r1, [pc, #352]	@ (8004078 <voltammerty+0xa2c>)
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	440b      	add	r3, r1
 8003f20:	3348      	adds	r3, #72	@ 0x48
 8003f22:	ed93 7a00 	vldr	s14, [r3]
 8003f26:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f2e:	79fa      	ldrb	r2, [r7, #7]
 8003f30:	4951      	ldr	r1, [pc, #324]	@ (8004078 <voltammerty+0xa2c>)
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	440b      	add	r3, r1
 8003f3c:	334c      	adds	r3, #76	@ 0x4c
 8003f3e:	edd3 7a00 	vldr	s15, [r3]
 8003f42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				DAC_set(set, DAC_Vw, E);
 8003f4e:	793a      	ldrb	r2, [r7, #4]
 8003f50:	79bb      	ldrb	r3, [r7, #6]
 8003f52:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff faf5 	bl	8003548 <DAC_set>
				osDelay(period-1);
 8003f5e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f6e:	ee17 0a90 	vmov	r0, s15
 8003f72:	f007 fd04 	bl	800b97e <osDelay>
				tick = osKernelGetTickCount();
 8003f76:	f007 fc5b 	bl	800b830 <osKernelGetTickCount>
 8003f7a:	6338      	str	r0, [r7, #48]	@ 0x30
				wait = tick + 1;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	3301      	adds	r3, #1
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
				ADC_get_send(set, chnnl, (E-vin), (tick-start_tick));
 8003f82:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003f86:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f92:	1ad2      	subs	r2, r2, r3
 8003f94:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8003f98:	79bb      	ldrb	r3, [r7, #6]
 8003f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f99e 	bl	80032e0 <ADC_get_send>
				osDelayUntil(wait);
 8003fa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fa6:	f007 fd05 	bl	800b9b4 <osDelayUntil>
				E = E - 2*channels.parameters[channel].swv.Amplitude;
 8003faa:	79fa      	ldrb	r2, [r7, #7]
 8003fac:	4932      	ldr	r1, [pc, #200]	@ (8004078 <voltammerty+0xa2c>)
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	440b      	add	r3, r1
 8003fb8:	334c      	adds	r3, #76	@ 0x4c
 8003fba:	edd3 7a00 	vldr	s15, [r3]
 8003fbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003fc2:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fca:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				DAC_set(set, DAC_Vw, E);
 8003fce:	793a      	ldrb	r2, [r7, #4]
 8003fd0:	79bb      	ldrb	r3, [r7, #6]
 8003fd2:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fab5 	bl	8003548 <DAC_set>
				osDelay(period-1);
 8003fde:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003fe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fee:	ee17 0a90 	vmov	r0, s15
 8003ff2:	f007 fcc4 	bl	800b97e <osDelay>
				tick = osKernelGetTickCount();
 8003ff6:	f007 fc1b 	bl	800b830 <osKernelGetTickCount>
 8003ffa:	6338      	str	r0, [r7, #48]	@ 0x30
				wait = tick + 1;
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	3301      	adds	r3, #1
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
				ADC_get_send(set, chnnl, (E-vin), (tick-start_tick));
 8004002:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004006:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800400a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800400e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004012:	1ad2      	subs	r2, r2, r3
 8004014:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8004018:	79bb      	ldrb	r3, [r7, #6]
 800401a:	eeb0 0a67 	vmov.f32	s0, s15
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff f95e 	bl	80032e0 <ADC_get_send>
				osDelayUntil(wait);
 8004024:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004026:	f007 fcc5 	bl	800b9b4 <osDelayUntil>
			for(uint32_t i=0;i<(end_loop_SWV+1);i++){
 800402a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800402c:	3301      	adds	r3, #1
 800402e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004032:	3301      	adds	r3, #1
 8004034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004036:	429a      	cmp	r2, r3
 8004038:	f4ff af40 	bcc.w	8003ebc <voltammerty+0x870>
			E = 0;
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	663b      	str	r3, [r7, #96]	@ 0x60
			DAC_set(set, DAC_Vw, E);
 8004042:	793a      	ldrb	r2, [r7, #4]
 8004044:	79bb      	ldrb	r3, [r7, #6]
 8004046:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800404a:	4611      	mov	r1, r2
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fa7b 	bl	8003548 <DAC_set>
			DAC_set(set, DAC_Vin, 0.0);
 8004052:	797a      	ldrb	r2, [r7, #5]
 8004054:	79bb      	ldrb	r3, [r7, #6]
 8004056:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8004080 <voltammerty+0xa34>
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fa73 	bl	8003548 <DAC_set>
			equilibration = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			break;
 8004068:	bf00      	nop
	return;
 800406a:	bf00      	nop
 800406c:	bf00      	nop
}
 800406e:	3768      	adds	r7, #104	@ 0x68
 8004070:	46bd      	mov	sp, r7
 8004072:	ecbd 8b02 	vpop	{d8}
 8004076:	bdb0      	pop	{r4, r5, r7, pc}
 8004078:	2000036c 	.word	0x2000036c
 800407c:	447a0000 	.word	0x447a0000
 8004080:	00000000 	.word	0x00000000

08004084 <SPI1_change_polarity>:

void SPI1_change_polarity(void){
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  // change polarity for ADC and DAC (SPI)
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004088:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <SPI1_change_polarity+0x20>)
 800408a:	2202      	movs	r2, #2
 800408c:	611a      	str	r2, [r3, #16]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800408e:	4805      	ldr	r0, [pc, #20]	@ (80040a4 <SPI1_change_polarity+0x20>)
 8004090:	f004 fee4 	bl	8008e5c <HAL_SPI_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <SPI1_change_polarity+0x1a>
  {
    Error_Handler();
 800409a:	f000 fd2f 	bl	8004afc <Error_Handler>
  }

}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000134 	.word	0x20000134

080040a8 <clear_UART_rx_buff>:
void clear_UART_rx_buff(void){
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
	// clear UART rx buffer
	for(uint8_t i=0;i<100;i++){
 80040ae:	2300      	movs	r3, #0
 80040b0:	71fb      	strb	r3, [r7, #7]
 80040b2:	e006      	b.n	80040c2 <clear_UART_rx_buff+0x1a>
		UART_rx_buff[i] = 0;
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	4a07      	ldr	r2, [pc, #28]	@ (80040d4 <clear_UART_rx_buff+0x2c>)
 80040b8:	2100      	movs	r1, #0
 80040ba:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<100;i++){
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	3301      	adds	r3, #1
 80040c0:	71fb      	strb	r3, [r7, #7]
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	2b63      	cmp	r3, #99	@ 0x63
 80040c6:	d9f5      	bls.n	80040b4 <clear_UART_rx_buff+0xc>
	}
	return;
 80040c8:	bf00      	nop
}
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	20000304 	.word	0x20000304

080040d8 <HAL_UART_TxCpltCallback>:
// interrupt(s)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	UART_tx_flag = 0;
 80040e0:	4b04      	ldr	r3, [pc, #16]	@ (80040f4 <HAL_UART_TxCpltCallback+0x1c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	200002fc 	.word	0x200002fc

080040f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	// put received data in UART_Rx_buff
	HAL_UART_Receive_DMA(&huart2, UART_rx, 1);
 8004100:	2201      	movs	r2, #1
 8004102:	4911      	ldr	r1, [pc, #68]	@ (8004148 <HAL_UART_RxCpltCallback+0x50>)
 8004104:	4811      	ldr	r0, [pc, #68]	@ (800414c <HAL_UART_RxCpltCallback+0x54>)
 8004106:	f006 f903 	bl	800a310 <HAL_UART_Receive_DMA>
	UART_rx_buff[UARTcnt] = UART_rx[0];
 800410a:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <HAL_UART_RxCpltCallback+0x58>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <HAL_UART_RxCpltCallback+0x50>)
 8004112:	7819      	ldrb	r1, [r3, #0]
 8004114:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <HAL_UART_RxCpltCallback+0x5c>)
 8004116:	5499      	strb	r1, [r3, r2]
	// check for new line and reset incrementer for UART_Rx_buff
	if(UART_rx_buff[UARTcnt] == 10){
 8004118:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <HAL_UART_RxCpltCallback+0x58>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <HAL_UART_RxCpltCallback+0x5c>)
 8004120:	5c9b      	ldrb	r3, [r3, r2]
 8004122:	2b0a      	cmp	r3, #10
 8004124:	d106      	bne.n	8004134 <HAL_UART_RxCpltCallback+0x3c>
		UART_rx_flag = 1;
 8004126:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <HAL_UART_RxCpltCallback+0x60>)
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
		UARTcnt = 0;
 800412c:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <HAL_UART_RxCpltCallback+0x58>)
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
	}
	else{
		UARTcnt += 1;
	}
}
 8004132:	e005      	b.n	8004140 <HAL_UART_RxCpltCallback+0x48>
		UARTcnt += 1;
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_UART_RxCpltCallback+0x58>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	3301      	adds	r3, #1
 800413a:	b2da      	uxtb	r2, r3
 800413c:	4b04      	ldr	r3, [pc, #16]	@ (8004150 <HAL_UART_RxCpltCallback+0x58>)
 800413e:	701a      	strb	r2, [r3, #0]
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000300 	.word	0x20000300
 800414c:	20000198 	.word	0x20000198
 8004150:	20000368 	.word	0x20000368
 8004154:	20000304 	.word	0x20000304
 8004158:	200002fd 	.word	0x200002fd

0800415c <StartCLI>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCLI */
void StartCLI(void *argument)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// set uart DMA receive
	HAL_UART_Receive_DMA(&huart2, UART_rx, 1);
 8004164:	2201      	movs	r2, #1
 8004166:	493f      	ldr	r1, [pc, #252]	@ (8004264 <StartCLI+0x108>)
 8004168:	483f      	ldr	r0, [pc, #252]	@ (8004268 <StartCLI+0x10c>)
 800416a:	f006 f8d1 	bl	800a310 <HAL_UART_Receive_DMA>

	// set default settings of the prototype
	p1.t_interval = 0.1;
 800416e:	4b3f      	ldr	r3, [pc, #252]	@ (800426c <StartCLI+0x110>)
 8004170:	4a3f      	ldr	r2, [pc, #252]	@ (8004270 <StartCLI+0x114>)
 8004172:	605a      	str	r2, [r3, #4]
	p1.t_run = 1.0;
 8004174:	4b3d      	ldr	r3, [pc, #244]	@ (800426c <StartCLI+0x110>)
 8004176:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800417a:	609a      	str	r2, [r3, #8]

	channels.parameters[0].technique = 3.0;
 800417c:	4b3d      	ldr	r3, [pc, #244]	@ (8004274 <StartCLI+0x118>)
 800417e:	2203      	movs	r2, #3
 8004180:	715a      	strb	r2, [r3, #5]
	channels.parameters[0].swv.t_equilibration = 5;
 8004182:	4b3c      	ldr	r3, [pc, #240]	@ (8004274 <StartCLI+0x118>)
 8004184:	4a3c      	ldr	r2, [pc, #240]	@ (8004278 <StartCLI+0x11c>)
 8004186:	63da      	str	r2, [r3, #60]	@ 0x3c
	channels.parameters[0].swv.E_begin = -0.5;
 8004188:	4b3a      	ldr	r3, [pc, #232]	@ (8004274 <StartCLI+0x118>)
 800418a:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800418e:	641a      	str	r2, [r3, #64]	@ 0x40
	channels.parameters[0].swv.E_end = 1.0;
 8004190:	4b38      	ldr	r3, [pc, #224]	@ (8004274 <StartCLI+0x118>)
 8004192:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004196:	645a      	str	r2, [r3, #68]	@ 0x44
	channels.parameters[0].swv.Frequency = 10;
 8004198:	4b36      	ldr	r3, [pc, #216]	@ (8004274 <StartCLI+0x118>)
 800419a:	4a38      	ldr	r2, [pc, #224]	@ (800427c <StartCLI+0x120>)
 800419c:	651a      	str	r2, [r3, #80]	@ 0x50
	channels.parameters[0].swv.E_step = 0.005;
 800419e:	4b35      	ldr	r3, [pc, #212]	@ (8004274 <StartCLI+0x118>)
 80041a0:	4a37      	ldr	r2, [pc, #220]	@ (8004280 <StartCLI+0x124>)
 80041a2:	649a      	str	r2, [r3, #72]	@ 0x48
	channels.parameters[0].swv.Amplitude = 0.025;
 80041a4:	4b33      	ldr	r3, [pc, #204]	@ (8004274 <StartCLI+0x118>)
 80041a6:	4a37      	ldr	r2, [pc, #220]	@ (8004284 <StartCLI+0x128>)
 80041a8:	64da      	str	r2, [r3, #76]	@ 0x4c
//	channels.parameters[0].cv.E_vertex_2 = 1.0;
//	channels.parameters[0].cv.E_vertex_1 = -0.5;
//	channels.parameters[0].cv.E_step  = 0.01;
//	channels.parameters[0].cv.scan_rate = 1.0;

	channels.parameters[1].technique = 0.0;
 80041aa:	4b32      	ldr	r3, [pc, #200]	@ (8004274 <StartCLI+0x118>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	channels.parameters[2].technique = 0.0;
 80041b2:	4b30      	ldr	r3, [pc, #192]	@ (8004274 <StartCLI+0x118>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	channels.parameters[3].technique = 0.0;
 80041ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004274 <StartCLI+0x118>)
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 20f5 	strb.w	r2, [r3, #245]	@ 0xf5

  /* Infinite loop */
  for(;;)
  {
	// check all if all tasks are done
	for(uint8_t i=0;i<7;i++){
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e009      	b.n	80041dc <StartCLI+0x80>
		osSemaphoreAcquire(semReturnHandle, osWaitForever);
 80041c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <StartCLI+0x12c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295
 80041d0:	4618      	mov	r0, r3
 80041d2:	f007 fdb3 	bl	800bd3c <osSemaphoreAcquire>
	for(uint8_t i=0;i<7;i++){
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	3301      	adds	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d9f2      	bls.n	80041c8 <StartCLI+0x6c>
	}

	// use uart (with mutex because message queue task also use uart)
	osMutexAcquire(mutexPrintHandle, osWaitForever);
 80041e2:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <StartCLI+0x130>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f04f 31ff 	mov.w	r1, #4294967295
 80041ea:	4618      	mov	r0, r3
 80041ec:	f007 fc95 	bl	800bb1a <osMutexAcquire>
	// wait for input
	clear_UART_rx_buff();	// wait until user type someting in CLI and clear it to show menu
 80041f0:	f7ff ff5a 	bl	80040a8 <clear_UART_rx_buff>
	UART_rx_flag = 0;
 80041f4:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <StartCLI+0x134>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
	while(UART_rx_flag != 1);
 80041fa:	bf00      	nop
 80041fc:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <StartCLI+0x134>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d1fb      	bne.n	80041fc <StartCLI+0xa0>
	clear_UART_rx_buff();
 8004204:	f7ff ff50 	bl	80040a8 <clear_UART_rx_buff>
	UART_rx_flag = 0;
 8004208:	4b21      	ldr	r3, [pc, #132]	@ (8004290 <StartCLI+0x134>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
	UART_menu();			// run menu in CLI
 800420e:	f7fe fc69 	bl	8002ae4 <UART_menu>
	// release the tasks to execute
	osMutexRelease(mutexPrintHandle);
 8004212:	4b1e      	ldr	r3, [pc, #120]	@ (800428c <StartCLI+0x130>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f007 fcca 	bl	800bbb0 <osMutexRelease>

	osSemaphoreRelease(semTempHandle);
 800421c:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <StartCLI+0x138>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f007 fddd 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreRelease(semV1Handle);
 8004226:	4b1c      	ldr	r3, [pc, #112]	@ (8004298 <StartCLI+0x13c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f007 fdd8 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreRelease(semV2Handle);
 8004230:	4b1a      	ldr	r3, [pc, #104]	@ (800429c <StartCLI+0x140>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f007 fdd3 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreRelease(semV3Handle);
 800423a:	4b19      	ldr	r3, [pc, #100]	@ (80042a0 <StartCLI+0x144>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f007 fdce 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreRelease(semV4Handle);
 8004244:	4b17      	ldr	r3, [pc, #92]	@ (80042a4 <StartCLI+0x148>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f007 fdc9 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreRelease(semP1Handle);
 800424e:	4b16      	ldr	r3, [pc, #88]	@ (80042a8 <StartCLI+0x14c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f007 fdc4 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreRelease(semVSIMHandle);
 8004258:	4b14      	ldr	r3, [pc, #80]	@ (80042ac <StartCLI+0x150>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f007 fdbf 	bl	800bde0 <osSemaphoreRelease>
	for(uint8_t i=0;i<7;i++){
 8004262:	e7ae      	b.n	80041c2 <StartCLI+0x66>
 8004264:	20000300 	.word	0x20000300
 8004268:	20000198 	.word	0x20000198
 800426c:	200004b0 	.word	0x200004b0
 8004270:	3dcccccd 	.word	0x3dcccccd
 8004274:	2000036c 	.word	0x2000036c
 8004278:	40a00000 	.word	0x40a00000
 800427c:	41200000 	.word	0x41200000
 8004280:	3ba3d70a 	.word	0x3ba3d70a
 8004284:	3ccccccd 	.word	0x3ccccccd
 8004288:	200002f8 	.word	0x200002f8
 800428c:	200002d8 	.word	0x200002d8
 8004290:	200002fd 	.word	0x200002fd
 8004294:	200002ec 	.word	0x200002ec
 8004298:	200002dc 	.word	0x200002dc
 800429c:	200002e0 	.word	0x200002e0
 80042a0:	200002e4 	.word	0x200002e4
 80042a4:	200002e8 	.word	0x200002e8
 80042a8:	200002f0 	.word	0x200002f0
 80042ac:	200002f4 	.word	0x200002f4

080042b0 <StartTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemp */
void StartTemp(void *argument)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08e      	sub	sp, #56	@ 0x38
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemp */
	uint8_t I2C_addrss = 0b10010000;	// address of temp sensor
 80042b8:	2390      	movs	r3, #144	@ 0x90
 80042ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t I2C_tx_data[1];
	uint8_t I2C_rx_data[2];
	int16_t I2C_temp = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	float temp = 0.0;
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	MSGQUEUE_OBJ_t msg;
	/* Infinite loop */
	for(;;)
	{
	    osSemaphoreAcquire(semTempHandle, osWaitForever);
 80042c8:	4b32      	ldr	r3, [pc, #200]	@ (8004394 <StartTemp+0xe4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f04f 31ff 	mov.w	r1, #4294967295
 80042d0:	4618      	mov	r0, r3
 80042d2:	f007 fd33 	bl	800bd3c <osSemaphoreAcquire>
		// get temperature
		I2C_tx_data[0] = 0x01;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		HAL_I2C_Master_Transmit(&hi2c1, I2C_addrss, I2C_tx_data, 1, 100);
 80042dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042e0:	b299      	uxth	r1, r3
 80042e2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80042e6:	2364      	movs	r3, #100	@ 0x64
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2301      	movs	r3, #1
 80042ec:	482a      	ldr	r0, [pc, #168]	@ (8004398 <StartTemp+0xe8>)
 80042ee:	f002 fea7 	bl	8007040 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, I2C_addrss, I2C_rx_data, 2, 100);
 80042f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042f6:	b299      	uxth	r1, r3
 80042f8:	f107 0220 	add.w	r2, r7, #32
 80042fc:	2364      	movs	r3, #100	@ 0x64
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2302      	movs	r3, #2
 8004302:	4825      	ldr	r0, [pc, #148]	@ (8004398 <StartTemp+0xe8>)
 8004304:	f002 ffb4 	bl	8007270 <HAL_I2C_Master_Receive>
		if((I2C_rx_data[1]&0x20) == 0x20){	// check if conversion is done
 8004308:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d039      	beq.n	8004388 <StartTemp+0xd8>
			I2C_tx_data[0] = 0x00;
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			HAL_I2C_Master_Transmit(&hi2c1, I2C_addrss, I2C_tx_data, 1, 100);
 800431a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800431e:	b299      	uxth	r1, r3
 8004320:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004324:	2364      	movs	r3, #100	@ 0x64
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2301      	movs	r3, #1
 800432a:	481b      	ldr	r0, [pc, #108]	@ (8004398 <StartTemp+0xe8>)
 800432c:	f002 fe88 	bl	8007040 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c1, I2C_addrss, I2C_rx_data, 2, 100);
 8004330:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004334:	b299      	uxth	r1, r3
 8004336:	f107 0220 	add.w	r2, r7, #32
 800433a:	2364      	movs	r3, #100	@ 0x64
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	2302      	movs	r3, #2
 8004340:	4815      	ldr	r0, [pc, #84]	@ (8004398 <StartTemp+0xe8>)
 8004342:	f002 ff95 	bl	8007270 <HAL_I2C_Master_Receive>
			I2C_temp = (I2C_rx_data[0]<<8) + I2C_rx_data[1];
 8004346:	f897 3020 	ldrb.w	r3, [r7, #32]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	b29b      	uxth	r3, r3
 800434e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004352:	4413      	add	r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			temp = (float)I2C_temp * 0.0078125;
 8004358:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004364:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800439c <StartTemp+0xec>
 8004368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800436c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			// send data
			msg.channel = TEMP;
 8004370:	2305      	movs	r3, #5
 8004372:	773b      	strb	r3, [r7, #28]
			msg.val = temp;
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	60fb      	str	r3, [r7, #12]
		    osMessageQueuePut(queueHandle, &msg, 0U, 0U);
 8004378:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <StartTemp+0xf0>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	f107 010c 	add.w	r1, r7, #12
 8004380:	2300      	movs	r3, #0
 8004382:	2200      	movs	r2, #0
 8004384:	f007 fde4 	bl	800bf50 <osMessageQueuePut>
		}
	    osSemaphoreRelease(semReturnHandle);
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <StartTemp+0xf4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f007 fd27 	bl	800bde0 <osSemaphoreRelease>
	    osSemaphoreAcquire(semTempHandle, osWaitForever);
 8004392:	e799      	b.n	80042c8 <StartTemp+0x18>
 8004394:	200002ec 	.word	0x200002ec
 8004398:	200000e0 	.word	0x200000e0
 800439c:	3c000000 	.word	0x3c000000
 80043a0:	200004bc 	.word	0x200004bc
 80043a4:	200002f8 	.word	0x200002f8

080043a8 <StartV1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartV1 */
void StartV1(void *argument)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartV1 */
	/* Infinite loop */
	for(;;)
	{
		// voltammerty channel 1 in individual mode
		osSemaphoreAcquire(semV1Handle, osWaitForever);
 80043b0:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <StartV1+0x48>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f04f 31ff 	mov.w	r1, #4294967295
 80043b8:	4618      	mov	r0, r3
 80043ba:	f007 fcbf 	bl	800bd3c <osSemaphoreAcquire>
		if(channels.on == ON && channels.broadcast == 0 && channels.parameters[0].technique != 0){
 80043be:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <StartV1+0x4c>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <StartV1+0x3a>
 80043c6:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <StartV1+0x4c>)
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <StartV1+0x3a>
 80043ce:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <StartV1+0x4c>)
 80043d0:	795b      	ldrb	r3, [r3, #5]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <StartV1+0x3a>
			voltammerty(V1, IND, CH0, CH1);
 80043d6:	2301      	movs	r3, #1
 80043d8:	2200      	movs	r2, #0
 80043da:	2100      	movs	r1, #0
 80043dc:	2000      	movs	r0, #0
 80043de:	f7ff f935 	bl	800364c <voltammerty>
		}
		osSemaphoreRelease(semReturnHandle);
 80043e2:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <StartV1+0x50>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f007 fcfa 	bl	800bde0 <osSemaphoreRelease>
		osSemaphoreAcquire(semV1Handle, osWaitForever);
 80043ec:	e7e0      	b.n	80043b0 <StartV1+0x8>
 80043ee:	bf00      	nop
 80043f0:	200002dc 	.word	0x200002dc
 80043f4:	2000036c 	.word	0x2000036c
 80043f8:	200002f8 	.word	0x200002f8

080043fc <StartV2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartV2 */
void StartV2(void *argument)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartV2 */
  /* Infinite loop */
  for(;;)
  {
	// voltammerty channel 2 in individual mode
	osSemaphoreAcquire(semV2Handle, osWaitForever);
 8004404:	4b0f      	ldr	r3, [pc, #60]	@ (8004444 <StartV2+0x48>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f04f 31ff 	mov.w	r1, #4294967295
 800440c:	4618      	mov	r0, r3
 800440e:	f007 fc95 	bl	800bd3c <osSemaphoreAcquire>
	if(channels.on == ON && channels.broadcast == 0 && channels.parameters[1].technique != 0){
 8004412:	4b0d      	ldr	r3, [pc, #52]	@ (8004448 <StartV2+0x4c>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10e      	bne.n	8004438 <StartV2+0x3c>
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <StartV2+0x4c>)
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <StartV2+0x3c>
 8004422:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <StartV2+0x4c>)
 8004424:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <StartV2+0x3c>
		voltammerty(V2, IND, CH3, CH2);
 800442c:	2302      	movs	r3, #2
 800442e:	2203      	movs	r2, #3
 8004430:	2100      	movs	r1, #0
 8004432:	2001      	movs	r0, #1
 8004434:	f7ff f90a 	bl	800364c <voltammerty>
	}
	osSemaphoreRelease(semReturnHandle);
 8004438:	4b04      	ldr	r3, [pc, #16]	@ (800444c <StartV2+0x50>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f007 fccf 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreAcquire(semV2Handle, osWaitForever);
 8004442:	e7df      	b.n	8004404 <StartV2+0x8>
 8004444:	200002e0 	.word	0x200002e0
 8004448:	2000036c 	.word	0x2000036c
 800444c:	200002f8 	.word	0x200002f8

08004450 <StarV3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarV3 */
void StarV3(void *argument)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarV3 */
  /* Infinite loop */
  for(;;)
  {
	// voltammerty channel 3 in individual mode
	osSemaphoreAcquire(semV3Handle, osWaitForever);
 8004458:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <StarV3+0x48>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f04f 31ff 	mov.w	r1, #4294967295
 8004460:	4618      	mov	r0, r3
 8004462:	f007 fc6b 	bl	800bd3c <osSemaphoreAcquire>
	if(channels.on == ON && channels.broadcast == 0 && channels.parameters[2].technique != 0){
 8004466:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <StarV3+0x4c>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10e      	bne.n	800448c <StarV3+0x3c>
 800446e:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <StarV3+0x4c>)
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <StarV3+0x3c>
 8004476:	4b09      	ldr	r3, [pc, #36]	@ (800449c <StarV3+0x4c>)
 8004478:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <StarV3+0x3c>
		voltammerty(V3, IND, CH4, CH5);
 8004480:	2305      	movs	r3, #5
 8004482:	2204      	movs	r2, #4
 8004484:	2100      	movs	r1, #0
 8004486:	2002      	movs	r0, #2
 8004488:	f7ff f8e0 	bl	800364c <voltammerty>
	}
	osSemaphoreRelease(semReturnHandle);
 800448c:	4b04      	ldr	r3, [pc, #16]	@ (80044a0 <StarV3+0x50>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f007 fca5 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreAcquire(semV3Handle, osWaitForever);
 8004496:	e7df      	b.n	8004458 <StarV3+0x8>
 8004498:	200002e4 	.word	0x200002e4
 800449c:	2000036c 	.word	0x2000036c
 80044a0:	200002f8 	.word	0x200002f8

080044a4 <StartV4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartV4 */
void StartV4(void *argument)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartV4 */
  /* Infinite loop */
  for(;;)
  {
	// voltammerty channel 4 in individual mode
	osSemaphoreAcquire(semV4Handle, osWaitForever);
 80044ac:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <StartV4+0x48>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295
 80044b4:	4618      	mov	r0, r3
 80044b6:	f007 fc41 	bl	800bd3c <osSemaphoreAcquire>
	if(channels.on == ON && channels.broadcast == 0 && channels.parameters[3].technique != 0){
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <StartV4+0x4c>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d10e      	bne.n	80044e0 <StartV4+0x3c>
 80044c2:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <StartV4+0x4c>)
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <StartV4+0x3c>
 80044ca:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <StartV4+0x4c>)
 80044cc:	f893 30f5 	ldrb.w	r3, [r3, #245]	@ 0xf5
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <StartV4+0x3c>
		voltammerty(V4, IND, CH7, CH6);
 80044d4:	2306      	movs	r3, #6
 80044d6:	2207      	movs	r2, #7
 80044d8:	2100      	movs	r1, #0
 80044da:	2003      	movs	r0, #3
 80044dc:	f7ff f8b6 	bl	800364c <voltammerty>
	}
	osSemaphoreRelease(semReturnHandle);
 80044e0:	4b04      	ldr	r3, [pc, #16]	@ (80044f4 <StartV4+0x50>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f007 fc7b 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreAcquire(semV4Handle, osWaitForever);
 80044ea:	e7df      	b.n	80044ac <StartV4+0x8>
 80044ec:	200002e8 	.word	0x200002e8
 80044f0:	2000036c 	.word	0x2000036c
 80044f4:	200002f8 	.word	0x200002f8

080044f8 <StartP1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartP1 */
void StartP1(void *argument)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b090      	sub	sp, #64	@ 0x40
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartP1 */
	MSGQUEUE_OBJ_t msg;
	float volt = 0.0;
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t tick, wait = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
  /* Infinite loop */
  for(;;)
  {
	// potential channel for measuring pH
	osSemaphoreAcquire(semP1Handle, osWaitForever);
 800450a:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <StartP1+0xfc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f04f 31ff 	mov.w	r1, #4294967295
 8004512:	4618      	mov	r0, r3
 8004514:	f007 fc12 	bl	800bd3c <osSemaphoreAcquire>
	if(p1.on == ON){		// check if potentiostat is needs to measure
 8004518:	4b37      	ldr	r3, [pc, #220]	@ (80045f8 <StartP1+0x100>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d162      	bne.n	80045e6 <StartP1+0xee>
		HAL_ADC_Start(&hadc1);
 8004520:	4836      	ldr	r0, [pc, #216]	@ (80045fc <StartP1+0x104>)
 8004522:	f001 f961 	bl	80057e8 <HAL_ADC_Start>
		// calculate the end time for the for loop
		float end = p1.t_run/p1.t_interval;
 8004526:	4b34      	ldr	r3, [pc, #208]	@ (80045f8 <StartP1+0x100>)
 8004528:	edd3 6a02 	vldr	s13, [r3, #8]
 800452c:	4b32      	ldr	r3, [pc, #200]	@ (80045f8 <StartP1+0x100>)
 800452e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004536:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		uint32_t end_loop = (uint32_t) end;
 800453a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800453e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004542:	ee17 3a90 	vmov	r3, s15
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
		uint32_t start_tick = osKernelGetTickCount();
 8004548:	f007 f972 	bl	800b830 <osKernelGetTickCount>
 800454c:	62b8      	str	r0, [r7, #40]	@ 0x28
		for(uint32_t i=0;i<end_loop;i++){
 800454e:	2300      	movs	r3, #0
 8004550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004552:	e041      	b.n	80045d8 <StartP1+0xe0>
			tick = osKernelGetTickCount();
 8004554:	f007 f96c 	bl	800b830 <osKernelGetTickCount>
 8004558:	6278      	str	r0, [r7, #36]	@ 0x24
			wait = tick + (uint32_t)(1000*p1.t_interval); // get time and run next code and wait until time is done
 800455a:	4b27      	ldr	r3, [pc, #156]	@ (80045f8 <StartP1+0x100>)
 800455c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004560:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004600 <StartP1+0x108>
 8004564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456c:	ee17 2a90 	vmov	r2, s15
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	4413      	add	r3, r2
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
			HAL_ADC_PollForConversion(&hadc1, 100);	// get data ADC
 8004576:	2164      	movs	r1, #100	@ 0x64
 8004578:	4820      	ldr	r0, [pc, #128]	@ (80045fc <StartP1+0x104>)
 800457a:	f001 f9cb 	bl	8005914 <HAL_ADC_PollForConversion>
			uint32_t val_ADC_raw = HAL_ADC_GetValue(&hadc1);
 800457e:	481f      	ldr	r0, [pc, #124]	@ (80045fc <StartP1+0x104>)
 8004580:	f001 fa57 	bl	8005a32 <HAL_ADC_GetValue>
 8004584:	6238      	str	r0, [r7, #32]
			float val_ADC = (float)val_ADC_raw;
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	edc7 7a07 	vstr	s15, [r7, #28]
			volt = val_ADC*33/40960;
 8004594:	edd7 7a07 	vldr	s15, [r7, #28]
 8004598:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004604 <StartP1+0x10c>
 800459c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045a0:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8004608 <StartP1+0x110>
 80045a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045a8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			// send potential calculated from ADC
			msg.channel = P1;
 80045ac:	2304      	movs	r3, #4
 80045ae:	763b      	strb	r3, [r7, #24]
			msg.tick = (tick - start_tick);
 80045b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	617b      	str	r3, [r7, #20]
			msg.val = volt;
 80045b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ba:	60bb      	str	r3, [r7, #8]
		    osMessageQueuePut(queueHandle, &msg, 0U, 0U);
 80045bc:	4b13      	ldr	r3, [pc, #76]	@ (800460c <StartP1+0x114>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	f107 0108 	add.w	r1, r7, #8
 80045c4:	2300      	movs	r3, #0
 80045c6:	2200      	movs	r2, #0
 80045c8:	f007 fcc2 	bl	800bf50 <osMessageQueuePut>
			osDelayUntil(wait);
 80045cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80045ce:	f007 f9f1 	bl	800b9b4 <osDelayUntil>
		for(uint32_t i=0;i<end_loop;i++){
 80045d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d4:	3301      	adds	r3, #1
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045dc:	429a      	cmp	r2, r3
 80045de:	d3b9      	bcc.n	8004554 <StartP1+0x5c>
		}
		HAL_ADC_Stop(&hadc1);
 80045e0:	4806      	ldr	r0, [pc, #24]	@ (80045fc <StartP1+0x104>)
 80045e2:	f001 f964 	bl	80058ae <HAL_ADC_Stop>
	}
	osSemaphoreRelease(semReturnHandle);
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <StartP1+0x118>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f007 fbf8 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreAcquire(semP1Handle, osWaitForever);
 80045f0:	e78b      	b.n	800450a <StartP1+0x12>
 80045f2:	bf00      	nop
 80045f4:	200002f0 	.word	0x200002f0
 80045f8:	200004b0 	.word	0x200004b0
 80045fc:	2000007c 	.word	0x2000007c
 8004600:	447a0000 	.word	0x447a0000
 8004604:	42040000 	.word	0x42040000
 8004608:	47200000 	.word	0x47200000
 800460c:	200004bc 	.word	0x200004bc
 8004610:	200002f8 	.word	0x200002f8

08004614 <StartVSIM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVSIM */
void StartVSIM(void *argument)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVSIM */
	uint8_t channel = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
	uint8_t DAC_Vin = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	73bb      	strb	r3, [r7, #14]
	uint8_t DAC_Vw = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	737b      	strb	r3, [r7, #13]
  /* Infinite loop */
  for(;;)
  {
	// simultaneously measure the voltammerty channels by setting the the dac channels high for all channels that are measured
	osSemaphoreAcquire(semVSIMHandle, osWaitForever);
 8004628:	4b38      	ldr	r3, [pc, #224]	@ (800470c <StartVSIM+0xf8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f04f 31ff 	mov.w	r1, #4294967295
 8004630:	4618      	mov	r0, r3
 8004632:	f007 fb83 	bl	800bd3c <osSemaphoreAcquire>
	if(channels.on == ON && channels.broadcast == 1){
 8004636:	4b36      	ldr	r3, [pc, #216]	@ (8004710 <StartVSIM+0xfc>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d160      	bne.n	8004700 <StartVSIM+0xec>
 800463e:	4b34      	ldr	r3, [pc, #208]	@ (8004710 <StartVSIM+0xfc>)
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d15c      	bne.n	8004700 <StartVSIM+0xec>
		for(uint8_t i=0;i<4;i++){
 8004646:	2300      	movs	r3, #0
 8004648:	733b      	strb	r3, [r7, #12]
 800464a:	e04a      	b.n	80046e2 <StartVSIM+0xce>
			if(channels.parameters[i].ch_brdcst_on == 1){
 800464c:	7b3a      	ldrb	r2, [r7, #12]
 800464e:	4930      	ldr	r1, [pc, #192]	@ (8004710 <StartVSIM+0xfc>)
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	440b      	add	r3, r1
 800465a:	3304      	adds	r3, #4
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d13c      	bne.n	80046dc <StartVSIM+0xc8>
				channel = channel | (1<<i);
 8004662:	7b3b      	ldrb	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	b25a      	sxtb	r2, r3
 800466c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004670:	4313      	orrs	r3, r2
 8004672:	b25b      	sxtb	r3, r3
 8004674:	73fb      	strb	r3, [r7, #15]
				switch(i){
 8004676:	7b3b      	ldrb	r3, [r7, #12]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d82f      	bhi.n	80046dc <StartVSIM+0xc8>
 800467c:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <StartVSIM+0x70>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	08004695 	.word	0x08004695
 8004688:	080046a7 	.word	0x080046a7
 800468c:	080046b9 	.word	0x080046b9
 8004690:	080046cb 	.word	0x080046cb
					case 0:
						DAC_Vin = DAC_Vin | (1<<CH0);
 8004694:	7bbb      	ldrb	r3, [r7, #14]
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	73bb      	strb	r3, [r7, #14]
						DAC_Vw = DAC_Vw | (1<<CH1);
 800469c:	7b7b      	ldrb	r3, [r7, #13]
 800469e:	f043 0302 	orr.w	r3, r3, #2
 80046a2:	737b      	strb	r3, [r7, #13]
						break;
 80046a4:	e01a      	b.n	80046dc <StartVSIM+0xc8>
					case 1:
						DAC_Vin = DAC_Vin | (1<<CH3);
 80046a6:	7bbb      	ldrb	r3, [r7, #14]
 80046a8:	f043 0308 	orr.w	r3, r3, #8
 80046ac:	73bb      	strb	r3, [r7, #14]
						DAC_Vw = DAC_Vw | (1<<CH2);
 80046ae:	7b7b      	ldrb	r3, [r7, #13]
 80046b0:	f043 0304 	orr.w	r3, r3, #4
 80046b4:	737b      	strb	r3, [r7, #13]
						break;
 80046b6:	e011      	b.n	80046dc <StartVSIM+0xc8>
					case 2:
						DAC_Vin = DAC_Vin | (1<<CH4);
 80046b8:	7bbb      	ldrb	r3, [r7, #14]
 80046ba:	f043 0310 	orr.w	r3, r3, #16
 80046be:	73bb      	strb	r3, [r7, #14]
						DAC_Vw = DAC_Vw | (1<<CH5);
 80046c0:	7b7b      	ldrb	r3, [r7, #13]
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	737b      	strb	r3, [r7, #13]
						break;
 80046c8:	e008      	b.n	80046dc <StartVSIM+0xc8>
					case 3:
						DAC_Vin = DAC_Vin | (1<<CH7);
 80046ca:	7bbb      	ldrb	r3, [r7, #14]
 80046cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046d0:	73bb      	strb	r3, [r7, #14]
						DAC_Vw = DAC_Vw | (1<<CH6);
 80046d2:	7b7b      	ldrb	r3, [r7, #13]
 80046d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046d8:	737b      	strb	r3, [r7, #13]
						break;
 80046da:	bf00      	nop
		for(uint8_t i=0;i<4;i++){
 80046dc:	7b3b      	ldrb	r3, [r7, #12]
 80046de:	3301      	adds	r3, #1
 80046e0:	733b      	strb	r3, [r7, #12]
 80046e2:	7b3b      	ldrb	r3, [r7, #12]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d9b1      	bls.n	800464c <StartVSIM+0x38>
				}
			}
		}
		voltammerty(channel, SIM, DAC_Vin, DAC_Vw);
 80046e8:	7b7b      	ldrb	r3, [r7, #13]
 80046ea:	7bba      	ldrb	r2, [r7, #14]
 80046ec:	7bf8      	ldrb	r0, [r7, #15]
 80046ee:	2101      	movs	r1, #1
 80046f0:	f7fe ffac 	bl	800364c <voltammerty>
		channel = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
		DAC_Vin = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73bb      	strb	r3, [r7, #14]
		DAC_Vw = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	737b      	strb	r3, [r7, #13]
	}
	osSemaphoreRelease(semReturnHandle);
 8004700:	4b04      	ldr	r3, [pc, #16]	@ (8004714 <StartVSIM+0x100>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f007 fb6b 	bl	800bde0 <osSemaphoreRelease>
	osSemaphoreAcquire(semVSIMHandle, osWaitForever);
 800470a:	e78d      	b.n	8004628 <StartVSIM+0x14>
 800470c:	200002f4 	.word	0x200002f4
 8004710:	2000036c 	.word	0x2000036c
 8004714:	200002f8 	.word	0x200002f8

08004718 <StartPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrint */
void StartPrint(void *argument)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b0a0      	sub	sp, #128	@ 0x80
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	// get data from message queue and send data by UART
	while(osMessageQueueGetCount(queueHandle) != 0){
 8004720:	e1bf      	b.n	8004aa2 <StartPrint+0x38a>
		osMutexAcquire(mutexPrintHandle, osWaitForever);
 8004722:	4b77      	ldr	r3, [pc, #476]	@ (8004900 <StartPrint+0x1e8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f04f 31ff 	mov.w	r1, #4294967295
 800472a:	4618      	mov	r0, r3
 800472c:	f007 f9f5 	bl	800bb1a <osMutexAcquire>
		// if message run
		status = osMessageQueueGet(queueHandle, &msg, NULL, 0U);
 8004730:	4b74      	ldr	r3, [pc, #464]	@ (8004904 <StartPrint+0x1ec>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8004738:	2300      	movs	r3, #0
 800473a:	2200      	movs	r2, #0
 800473c:	f007 fc68 	bl	800c010 <osMessageQueueGet>
 8004740:	67f8      	str	r0, [r7, #124]	@ 0x7c
			if(status == osOK){
 8004742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004744:	2b00      	cmp	r3, #0
 8004746:	f040 81a7 	bne.w	8004a98 <StartPrint+0x380>
				// the pH meter, temperature and all the voltammerty channels have a own message
				if(msg.channel == P1){
 800474a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800474e:	2b04      	cmp	r3, #4
 8004750:	d163      	bne.n	800481a <StartPrint+0x102>
					while(UART_tx_flag != 0);
 8004752:	bf00      	nop
 8004754:	4b6c      	ldr	r3, [pc, #432]	@ (8004908 <StartPrint+0x1f0>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1fb      	bne.n	8004754 <StartPrint+0x3c>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"P1, ", 4);
 800475c:	2204      	movs	r2, #4
 800475e:	496b      	ldr	r1, [pc, #428]	@ (800490c <StartPrint+0x1f4>)
 8004760:	486b      	ldr	r0, [pc, #428]	@ (8004910 <StartPrint+0x1f8>)
 8004762:	f005 fd59 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004766:	4b68      	ldr	r3, [pc, #416]	@ (8004908 <StartPrint+0x1f0>)
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
					uint8_t buff_tick[10];
					uint8_t size_tick = float_to_ASCII((float)msg.tick, buff_tick);
 800476c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800477a:	4618      	mov	r0, r3
 800477c:	eeb0 0a67 	vmov.f32	s0, s15
 8004780:	f7fc fd06 	bl	8001190 <float_to_ASCII>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
					while(UART_tx_flag != 0);
 800478a:	bf00      	nop
 800478c:	4b5e      	ldr	r3, [pc, #376]	@ (8004908 <StartPrint+0x1f0>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1fb      	bne.n	800478c <StartPrint+0x74>
					HAL_UART_Transmit_DMA(&huart2, buff_tick, size_tick);
 8004794:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8004798:	b29a      	uxth	r2, r3
 800479a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800479e:	4619      	mov	r1, r3
 80047a0:	485b      	ldr	r0, [pc, #364]	@ (8004910 <StartPrint+0x1f8>)
 80047a2:	f005 fd39 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 80047a6:	4b58      	ldr	r3, [pc, #352]	@ (8004908 <StartPrint+0x1f0>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
					while(UART_tx_flag != 0);
 80047ac:	bf00      	nop
 80047ae:	4b56      	ldr	r3, [pc, #344]	@ (8004908 <StartPrint+0x1f0>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1fb      	bne.n	80047ae <StartPrint+0x96>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)", ", 2);
 80047b6:	2202      	movs	r2, #2
 80047b8:	4956      	ldr	r1, [pc, #344]	@ (8004914 <StartPrint+0x1fc>)
 80047ba:	4855      	ldr	r0, [pc, #340]	@ (8004910 <StartPrint+0x1f8>)
 80047bc:	f005 fd2c 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 80047c0:	4b51      	ldr	r3, [pc, #324]	@ (8004908 <StartPrint+0x1f0>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
					uint8_t buff_val[10];
					uint8_t size_val = float_to_ASCII(msg.val, buff_val);
 80047c6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80047ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80047ce:	4618      	mov	r0, r3
 80047d0:	eeb0 0a67 	vmov.f32	s0, s15
 80047d4:	f7fc fcdc 	bl	8001190 <float_to_ASCII>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
					while(UART_tx_flag != 0);
 80047de:	bf00      	nop
 80047e0:	4b49      	ldr	r3, [pc, #292]	@ (8004908 <StartPrint+0x1f0>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1fb      	bne.n	80047e0 <StartPrint+0xc8>
					HAL_UART_Transmit_DMA(&huart2, buff_val, size_val);
 80047e8:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80047f2:	4619      	mov	r1, r3
 80047f4:	4846      	ldr	r0, [pc, #280]	@ (8004910 <StartPrint+0x1f8>)
 80047f6:	f005 fd0f 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 80047fa:	4b43      	ldr	r3, [pc, #268]	@ (8004908 <StartPrint+0x1f0>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
					while(UART_tx_flag != 0);
 8004800:	bf00      	nop
 8004802:	4b41      	ldr	r3, [pc, #260]	@ (8004908 <StartPrint+0x1f0>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1fb      	bne.n	8004802 <StartPrint+0xea>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" V\n", 3);
 800480a:	2203      	movs	r2, #3
 800480c:	4942      	ldr	r1, [pc, #264]	@ (8004918 <StartPrint+0x200>)
 800480e:	4840      	ldr	r0, [pc, #256]	@ (8004910 <StartPrint+0x1f8>)
 8004810:	f005 fd02 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004814:	4b3c      	ldr	r3, [pc, #240]	@ (8004908 <StartPrint+0x1f0>)
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
				}
				if(msg.channel == TEMP){
 800481a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800481e:	2b05      	cmp	r3, #5
 8004820:	d136      	bne.n	8004890 <StartPrint+0x178>
					while(UART_tx_flag != 0);
 8004822:	bf00      	nop
 8004824:	4b38      	ldr	r3, [pc, #224]	@ (8004908 <StartPrint+0x1f0>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1fb      	bne.n	8004824 <StartPrint+0x10c>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"TEMP, ", 6);
 800482c:	2206      	movs	r2, #6
 800482e:	493b      	ldr	r1, [pc, #236]	@ (800491c <StartPrint+0x204>)
 8004830:	4837      	ldr	r0, [pc, #220]	@ (8004910 <StartPrint+0x1f8>)
 8004832:	f005 fcf1 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004836:	4b34      	ldr	r3, [pc, #208]	@ (8004908 <StartPrint+0x1f0>)
 8004838:	2201      	movs	r2, #1
 800483a:	701a      	strb	r2, [r3, #0]
					uint8_t buff_val[10];
					uint8_t size_val = float_to_ASCII(msg.val, buff_val);
 800483c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004840:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004844:	4618      	mov	r0, r3
 8004846:	eeb0 0a67 	vmov.f32	s0, s15
 800484a:	f7fc fca1 	bl	8001190 <float_to_ASCII>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
					while(UART_tx_flag != 0);
 8004854:	bf00      	nop
 8004856:	4b2c      	ldr	r3, [pc, #176]	@ (8004908 <StartPrint+0x1f0>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1fb      	bne.n	8004856 <StartPrint+0x13e>
					HAL_UART_Transmit_DMA(&huart2, buff_val, size_val);
 800485e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8004862:	b29a      	uxth	r2, r3
 8004864:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004868:	4619      	mov	r1, r3
 800486a:	4829      	ldr	r0, [pc, #164]	@ (8004910 <StartPrint+0x1f8>)
 800486c:	f005 fcd4 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004870:	4b25      	ldr	r3, [pc, #148]	@ (8004908 <StartPrint+0x1f0>)
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
					while(UART_tx_flag != 0);
 8004876:	bf00      	nop
 8004878:	4b23      	ldr	r3, [pc, #140]	@ (8004908 <StartPrint+0x1f0>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1fb      	bne.n	8004878 <StartPrint+0x160>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)" C\n", 3);
 8004880:	2203      	movs	r2, #3
 8004882:	4927      	ldr	r1, [pc, #156]	@ (8004920 <StartPrint+0x208>)
 8004884:	4822      	ldr	r0, [pc, #136]	@ (8004910 <StartPrint+0x1f8>)
 8004886:	f005 fcc7 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 800488a:	4b1f      	ldr	r3, [pc, #124]	@ (8004908 <StartPrint+0x1f0>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
				}
				// check which voltammerty channel is in the message and send appropriate message accordingly
				if(msg.channel == V1 || msg.channel == V2 || msg.channel == V3 || msg.channel == V4){
 8004890:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00c      	beq.n	80048b2 <StartPrint+0x19a>
 8004898:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800489c:	2b01      	cmp	r3, #1
 800489e:	d008      	beq.n	80048b2 <StartPrint+0x19a>
 80048a0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d004      	beq.n	80048b2 <StartPrint+0x19a>
 80048a8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	f040 80f3 	bne.w	8004a98 <StartPrint+0x380>
					while(UART_tx_flag != 0);
 80048b2:	bf00      	nop
 80048b4:	4b14      	ldr	r3, [pc, #80]	@ (8004908 <StartPrint+0x1f0>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1fb      	bne.n	80048b4 <StartPrint+0x19c>
					switch(msg.channel){
 80048bc:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d83b      	bhi.n	800493c <StartPrint+0x224>
 80048c4:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <StartPrint+0x1b4>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048f5 	.word	0x080048f5
 80048d8:	08004931 	.word	0x08004931
						case V1:
							HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"V1, ", 4);
 80048dc:	2204      	movs	r2, #4
 80048de:	4911      	ldr	r1, [pc, #68]	@ (8004924 <StartPrint+0x20c>)
 80048e0:	480b      	ldr	r0, [pc, #44]	@ (8004910 <StartPrint+0x1f8>)
 80048e2:	f005 fc99 	bl	800a218 <HAL_UART_Transmit_DMA>
							break;
 80048e6:	e029      	b.n	800493c <StartPrint+0x224>
						case V2:
							HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"V2, ", 4);
 80048e8:	2204      	movs	r2, #4
 80048ea:	490f      	ldr	r1, [pc, #60]	@ (8004928 <StartPrint+0x210>)
 80048ec:	4808      	ldr	r0, [pc, #32]	@ (8004910 <StartPrint+0x1f8>)
 80048ee:	f005 fc93 	bl	800a218 <HAL_UART_Transmit_DMA>
							break;
 80048f2:	e023      	b.n	800493c <StartPrint+0x224>
						case V3:
							HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"V3, ", 4);
 80048f4:	2204      	movs	r2, #4
 80048f6:	490d      	ldr	r1, [pc, #52]	@ (800492c <StartPrint+0x214>)
 80048f8:	4805      	ldr	r0, [pc, #20]	@ (8004910 <StartPrint+0x1f8>)
 80048fa:	f005 fc8d 	bl	800a218 <HAL_UART_Transmit_DMA>
							break;
 80048fe:	e01d      	b.n	800493c <StartPrint+0x224>
 8004900:	200002d8 	.word	0x200002d8
 8004904:	200004bc 	.word	0x200004bc
 8004908:	200002fc 	.word	0x200002fc
 800490c:	0800ffbc 	.word	0x0800ffbc
 8004910:	20000198 	.word	0x20000198
 8004914:	0800ffc4 	.word	0x0800ffc4
 8004918:	0800ffc8 	.word	0x0800ffc8
 800491c:	0800ffcc 	.word	0x0800ffcc
 8004920:	0800ffd4 	.word	0x0800ffd4
 8004924:	0800ffd8 	.word	0x0800ffd8
 8004928:	0800ffe0 	.word	0x0800ffe0
 800492c:	0800ffe8 	.word	0x0800ffe8
						case V4:
							HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"V4, ", 4);
 8004930:	2204      	movs	r2, #4
 8004932:	4962      	ldr	r1, [pc, #392]	@ (8004abc <StartPrint+0x3a4>)
 8004934:	4862      	ldr	r0, [pc, #392]	@ (8004ac0 <StartPrint+0x3a8>)
 8004936:	f005 fc6f 	bl	800a218 <HAL_UART_Transmit_DMA>
							break;
 800493a:	bf00      	nop
					}
					UART_tx_flag = 1;
 800493c:	4b61      	ldr	r3, [pc, #388]	@ (8004ac4 <StartPrint+0x3ac>)
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]

					uint8_t buff_tick[10];
					uint8_t size_tick = float_to_ASCII((float)msg.tick, buff_tick);
 8004942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004950:	4618      	mov	r0, r3
 8004952:	eeb0 0a67 	vmov.f32	s0, s15
 8004956:	f7fc fc1b 	bl	8001190 <float_to_ASCII>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
					while(UART_tx_flag != 0);
 8004960:	bf00      	nop
 8004962:	4b58      	ldr	r3, [pc, #352]	@ (8004ac4 <StartPrint+0x3ac>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1fb      	bne.n	8004962 <StartPrint+0x24a>
					HAL_UART_Transmit_DMA(&huart2, buff_tick, size_tick);
 800496a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800496e:	b29a      	uxth	r2, r3
 8004970:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004974:	4619      	mov	r1, r3
 8004976:	4852      	ldr	r0, [pc, #328]	@ (8004ac0 <StartPrint+0x3a8>)
 8004978:	f005 fc4e 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 800497c:	4b51      	ldr	r3, [pc, #324]	@ (8004ac4 <StartPrint+0x3ac>)
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
					while(UART_tx_flag != 0);
 8004982:	bf00      	nop
 8004984:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac4 <StartPrint+0x3ac>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1fb      	bne.n	8004984 <StartPrint+0x26c>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)", ", 2);
 800498c:	2202      	movs	r2, #2
 800498e:	494e      	ldr	r1, [pc, #312]	@ (8004ac8 <StartPrint+0x3b0>)
 8004990:	484b      	ldr	r0, [pc, #300]	@ (8004ac0 <StartPrint+0x3a8>)
 8004992:	f005 fc41 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004996:	4b4b      	ldr	r3, [pc, #300]	@ (8004ac4 <StartPrint+0x3ac>)
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
					uint8_t buff_val_x[10];
					uint8_t size_val_x = float_to_ASCII(msg.val_x, buff_val_x);
 800499c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80049a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049a4:	4618      	mov	r0, r3
 80049a6:	eeb0 0a67 	vmov.f32	s0, s15
 80049aa:	f7fc fbf1 	bl	8001190 <float_to_ASCII>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
					while(UART_tx_flag != 0);
 80049b4:	bf00      	nop
 80049b6:	4b43      	ldr	r3, [pc, #268]	@ (8004ac4 <StartPrint+0x3ac>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1fb      	bne.n	80049b6 <StartPrint+0x29e>
					HAL_UART_Transmit_DMA(&huart2, buff_val_x, size_val_x);
 80049be:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049c8:	4619      	mov	r1, r3
 80049ca:	483d      	ldr	r0, [pc, #244]	@ (8004ac0 <StartPrint+0x3a8>)
 80049cc:	f005 fc24 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 80049d0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac4 <StartPrint+0x3ac>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
					while(UART_tx_flag != 0);
 80049d6:	bf00      	nop
 80049d8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ac4 <StartPrint+0x3ac>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1fb      	bne.n	80049d8 <StartPrint+0x2c0>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)", ", 2);
 80049e0:	2202      	movs	r2, #2
 80049e2:	4939      	ldr	r1, [pc, #228]	@ (8004ac8 <StartPrint+0x3b0>)
 80049e4:	4836      	ldr	r0, [pc, #216]	@ (8004ac0 <StartPrint+0x3a8>)
 80049e6:	f005 fc17 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 80049ea:	4b36      	ldr	r3, [pc, #216]	@ (8004ac4 <StartPrint+0x3ac>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
					uint8_t buff_val[10];
					uint8_t size_val = float_to_ASCII(msg.val, buff_val);
 80049f0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80049f4:	f107 0318 	add.w	r3, r7, #24
 80049f8:	4618      	mov	r0, r3
 80049fa:	eeb0 0a67 	vmov.f32	s0, s15
 80049fe:	f7fc fbc7 	bl	8001190 <float_to_ASCII>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
					while(UART_tx_flag != 0);
 8004a08:	bf00      	nop
 8004a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac4 <StartPrint+0x3ac>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1fb      	bne.n	8004a0a <StartPrint+0x2f2>
					HAL_UART_Transmit_DMA(&huart2, buff_val, size_val);
 8004a12:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	f107 0318 	add.w	r3, r7, #24
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4828      	ldr	r0, [pc, #160]	@ (8004ac0 <StartPrint+0x3a8>)
 8004a20:	f005 fbfa 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004a24:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <StartPrint+0x3ac>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
					while(UART_tx_flag != 0);
 8004a2a:	bf00      	nop
 8004a2c:	4b25      	ldr	r3, [pc, #148]	@ (8004ac4 <StartPrint+0x3ac>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1fb      	bne.n	8004a2c <StartPrint+0x314>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)", ", 2);
 8004a34:	2202      	movs	r2, #2
 8004a36:	4924      	ldr	r1, [pc, #144]	@ (8004ac8 <StartPrint+0x3b0>)
 8004a38:	4821      	ldr	r0, [pc, #132]	@ (8004ac0 <StartPrint+0x3a8>)
 8004a3a:	f005 fbed 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004a3e:	4b21      	ldr	r3, [pc, #132]	@ (8004ac4 <StartPrint+0x3ac>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
					uint8_t buff_val_rf[10];
					uint8_t size_val_rf = float_to_ASCII(msg.val_rf, buff_val_rf);
 8004a44:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8004a48:	f107 030c 	add.w	r3, r7, #12
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a52:	f7fc fb9d 	bl	8001190 <float_to_ASCII>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
					while(UART_tx_flag != 0);
 8004a5c:	bf00      	nop
 8004a5e:	4b19      	ldr	r3, [pc, #100]	@ (8004ac4 <StartPrint+0x3ac>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1fb      	bne.n	8004a5e <StartPrint+0x346>
					HAL_UART_Transmit_DMA(&huart2, buff_val_rf, size_val_rf);
 8004a66:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	4619      	mov	r1, r3
 8004a72:	4813      	ldr	r0, [pc, #76]	@ (8004ac0 <StartPrint+0x3a8>)
 8004a74:	f005 fbd0 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004a78:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <StartPrint+0x3ac>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
					while(UART_tx_flag != 0);
 8004a7e:	bf00      	nop
 8004a80:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <StartPrint+0x3ac>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1fb      	bne.n	8004a80 <StartPrint+0x368>
					HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"\n", 1);
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4910      	ldr	r1, [pc, #64]	@ (8004acc <StartPrint+0x3b4>)
 8004a8c:	480c      	ldr	r0, [pc, #48]	@ (8004ac0 <StartPrint+0x3a8>)
 8004a8e:	f005 fbc3 	bl	800a218 <HAL_UART_Transmit_DMA>
					UART_tx_flag = 1;
 8004a92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <StartPrint+0x3ac>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	701a      	strb	r2, [r3, #0]
				}
			}
			osMutexRelease(mutexPrintHandle);
 8004a98:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <StartPrint+0x3b8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f007 f887 	bl	800bbb0 <osMutexRelease>
	while(osMessageQueueGetCount(queueHandle) != 0){
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <StartPrint+0x3bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f007 fb10 	bl	800c0cc <osMessageQueueGetCount>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f47f ae37 	bne.w	8004722 <StartPrint+0xa>
	}
	osDelay(1);
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	f006 ff62 	bl	800b97e <osDelay>
	while(osMessageQueueGetCount(queueHandle) != 0){
 8004aba:	e7f2      	b.n	8004aa2 <StartPrint+0x38a>
 8004abc:	0800fff0 	.word	0x0800fff0
 8004ac0:	20000198 	.word	0x20000198
 8004ac4:	200002fc 	.word	0x200002fc
 8004ac8:	0800ffc4 	.word	0x0800ffc4
 8004acc:	0800fff8 	.word	0x0800fff8
 8004ad0:	200002d8 	.word	0x200002d8
 8004ad4:	200004bc 	.word	0x200004bc

08004ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a04      	ldr	r2, [pc, #16]	@ (8004af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004aea:	f000 fb05 	bl	80050f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00

08004afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b00:	b672      	cpsid	i
}
 8004b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <Error_Handler+0x8>

08004b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0e:	4b11      	ldr	r3, [pc, #68]	@ (8004b54 <HAL_MspInit+0x4c>)
 8004b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b12:	4a10      	ldr	r2, [pc, #64]	@ (8004b54 <HAL_MspInit+0x4c>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b54 <HAL_MspInit+0x4c>)
 8004b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	607b      	str	r3, [r7, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_MspInit+0x4c>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b54 <HAL_MspInit+0x4c>)
 8004b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b32:	4b08      	ldr	r3, [pc, #32]	@ (8004b54 <HAL_MspInit+0x4c>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	210f      	movs	r1, #15
 8004b42:	f06f 0001 	mvn.w	r0, #1
 8004b46:	f001 fdbd 	bl	80066c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000

08004b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b09e      	sub	sp, #120	@ 0x78
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b70:	f107 0310 	add.w	r3, r7, #16
 8004b74:	2254      	movs	r2, #84	@ 0x54
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f00a fd45 	bl	800f608 <memset>
  if(hadc->Instance==ADC1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a25      	ldr	r2, [pc, #148]	@ (8004c18 <HAL_ADC_MspInit+0xc0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d143      	bne.n	8004c10 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004b8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b92:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004ba0:	2307      	movs	r3, #7
 8004ba2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004bac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f003 fe58 	bl	800886c <HAL_RCCEx_PeriphCLKConfig>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8004bc2:	f7ff ff9b 	bl	8004afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <HAL_ADC_MspInit+0xc4>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	4a14      	ldr	r2, [pc, #80]	@ (8004c1c <HAL_ADC_MspInit+0xc4>)
 8004bcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bd2:	4b12      	ldr	r3, [pc, #72]	@ (8004c1c <HAL_ADC_MspInit+0xc4>)
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bde:	4b0f      	ldr	r3, [pc, #60]	@ (8004c1c <HAL_ADC_MspInit+0xc4>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be2:	4a0e      	ldr	r2, [pc, #56]	@ (8004c1c <HAL_ADC_MspInit+0xc4>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bea:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <HAL_ADC_MspInit+0xc4>)
 8004bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004bfa:	230b      	movs	r3, #11
 8004bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c02:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c06:	4619      	mov	r1, r3
 8004c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c0c:	f001 fffa 	bl	8006c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c10:	bf00      	nop
 8004c12:	3778      	adds	r7, #120	@ 0x78
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	50040000 	.word	0x50040000
 8004c1c:	40021000 	.word	0x40021000

08004c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b09e      	sub	sp, #120	@ 0x78
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c38:	f107 0310 	add.w	r3, r7, #16
 8004c3c:	2254      	movs	r2, #84	@ 0x54
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f00a fce1 	bl	800f608 <memset>
  if(hi2c->Instance==I2C1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc8 <HAL_I2C_MspInit+0xa8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d137      	bne.n	8004cc0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c50:	2340      	movs	r3, #64	@ 0x40
 8004c52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c58:	f107 0310 	add.w	r3, r7, #16
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f003 fe05 	bl	800886c <HAL_RCCEx_PeriphCLKConfig>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004c68:	f7ff ff48 	bl	8004afc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ccc <HAL_I2C_MspInit+0xac>)
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c70:	4a16      	ldr	r2, [pc, #88]	@ (8004ccc <HAL_I2C_MspInit+0xac>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c78:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <HAL_I2C_MspInit+0xac>)
 8004c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c84:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004c88:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c8a:	2312      	movs	r3, #18
 8004c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c92:	2303      	movs	r3, #3
 8004c94:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c96:	2304      	movs	r3, #4
 8004c98:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ca4:	f001 ffae 	bl	8006c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ca8:	4b08      	ldr	r3, [pc, #32]	@ (8004ccc <HAL_I2C_MspInit+0xac>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cac:	4a07      	ldr	r2, [pc, #28]	@ (8004ccc <HAL_I2C_MspInit+0xac>)
 8004cae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_I2C_MspInit+0xac>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004cc0:	bf00      	nop
 8004cc2:	3778      	adds	r7, #120	@ 0x78
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40005400 	.word	0x40005400
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a17      	ldr	r2, [pc, #92]	@ (8004d4c <HAL_SPI_MspInit+0x7c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d128      	bne.n	8004d44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cf2:	4b17      	ldr	r3, [pc, #92]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf6:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004cf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8004cfe:	4b14      	ldr	r3, [pc, #80]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0e:	4a10      	ldr	r2, [pc, #64]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d16:	4b0e      	ldr	r3, [pc, #56]	@ (8004d50 <HAL_SPI_MspInit+0x80>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004d22:	23e0      	movs	r3, #224	@ 0xe0
 8004d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d26:	2302      	movs	r3, #2
 8004d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d32:	2305      	movs	r3, #5
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d40:	f001 ff60 	bl	8006c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004d44:	bf00      	nop
 8004d46:	3728      	adds	r7, #40	@ 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40013000 	.word	0x40013000
 8004d50:	40021000 	.word	0x40021000

08004d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b09e      	sub	sp, #120	@ 0x78
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	609a      	str	r2, [r3, #8]
 8004d68:	60da      	str	r2, [r3, #12]
 8004d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	2254      	movs	r2, #84	@ 0x54
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f00a fc47 	bl	800f608 <memset>
  if(huart->Instance==USART2)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a55      	ldr	r2, [pc, #340]	@ (8004ed4 <HAL_UART_MspInit+0x180>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	f040 80a3 	bne.w	8004ecc <HAL_UART_MspInit+0x178>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d86:	2302      	movs	r3, #2
 8004d88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d8e:	f107 0310 	add.w	r3, r7, #16
 8004d92:	4618      	mov	r0, r3
 8004d94:	f003 fd6a 	bl	800886c <HAL_RCCEx_PeriphCLKConfig>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004d9e:	f7ff fead 	bl	8004afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004da2:	4b4d      	ldr	r3, [pc, #308]	@ (8004ed8 <HAL_UART_MspInit+0x184>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da6:	4a4c      	ldr	r2, [pc, #304]	@ (8004ed8 <HAL_UART_MspInit+0x184>)
 8004da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dae:	4b4a      	ldr	r3, [pc, #296]	@ (8004ed8 <HAL_UART_MspInit+0x184>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dba:	4b47      	ldr	r3, [pc, #284]	@ (8004ed8 <HAL_UART_MspInit+0x184>)
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	4a46      	ldr	r2, [pc, #280]	@ (8004ed8 <HAL_UART_MspInit+0x184>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dc6:	4b44      	ldr	r3, [pc, #272]	@ (8004ed8 <HAL_UART_MspInit+0x184>)
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dde:	2303      	movs	r3, #3
 8004de0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004de2:	2307      	movs	r3, #7
 8004de4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004de6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004dea:	4619      	mov	r1, r3
 8004dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004df0:	f001 ff08 	bl	8006c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004df4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004df8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e02:	2303      	movs	r3, #3
 8004e04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004e06:	2303      	movs	r3, #3
 8004e08:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004e0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e14:	f001 fef6 	bl	8006c04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004e18:	4b30      	ldr	r3, [pc, #192]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e1a:	4a31      	ldr	r2, [pc, #196]	@ (8004ee0 <HAL_UART_MspInit+0x18c>)
 8004e1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8004e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e20:	2202      	movs	r2, #2
 8004e22:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e24:	4b2d      	ldr	r3, [pc, #180]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e30:	4b2a      	ldr	r3, [pc, #168]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e32:	2280      	movs	r2, #128	@ 0x80
 8004e34:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e36:	4b29      	ldr	r3, [pc, #164]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e3c:	4b27      	ldr	r3, [pc, #156]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004e42:	4b26      	ldr	r3, [pc, #152]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e48:	4b24      	ldr	r3, [pc, #144]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004e4e:	4823      	ldr	r0, [pc, #140]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e50:	f001 fc62 	bl	8006718 <HAL_DMA_Init>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8004e5a:	f7ff fe4f 	bl	8004afc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e62:	675a      	str	r2, [r3, #116]	@ 0x74
 8004e64:	4a1d      	ldr	r2, [pc, #116]	@ (8004edc <HAL_UART_MspInit+0x188>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee8 <HAL_UART_MspInit+0x194>)
 8004e6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8004e70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e72:	2202      	movs	r2, #2
 8004e74:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e76:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e78:	2210      	movs	r2, #16
 8004e7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e82:	4b18      	ldr	r3, [pc, #96]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e84:	2280      	movs	r2, #128	@ 0x80
 8004e86:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e88:	4b16      	ldr	r3, [pc, #88]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004e94:	4b13      	ldr	r3, [pc, #76]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004ea0:	4810      	ldr	r0, [pc, #64]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004ea2:	f001 fc39 	bl	8006718 <HAL_DMA_Init>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_UART_MspInit+0x15c>
    {
      Error_Handler();
 8004eac:	f7ff fe26 	bl	8004afc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004eb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee4 <HAL_UART_MspInit+0x190>)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2105      	movs	r1, #5
 8004ec0:	2026      	movs	r0, #38	@ 0x26
 8004ec2:	f001 fbff 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ec6:	2026      	movs	r0, #38	@ 0x26
 8004ec8:	f001 fc18 	bl	80066fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ecc:	bf00      	nop
 8004ece:	3778      	adds	r7, #120	@ 0x78
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	20000220 	.word	0x20000220
 8004ee0:	4002006c 	.word	0x4002006c
 8004ee4:	20000268 	.word	0x20000268
 8004ee8:	40020080 	.word	0x40020080

08004eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	@ 0x30
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004efa:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb4 <HAL_InitTick+0xc8>)
 8004efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efe:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb4 <HAL_InitTick+0xc8>)
 8004f00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f04:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f06:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb4 <HAL_InitTick+0xc8>)
 8004f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f12:	f107 020c 	add.w	r2, r7, #12
 8004f16:	f107 0310 	add.w	r3, r7, #16
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f003 fc13 	bl	8008748 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004f22:	f003 fbfb 	bl	800871c <HAL_RCC_GetPCLK2Freq>
 8004f26:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	4a23      	ldr	r2, [pc, #140]	@ (8004fb8 <HAL_InitTick+0xcc>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	0c9b      	lsrs	r3, r3, #18
 8004f32:	3b01      	subs	r3, #1
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004f36:	4b21      	ldr	r3, [pc, #132]	@ (8004fbc <HAL_InitTick+0xd0>)
 8004f38:	4a21      	ldr	r2, [pc, #132]	@ (8004fc0 <HAL_InitTick+0xd4>)
 8004f3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <HAL_InitTick+0xd0>)
 8004f3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004f42:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004f44:	4a1d      	ldr	r2, [pc, #116]	@ (8004fbc <HAL_InitTick+0xd0>)
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fbc <HAL_InitTick+0xd0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f50:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <HAL_InitTick+0xd0>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f56:	4b19      	ldr	r3, [pc, #100]	@ (8004fbc <HAL_InitTick+0xd0>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004f5c:	4817      	ldr	r0, [pc, #92]	@ (8004fbc <HAL_InitTick+0xd0>)
 8004f5e:	f004 feab 	bl	8009cb8 <HAL_TIM_Base_Init>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004f68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004f70:	4812      	ldr	r0, [pc, #72]	@ (8004fbc <HAL_InitTick+0xd0>)
 8004f72:	f004 ff03 	bl	8009d7c <HAL_TIM_Base_Start_IT>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004f7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d111      	bne.n	8004fa8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004f84:	2019      	movs	r0, #25
 8004f86:	f001 fbb9 	bl	80066fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b0f      	cmp	r3, #15
 8004f8e:	d808      	bhi.n	8004fa2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8004f90:	2200      	movs	r2, #0
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	2019      	movs	r0, #25
 8004f96:	f001 fb95 	bl	80066c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc4 <HAL_InitTick+0xd8>)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	e002      	b.n	8004fa8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3730      	adds	r7, #48	@ 0x30
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	431bde83 	.word	0x431bde83
 8004fbc:	200004c0 	.word	0x200004c0
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	20000004 	.word	0x20000004

08004fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004fcc:	bf00      	nop
 8004fce:	e7fd      	b.n	8004fcc <NMI_Handler+0x4>

08004fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <HardFault_Handler+0x4>

08004fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fdc:	bf00      	nop
 8004fde:	e7fd      	b.n	8004fdc <MemManage_Handler+0x4>

08004fe0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <BusFault_Handler+0x4>

08004fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <UsageFault_Handler+0x4>

08004ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005004:	4802      	ldr	r0, [pc, #8]	@ (8005010 <DMA1_Channel6_IRQHandler+0x10>)
 8005006:	f001 fd1e 	bl	8006a46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000220 	.word	0x20000220

08005014 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005018:	4802      	ldr	r0, [pc, #8]	@ (8005024 <DMA1_Channel7_IRQHandler+0x10>)
 800501a:	f001 fd14 	bl	8006a46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000268 	.word	0x20000268

08005028 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800502c:	4802      	ldr	r0, [pc, #8]	@ (8005038 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800502e:	f004 fef9 	bl	8009e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200004c0 	.word	0x200004c0

0800503c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005040:	4802      	ldr	r0, [pc, #8]	@ (800504c <USART2_IRQHandler+0x10>)
 8005042:	f005 f9b1 	bl	800a3a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000198 	.word	0x20000198

08005050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005054:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <SystemInit+0x20>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505a:	4a05      	ldr	r2, [pc, #20]	@ (8005070 <SystemInit+0x20>)
 800505c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000ed00 	.word	0xe000ed00

08005074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80050ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005078:	f7ff ffea 	bl	8005050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800507c:	480c      	ldr	r0, [pc, #48]	@ (80050b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800507e:	490d      	ldr	r1, [pc, #52]	@ (80050b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005080:	4a0d      	ldr	r2, [pc, #52]	@ (80050b8 <LoopForever+0xe>)
  movs r3, #0
 8005082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005084:	e002      	b.n	800508c <LoopCopyDataInit>

08005086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800508a:	3304      	adds	r3, #4

0800508c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800508c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800508e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005090:	d3f9      	bcc.n	8005086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005092:	4a0a      	ldr	r2, [pc, #40]	@ (80050bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005094:	4c0a      	ldr	r4, [pc, #40]	@ (80050c0 <LoopForever+0x16>)
  movs r3, #0
 8005096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005098:	e001      	b.n	800509e <LoopFillZerobss>

0800509a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800509a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800509c:	3204      	adds	r2, #4

0800509e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800509e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050a0:	d3fb      	bcc.n	800509a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050a2:	f00a fb15 	bl	800f6d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050a6:	f7fd fddf 	bl	8002c68 <main>

080050aa <LoopForever>:

LoopForever:
    b LoopForever
 80050aa:	e7fe      	b.n	80050aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80050ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80050b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80050b8:	08010278 	.word	0x08010278
  ldr r2, =_sbss
 80050bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80050c0:	20003378 	.word	0x20003378

080050c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050c4:	e7fe      	b.n	80050c4 <ADC1_IRQHandler>

080050c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050d0:	2003      	movs	r0, #3
 80050d2:	f001 faec 	bl	80066ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050d6:	200f      	movs	r0, #15
 80050d8:	f7ff ff08 	bl	8004eec <HAL_InitTick>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	71fb      	strb	r3, [r7, #7]
 80050e6:	e001      	b.n	80050ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80050e8:	f7ff fd0e 	bl	8004b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050ec:	79fb      	ldrb	r3, [r7, #7]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_IncTick+0x20>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_IncTick+0x24>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4413      	add	r3, r2
 8005108:	4a04      	ldr	r2, [pc, #16]	@ (800511c <HAL_IncTick+0x24>)
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000008 	.word	0x20000008
 800511c:	2000050c 	.word	0x2000050c

08005120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return uwTick;
 8005124:	4b03      	ldr	r3, [pc, #12]	@ (8005134 <HAL_GetTick+0x14>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	2000050c 	.word	0x2000050c

08005138 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3360      	adds	r3, #96	@ 0x60
 80051b2:	461a      	mov	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <LL_ADC_SetOffset+0x44>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	03fff000 	.word	0x03fff000

080051e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3360      	adds	r3, #96	@ 0x60
 80051f6:	461a      	mov	r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3360      	adds	r3, #96	@ 0x60
 8005224:	461a      	mov	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	431a      	orrs	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3330      	adds	r3, #48	@ 0x30
 8005280:	461a      	mov	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	4413      	add	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	211f      	movs	r1, #31
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	0e9b      	lsrs	r3, r3, #26
 80052a8:	f003 011f 	and.w	r1, r3, #31
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	fa01 f303 	lsl.w	r3, r1, r3
 80052b6:	431a      	orrs	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3314      	adds	r3, #20
 80052d8:	461a      	mov	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	0e5b      	lsrs	r3, r3, #25
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	4413      	add	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	0d1b      	lsrs	r3, r3, #20
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	2107      	movs	r1, #7
 80052f6:	fa01 f303 	lsl.w	r3, r1, r3
 80052fa:	43db      	mvns	r3, r3
 80052fc:	401a      	ands	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	0d1b      	lsrs	r3, r3, #20
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	fa01 f303 	lsl.w	r3, r1, r3
 800530c:	431a      	orrs	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0318 	and.w	r3, r3, #24
 8005342:	4908      	ldr	r1, [pc, #32]	@ (8005364 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005344:	40d9      	lsrs	r1, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	400b      	ands	r3, r1
 800534a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534e:	431a      	orrs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	0007ffff 	.word	0x0007ffff

08005368 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005378:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6093      	str	r3, [r2, #8]
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a0:	d101      	bne.n	80053a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80053c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053f0:	d101      	bne.n	80053f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005414:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800543c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005440:	f043 0202 	orr.w	r2, r3, #2
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <LL_ADC_IsEnabled+0x18>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <LL_ADC_IsEnabled+0x1a>
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d101      	bne.n	8005492 <LL_ADC_IsDisableOngoing+0x18>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <LL_ADC_IsDisableOngoing+0x1a>
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80054dc:	f043 0210 	orr.w	r2, r3, #16
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d101      	bne.n	8005508 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005526:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b08      	cmp	r3, #8
 8005550:	d101      	bne.n	8005556 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e126      	b.n	80057cc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005588:	2b00      	cmp	r3, #0
 800558a:	d109      	bne.n	80055a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fae3 	bl	8004b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff fef1 	bl	800538c <LL_ADC_IsDeepPowerDownEnabled>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff fed7 	bl	8005368 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff ff0c 	bl	80053dc <LL_ADC_IsInternalRegulatorEnabled>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d115      	bne.n	80055f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fef0 	bl	80053b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055d4:	4b7f      	ldr	r3, [pc, #508]	@ (80057d4 <HAL_ADC_Init+0x270>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	099b      	lsrs	r3, r3, #6
 80055da:	4a7f      	ldr	r2, [pc, #508]	@ (80057d8 <HAL_ADC_Init+0x274>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	099b      	lsrs	r3, r3, #6
 80055e2:	3301      	adds	r3, #1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055e8:	e002      	b.n	80055f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f9      	bne.n	80055ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff feee 	bl	80053dc <LL_ADC_IsInternalRegulatorEnabled>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	f043 0210 	orr.w	r2, r3, #16
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005616:	f043 0201 	orr.w	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff ff62 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 800562c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b00      	cmp	r3, #0
 8005638:	f040 80bf 	bne.w	80057ba <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f040 80bb 	bne.w	80057ba <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005648:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800564c:	f043 0202 	orr.w	r2, r3, #2
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fefb 	bl	8005454 <LL_ADC_IsEnabled>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005664:	485d      	ldr	r0, [pc, #372]	@ (80057dc <HAL_ADC_Init+0x278>)
 8005666:	f7ff fef5 	bl	8005454 <LL_ADC_IsEnabled>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4619      	mov	r1, r3
 8005676:	485a      	ldr	r0, [pc, #360]	@ (80057e0 <HAL_ADC_Init+0x27c>)
 8005678:	f7ff fd5e 	bl	8005138 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	7e5b      	ldrb	r3, [r3, #25]
 8005680:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005686:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800568c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005692:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800569a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d106      	bne.n	80056b8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	3b01      	subs	r3, #1
 80056b0:	045b      	lsls	r3, r3, #17
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	4b42      	ldr	r3, [pc, #264]	@ (80057e4 <HAL_ADC_Init+0x280>)
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6812      	ldr	r2, [r2, #0]
 80056e2:	69b9      	ldr	r1, [r7, #24]
 80056e4:	430b      	orrs	r3, r1
 80056e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff ff26 	bl	800553e <LL_ADC_INJ_IsConversionOngoing>
 80056f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d13d      	bne.n	8005776 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d13a      	bne.n	8005776 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005704:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800570c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800571c:	f023 0302 	bic.w	r3, r3, #2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	69b9      	ldr	r1, [r7, #24]
 8005726:	430b      	orrs	r3, r1
 8005728:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005730:	2b01      	cmp	r3, #1
 8005732:	d118      	bne.n	8005766 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800573e:	f023 0304 	bic.w	r3, r3, #4
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800574a:	4311      	orrs	r1, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005750:	4311      	orrs	r1, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005756:	430a      	orrs	r2, r1
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	611a      	str	r2, [r3, #16]
 8005764:	e007      	b.n	8005776 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d10c      	bne.n	8005798 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	f023 010f 	bic.w	r1, r3, #15
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	631a      	str	r2, [r3, #48]	@ 0x30
 8005796:	e007      	b.n	80057a8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 020f 	bic.w	r2, r2, #15
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ac:	f023 0303 	bic.w	r3, r3, #3
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80057b8:	e007      	b.n	80057ca <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057be:	f043 0210 	orr.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80057ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	20000000 	.word	0x20000000
 80057d8:	053e2d63 	.word	0x053e2d63
 80057dc:	50040000 	.word	0x50040000
 80057e0:	50040300 	.word	0x50040300
 80057e4:	fff0c007 	.word	0xfff0c007

080057e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fe7b 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d14f      	bne.n	80058a0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_ADC_Start+0x26>
 800580a:	2302      	movs	r3, #2
 800580c:	e04b      	b.n	80058a6 <HAL_ADC_Start+0xbe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fdb6 	bl	8006388 <ADC_Enable>
 800581c:	4603      	mov	r3, r0
 800581e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d137      	bne.n	8005896 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005846:	d106      	bne.n	8005856 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584c:	f023 0206 	bic.w	r2, r3, #6
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	659a      	str	r2, [r3, #88]	@ 0x58
 8005854:	e002      	b.n	800585c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	221c      	movs	r2, #28
 8005862:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005882:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff fe06 	bl	80054a0 <LL_ADC_REG_StartConversion>
 8005894:	e006      	b.n	80058a4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800589e:	e001      	b.n	80058a4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
 80058a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_ADC_Stop+0x16>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e023      	b.n	800590c <HAL_ADC_Stop+0x5e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80058cc:	2103      	movs	r1, #3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fc9e 	bl	8006210 <ADC_ConversionStop>
 80058d4:	4603      	mov	r3, r0
 80058d6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d111      	bne.n	8005902 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fdd8 	bl	8006494 <ADC_Disable>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	f043 0201 	orr.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	2b08      	cmp	r3, #8
 8005924:	d102      	bne.n	800592c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005926:	2308      	movs	r3, #8
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e010      	b.n	800594e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593e:	f043 0220 	orr.w	r2, r3, #32
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e06f      	b.n	8005a2a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800594a:	2304      	movs	r3, #4
 800594c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800594e:	f7ff fbe7 	bl	8005120 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005954:	e021      	b.n	800599a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d01d      	beq.n	800599a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800595e:	f7ff fbdf 	bl	8005120 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <HAL_ADC_PollForConversion+0x60>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d112      	bne.n	800599a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4013      	ands	r3, r2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005986:	f043 0204 	orr.w	r2, r3, #4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e047      	b.n	8005a2a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0d6      	beq.n	8005956 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fc46 	bl	800524a <LL_ADC_REG_IsTriggerSourceSWStart>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01c      	beq.n	80059fe <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7e5b      	ldrb	r3, [r3, #25]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d118      	bne.n	80059fe <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d111      	bne.n	80059fe <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d104      	bne.n	8005a16 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2208      	movs	r2, #8
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e008      	b.n	8005a28 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	220c      	movs	r2, #12
 8005a26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b0b6      	sub	sp, #216	@ 0xd8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x22>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e3bb      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x79a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fd38 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 83a0 	bne.w	80061c8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	d824      	bhi.n	8005ae2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	3b02      	subs	r3, #2
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d81b      	bhi.n	8005ada <HAL_ADC_ConfigChannel+0x8e>
 8005aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <HAL_ADC_ConfigChannel+0x5c>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005ac1 	.word	0x08005ac1
 8005ab0:	08005ac9 	.word	0x08005ac9
 8005ab4:	08005ad1 	.word	0x08005ad1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005ab8:	230c      	movs	r3, #12
 8005aba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005abe:	e010      	b.n	8005ae2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005ac0:	2312      	movs	r3, #18
 8005ac2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005ac6:	e00c      	b.n	8005ae2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005ac8:	2318      	movs	r3, #24
 8005aca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005ace:	e008      	b.n	8005ae2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005ad8:	e003      	b.n	8005ae2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005ada:	2306      	movs	r3, #6
 8005adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005ae0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005af0:	f7ff fbbe 	bl	8005270 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fcf9 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 8005afe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fd19 	bl	800553e <LL_ADC_INJ_IsConversionOngoing>
 8005b0c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f040 81a4 	bne.w	8005e62 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 819f 	bne.w	8005e62 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6819      	ldr	r1, [r3, #0]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	461a      	mov	r2, r3
 8005b32:	f7ff fbc9 	bl	80052c8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	08db      	lsrs	r3, r3, #3
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d00a      	beq.n	8005b6e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	6919      	ldr	r1, [r3, #16]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b68:	f7ff fb1a 	bl	80051a0 <LL_ADC_SetOffset>
 8005b6c:	e179      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2100      	movs	r1, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fb37 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x14e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fb2c 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005b90:	4603      	mov	r3, r0
 8005b92:	0e9b      	lsrs	r3, r3, #26
 8005b94:	f003 021f 	and.w	r2, r3, #31
 8005b98:	e01e      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0x18c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fb21 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bb0:	fa93 f3a3 	rbit	r3, r3
 8005bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005bb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005bc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8005bc8:	2320      	movs	r3, #32
 8005bca:	e004      	b.n	8005bd6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8005bcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005bd0:	fab3 f383 	clz	r3, r3
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x1a4>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	0e9b      	lsrs	r3, r3, #26
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	e018      	b.n	8005c22 <HAL_ADC_ConfigChannel+0x1d6>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bfc:	fa93 f3a3 	rbit	r3, r3
 8005c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005c14:	2320      	movs	r3, #32
 8005c16:	e004      	b.n	8005c22 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8005c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c1c:	fab3 f383 	clz	r3, r3
 8005c20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d106      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff faf0 	bl	8005214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2101      	movs	r1, #1
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fad4 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <HAL_ADC_ConfigChannel+0x214>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fac9 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005c56:	4603      	mov	r3, r0
 8005c58:	0e9b      	lsrs	r3, r3, #26
 8005c5a:	f003 021f 	and.w	r2, r3, #31
 8005c5e:	e01e      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x252>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2101      	movs	r1, #1
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fabe 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c76:	fa93 f3a3 	rbit	r3, r3
 8005c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005c8e:	2320      	movs	r3, #32
 8005c90:	e004      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8005c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c96:	fab3 f383 	clz	r3, r3
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <HAL_ADC_ConfigChannel+0x26a>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	0e9b      	lsrs	r3, r3, #26
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	e018      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0x29c>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005cc2:	fa93 f3a3 	rbit	r3, r3
 8005cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8005cda:	2320      	movs	r3, #32
 8005cdc:	e004      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8005cde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ce2:	fab3 f383 	clz	r3, r3
 8005ce6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d106      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fa8d 	bl	8005214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2102      	movs	r1, #2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fa71 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <HAL_ADC_ConfigChannel+0x2da>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2102      	movs	r1, #2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fa66 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	0e9b      	lsrs	r3, r3, #26
 8005d20:	f003 021f 	and.w	r2, r3, #31
 8005d24:	e01e      	b.n	8005d64 <HAL_ADC_ConfigChannel+0x318>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2102      	movs	r1, #2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fa5b 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d3c:	fa93 f3a3 	rbit	r3, r3
 8005d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005d54:	2320      	movs	r3, #32
 8005d56:	e004      	b.n	8005d62 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8005d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d5c:	fab3 f383 	clz	r3, r3
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x330>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	0e9b      	lsrs	r3, r3, #26
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	e014      	b.n	8005da6 <HAL_ADC_ConfigChannel+0x35a>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d84:	fa93 f3a3 	rbit	r3, r3
 8005d88:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005d8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8005d98:	2320      	movs	r3, #32
 8005d9a:	e004      	b.n	8005da6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005da0:	fab3 f383 	clz	r3, r3
 8005da4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d106      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	2102      	movs	r1, #2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fa2e 	bl	8005214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2103      	movs	r1, #3
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fa12 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <HAL_ADC_ConfigChannel+0x398>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2103      	movs	r1, #3
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fa07 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	0e9b      	lsrs	r3, r3, #26
 8005dde:	f003 021f 	and.w	r2, r3, #31
 8005de2:	e017      	b.n	8005e14 <HAL_ADC_ConfigChannel+0x3c8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2103      	movs	r1, #3
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff f9fc 	bl	80051e8 <LL_ADC_GetOffsetChannel>
 8005df0:	4603      	mov	r3, r0
 8005df2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005df6:	fa93 f3a3 	rbit	r3, r3
 8005dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dfe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8005e06:	2320      	movs	r3, #32
 8005e08:	e003      	b.n	8005e12 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8005e0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e0c:	fab3 f383 	clz	r3, r3
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <HAL_ADC_ConfigChannel+0x3e0>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	0e9b      	lsrs	r3, r3, #26
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	e011      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x404>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e34:	fa93 f3a3 	rbit	r3, r3
 8005e38:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005e44:	2320      	movs	r3, #32
 8005e46:	e003      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005e48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e4a:	fab3 f383 	clz	r3, r3
 8005e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d106      	bne.n	8005e62 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2103      	movs	r1, #3
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff f9d9 	bl	8005214 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff faf4 	bl	8005454 <LL_ADC_IsEnabled>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 8140 	bne.w	80060f4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6819      	ldr	r1, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	461a      	mov	r2, r3
 8005e82:	f7ff fa4d 	bl	8005320 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	4a8f      	ldr	r2, [pc, #572]	@ (80060c8 <HAL_ADC_ConfigChannel+0x67c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	f040 8131 	bne.w	80060f4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <HAL_ADC_ConfigChannel+0x46e>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	0e9b      	lsrs	r3, r3, #26
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2b09      	cmp	r3, #9
 8005eb0:	bf94      	ite	ls
 8005eb2:	2301      	movls	r3, #1
 8005eb4:	2300      	movhi	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	e019      	b.n	8005eee <HAL_ADC_ConfigChannel+0x4a2>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ec2:	fa93 f3a3 	rbit	r3, r3
 8005ec6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8005ed2:	2320      	movs	r3, #32
 8005ed4:	e003      	b.n	8005ede <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ed8:	fab3 f383 	clz	r3, r3
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	3301      	adds	r3, #1
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	bf94      	ite	ls
 8005ee8:	2301      	movls	r3, #1
 8005eea:	2300      	movhi	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d079      	beq.n	8005fe6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d107      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x4c2>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	0e9b      	lsrs	r3, r3, #26
 8005f04:	3301      	adds	r3, #1
 8005f06:	069b      	lsls	r3, r3, #26
 8005f08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f0c:	e015      	b.n	8005f3a <HAL_ADC_ConfigChannel+0x4ee>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f16:	fa93 f3a3 	rbit	r3, r3
 8005f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f1e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005f26:	2320      	movs	r3, #32
 8005f28:	e003      	b.n	8005f32 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f2c:	fab3 f383 	clz	r3, r3
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	3301      	adds	r3, #1
 8005f34:	069b      	lsls	r3, r3, #26
 8005f36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <HAL_ADC_ConfigChannel+0x50e>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	0e9b      	lsrs	r3, r3, #26
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	2101      	movs	r1, #1
 8005f54:	fa01 f303 	lsl.w	r3, r1, r3
 8005f58:	e017      	b.n	8005f8a <HAL_ADC_ConfigChannel+0x53e>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005f72:	2320      	movs	r3, #32
 8005f74:	e003      	b.n	8005f7e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f78:	fab3 f383 	clz	r3, r3
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	2101      	movs	r1, #1
 8005f86:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8a:	ea42 0103 	orr.w	r1, r2, r3
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x564>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	0e9b      	lsrs	r3, r3, #26
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	f003 021f 	and.w	r2, r3, #31
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4413      	add	r3, r2
 8005fac:	051b      	lsls	r3, r3, #20
 8005fae:	e018      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x596>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	fa93 f3a3 	rbit	r3, r3
 8005fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005fc8:	2320      	movs	r3, #32
 8005fca:	e003      	b.n	8005fd4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fce:	fab3 f383 	clz	r3, r3
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f003 021f 	and.w	r2, r3, #31
 8005fda:	4613      	mov	r3, r2
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	4413      	add	r3, r2
 8005fe0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	e081      	b.n	80060ea <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d107      	bne.n	8006002 <HAL_ADC_ConfigChannel+0x5b6>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	0e9b      	lsrs	r3, r3, #26
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	069b      	lsls	r3, r3, #26
 8005ffc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006000:	e015      	b.n	800602e <HAL_ADC_ConfigChannel+0x5e2>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	fa93 f3a3 	rbit	r3, r3
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800601a:	2320      	movs	r3, #32
 800601c:	e003      	b.n	8006026 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800601e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006020:	fab3 f383 	clz	r3, r3
 8006024:	b2db      	uxtb	r3, r3
 8006026:	3301      	adds	r3, #1
 8006028:	069b      	lsls	r3, r3, #26
 800602a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_ADC_ConfigChannel+0x602>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	0e9b      	lsrs	r3, r3, #26
 8006040:	3301      	adds	r3, #1
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2101      	movs	r1, #1
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	e017      	b.n	800607e <HAL_ADC_ConfigChannel+0x632>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	fa93 f3a3 	rbit	r3, r3
 800605a:	61bb      	str	r3, [r7, #24]
  return result;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8006066:	2320      	movs	r3, #32
 8006068:	e003      	b.n	8006072 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	fab3 f383 	clz	r3, r3
 8006070:	b2db      	uxtb	r3, r3
 8006072:	3301      	adds	r3, #1
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2101      	movs	r1, #1
 800607a:	fa01 f303 	lsl.w	r3, r1, r3
 800607e:	ea42 0103 	orr.w	r1, r2, r3
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10d      	bne.n	80060aa <HAL_ADC_ConfigChannel+0x65e>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	0e9b      	lsrs	r3, r3, #26
 8006094:	3301      	adds	r3, #1
 8006096:	f003 021f 	and.w	r2, r3, #31
 800609a:	4613      	mov	r3, r2
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4413      	add	r3, r2
 80060a0:	3b1e      	subs	r3, #30
 80060a2:	051b      	lsls	r3, r3, #20
 80060a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80060a8:	e01e      	b.n	80060e8 <HAL_ADC_ConfigChannel+0x69c>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	fa93 f3a3 	rbit	r3, r3
 80060b6:	60fb      	str	r3, [r7, #12]
  return result;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80060c2:	2320      	movs	r3, #32
 80060c4:	e006      	b.n	80060d4 <HAL_ADC_ConfigChannel+0x688>
 80060c6:	bf00      	nop
 80060c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	fab3 f383 	clz	r3, r3
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	3301      	adds	r3, #1
 80060d6:	f003 021f 	and.w	r2, r3, #31
 80060da:	4613      	mov	r3, r2
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	4413      	add	r3, r2
 80060e0:	3b1e      	subs	r3, #30
 80060e2:	051b      	lsls	r3, r3, #20
 80060e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060ee:	4619      	mov	r1, r3
 80060f0:	f7ff f8ea 	bl	80052c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b3d      	ldr	r3, [pc, #244]	@ (80061f0 <HAL_ADC_ConfigChannel+0x7a4>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d06c      	beq.n	80061da <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006100:	483c      	ldr	r0, [pc, #240]	@ (80061f4 <HAL_ADC_ConfigChannel+0x7a8>)
 8006102:	f7ff f83f 	bl	8005184 <LL_ADC_GetCommonPathInternalCh>
 8006106:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3a      	ldr	r2, [pc, #232]	@ (80061f8 <HAL_ADC_ConfigChannel+0x7ac>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d127      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006114:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d121      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a35      	ldr	r2, [pc, #212]	@ (80061fc <HAL_ADC_ConfigChannel+0x7b0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d157      	bne.n	80061da <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800612a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800612e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006132:	4619      	mov	r1, r3
 8006134:	482f      	ldr	r0, [pc, #188]	@ (80061f4 <HAL_ADC_ConfigChannel+0x7a8>)
 8006136:	f7ff f812 	bl	800515e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800613a:	4b31      	ldr	r3, [pc, #196]	@ (8006200 <HAL_ADC_ConfigChannel+0x7b4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	4a30      	ldr	r2, [pc, #192]	@ (8006204 <HAL_ADC_ConfigChannel+0x7b8>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	099b      	lsrs	r3, r3, #6
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	4613      	mov	r3, r2
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006154:	e002      	b.n	800615c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	3b01      	subs	r3, #1
 800615a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f9      	bne.n	8006156 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006162:	e03a      	b.n	80061da <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a27      	ldr	r2, [pc, #156]	@ (8006208 <HAL_ADC_ConfigChannel+0x7bc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d113      	bne.n	8006196 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800616e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006172:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10d      	bne.n	8006196 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1f      	ldr	r2, [pc, #124]	@ (80061fc <HAL_ADC_ConfigChannel+0x7b0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d12a      	bne.n	80061da <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006188:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800618c:	4619      	mov	r1, r3
 800618e:	4819      	ldr	r0, [pc, #100]	@ (80061f4 <HAL_ADC_ConfigChannel+0x7a8>)
 8006190:	f7fe ffe5 	bl	800515e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006194:	e021      	b.n	80061da <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1c      	ldr	r2, [pc, #112]	@ (800620c <HAL_ADC_ConfigChannel+0x7c0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d11c      	bne.n	80061da <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80061a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d116      	bne.n	80061da <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a12      	ldr	r2, [pc, #72]	@ (80061fc <HAL_ADC_ConfigChannel+0x7b0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d111      	bne.n	80061da <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80061be:	4619      	mov	r1, r3
 80061c0:	480c      	ldr	r0, [pc, #48]	@ (80061f4 <HAL_ADC_ConfigChannel+0x7a8>)
 80061c2:	f7fe ffcc 	bl	800515e <LL_ADC_SetCommonPathInternalCh>
 80061c6:	e008      	b.n	80061da <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061cc:	f043 0220 	orr.w	r2, r3, #32
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80061e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	37d8      	adds	r7, #216	@ 0xd8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	80080000 	.word	0x80080000
 80061f4:	50040300 	.word	0x50040300
 80061f8:	c7520000 	.word	0xc7520000
 80061fc:	50040000 	.word	0x50040000
 8006200:	20000000 	.word	0x20000000
 8006204:	053e2d63 	.word	0x053e2d63
 8006208:	cb840000 	.word	0xcb840000
 800620c:	80000001 	.word	0x80000001

08006210 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff f962 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 800622c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff f983 	bl	800553e <LL_ADC_INJ_IsConversionOngoing>
 8006238:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8098 	beq.w	8006378 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d02a      	beq.n	80062ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	7e5b      	ldrb	r3, [r3, #25]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d126      	bne.n	80062ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	7e1b      	ldrb	r3, [r3, #24]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d122      	bne.n	80062ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006266:	2301      	movs	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800626a:	e014      	b.n	8006296 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4a45      	ldr	r2, [pc, #276]	@ (8006384 <ADC_ConversionStop+0x174>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d90d      	bls.n	8006290 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006278:	f043 0210 	orr.w	r2, r3, #16
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006284:	f043 0201 	orr.w	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e074      	b.n	800637a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	3301      	adds	r3, #1
 8006294:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a0:	2b40      	cmp	r3, #64	@ 0x40
 80062a2:	d1e3      	bne.n	800626c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2240      	movs	r2, #64	@ 0x40
 80062aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d014      	beq.n	80062dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff f91a 	bl	80054f0 <LL_ADC_REG_IsConversionOngoing>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff f8d7 	bl	800547a <LL_ADC_IsDisableOngoing>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff f8f6 	bl	80054c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d014      	beq.n	800630c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff f929 	bl	800553e <LL_ADC_INJ_IsConversionOngoing>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff f8bf 	bl	800547a <LL_ADC_IsDisableOngoing>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff f905 	bl	8005516 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d005      	beq.n	800631e <ADC_ConversionStop+0x10e>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b03      	cmp	r3, #3
 8006316:	d105      	bne.n	8006324 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006318:	230c      	movs	r3, #12
 800631a:	617b      	str	r3, [r7, #20]
        break;
 800631c:	e005      	b.n	800632a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800631e:	2308      	movs	r3, #8
 8006320:	617b      	str	r3, [r7, #20]
        break;
 8006322:	e002      	b.n	800632a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006324:	2304      	movs	r3, #4
 8006326:	617b      	str	r3, [r7, #20]
        break;
 8006328:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800632a:	f7fe fef9 	bl	8005120 <HAL_GetTick>
 800632e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006330:	e01b      	b.n	800636a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006332:	f7fe fef5 	bl	8005120 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b05      	cmp	r3, #5
 800633e:	d914      	bls.n	800636a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00d      	beq.n	800636a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006352:	f043 0210 	orr.w	r2, r3, #16
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	f043 0201 	orr.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e007      	b.n	800637a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4013      	ands	r3, r2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1dc      	bne.n	8006332 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	a33fffff 	.word	0xa33fffff

08006388 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006390:	2300      	movs	r3, #0
 8006392:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff f85b 	bl	8005454 <LL_ADC_IsEnabled>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d169      	bne.n	8006478 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	4b36      	ldr	r3, [pc, #216]	@ (8006484 <ADC_Enable+0xfc>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00d      	beq.n	80063ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b6:	f043 0210 	orr.w	r2, r3, #16
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e055      	b.n	800647a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff f816 	bl	8005404 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80063d8:	482b      	ldr	r0, [pc, #172]	@ (8006488 <ADC_Enable+0x100>)
 80063da:	f7fe fed3 	bl	8005184 <LL_ADC_GetCommonPathInternalCh>
 80063de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80063e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d013      	beq.n	8006410 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063e8:	4b28      	ldr	r3, [pc, #160]	@ (800648c <ADC_Enable+0x104>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	099b      	lsrs	r3, r3, #6
 80063ee:	4a28      	ldr	r2, [pc, #160]	@ (8006490 <ADC_Enable+0x108>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	099b      	lsrs	r3, r3, #6
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	4613      	mov	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006402:	e002      	b.n	800640a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	3b01      	subs	r3, #1
 8006408:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f9      	bne.n	8006404 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006410:	f7fe fe86 	bl	8005120 <HAL_GetTick>
 8006414:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006416:	e028      	b.n	800646a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff f819 	bl	8005454 <LL_ADC_IsEnabled>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe ffe9 	bl	8005404 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006432:	f7fe fe75 	bl	8005120 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d914      	bls.n	800646a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	d00d      	beq.n	800646a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006452:	f043 0210 	orr.w	r2, r3, #16
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e007      	b.n	800647a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b01      	cmp	r3, #1
 8006476:	d1cf      	bne.n	8006418 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	8000003f 	.word	0x8000003f
 8006488:	50040300 	.word	0x50040300
 800648c:	20000000 	.word	0x20000000
 8006490:	053e2d63 	.word	0x053e2d63

08006494 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe ffea 	bl	800547a <LL_ADC_IsDisableOngoing>
 80064a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe ffd1 	bl	8005454 <LL_ADC_IsEnabled>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d047      	beq.n	8006548 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d144      	bne.n	8006548 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 030d 	and.w	r3, r3, #13
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d10c      	bne.n	80064e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe ffab 	bl	800542c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2203      	movs	r2, #3
 80064dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80064de:	f7fe fe1f 	bl	8005120 <HAL_GetTick>
 80064e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064e4:	e029      	b.n	800653a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ea:	f043 0210 	orr.w	r2, r3, #16
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f6:	f043 0201 	orr.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e023      	b.n	800654a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006502:	f7fe fe0d 	bl	8005120 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d914      	bls.n	800653a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00d      	beq.n	800653a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006522:	f043 0210 	orr.w	r2, r3, #16
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652e:	f043 0201 	orr.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e007      	b.n	800654a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1dc      	bne.n	8006502 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006564:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <__NVIC_SetPriorityGrouping+0x44>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006570:	4013      	ands	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800657c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006586:	4a04      	ldr	r2, [pc, #16]	@ (8006598 <__NVIC_SetPriorityGrouping+0x44>)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	60d3      	str	r3, [r2, #12]
}
 800658c:	bf00      	nop
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	e000ed00 	.word	0xe000ed00

0800659c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065a0:	4b04      	ldr	r3, [pc, #16]	@ (80065b4 <__NVIC_GetPriorityGrouping+0x18>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	0a1b      	lsrs	r3, r3, #8
 80065a6:	f003 0307 	and.w	r3, r3, #7
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	e000ed00 	.word	0xe000ed00

080065b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	db0b      	blt.n	80065e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	f003 021f 	and.w	r2, r3, #31
 80065d0:	4907      	ldr	r1, [pc, #28]	@ (80065f0 <__NVIC_EnableIRQ+0x38>)
 80065d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	2001      	movs	r0, #1
 80065da:	fa00 f202 	lsl.w	r2, r0, r2
 80065de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	e000e100 	.word	0xe000e100

080065f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	6039      	str	r1, [r7, #0]
 80065fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006604:	2b00      	cmp	r3, #0
 8006606:	db0a      	blt.n	800661e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	490c      	ldr	r1, [pc, #48]	@ (8006640 <__NVIC_SetPriority+0x4c>)
 800660e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006612:	0112      	lsls	r2, r2, #4
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	440b      	add	r3, r1
 8006618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800661c:	e00a      	b.n	8006634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	4908      	ldr	r1, [pc, #32]	@ (8006644 <__NVIC_SetPriority+0x50>)
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	3b04      	subs	r3, #4
 800662c:	0112      	lsls	r2, r2, #4
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	440b      	add	r3, r1
 8006632:	761a      	strb	r2, [r3, #24]
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	e000e100 	.word	0xe000e100
 8006644:	e000ed00 	.word	0xe000ed00

08006648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006648:	b480      	push	{r7}
 800664a:	b089      	sub	sp, #36	@ 0x24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f1c3 0307 	rsb	r3, r3, #7
 8006662:	2b04      	cmp	r3, #4
 8006664:	bf28      	it	cs
 8006666:	2304      	movcs	r3, #4
 8006668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	3304      	adds	r3, #4
 800666e:	2b06      	cmp	r3, #6
 8006670:	d902      	bls.n	8006678 <NVIC_EncodePriority+0x30>
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3b03      	subs	r3, #3
 8006676:	e000      	b.n	800667a <NVIC_EncodePriority+0x32>
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800667c:	f04f 32ff 	mov.w	r2, #4294967295
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43da      	mvns	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	401a      	ands	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006690:	f04f 31ff 	mov.w	r1, #4294967295
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	43d9      	mvns	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a0:	4313      	orrs	r3, r2
         );
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3724      	adds	r7, #36	@ 0x24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff ff4c 	bl	8006554 <__NVIC_SetPriorityGrouping>
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80066d6:	f7ff ff61 	bl	800659c <__NVIC_GetPriorityGrouping>
 80066da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f7ff ffb1 	bl	8006648 <NVIC_EncodePriority>
 80066e6:	4602      	mov	r2, r0
 80066e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ec:	4611      	mov	r1, r2
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff ff80 	bl	80065f4 <__NVIC_SetPriority>
}
 80066f4:	bf00      	nop
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff ff54 	bl	80065b8 <__NVIC_EnableIRQ>
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e098      	b.n	800685c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	4b4d      	ldr	r3, [pc, #308]	@ (8006868 <HAL_DMA_Init+0x150>)
 8006732:	429a      	cmp	r2, r3
 8006734:	d80f      	bhi.n	8006756 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	4b4b      	ldr	r3, [pc, #300]	@ (800686c <HAL_DMA_Init+0x154>)
 800673e:	4413      	add	r3, r2
 8006740:	4a4b      	ldr	r2, [pc, #300]	@ (8006870 <HAL_DMA_Init+0x158>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	091b      	lsrs	r3, r3, #4
 8006748:	009a      	lsls	r2, r3, #2
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a48      	ldr	r2, [pc, #288]	@ (8006874 <HAL_DMA_Init+0x15c>)
 8006752:	641a      	str	r2, [r3, #64]	@ 0x40
 8006754:	e00e      	b.n	8006774 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	4b46      	ldr	r3, [pc, #280]	@ (8006878 <HAL_DMA_Init+0x160>)
 800675e:	4413      	add	r3, r2
 8006760:	4a43      	ldr	r2, [pc, #268]	@ (8006870 <HAL_DMA_Init+0x158>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	091b      	lsrs	r3, r3, #4
 8006768:	009a      	lsls	r2, r3, #2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a42      	ldr	r2, [pc, #264]	@ (800687c <HAL_DMA_Init+0x164>)
 8006772:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800678a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ce:	d039      	beq.n	8006844 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	4a27      	ldr	r2, [pc, #156]	@ (8006874 <HAL_DMA_Init+0x15c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d11a      	bne.n	8006810 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80067da:	4b29      	ldr	r3, [pc, #164]	@ (8006880 <HAL_DMA_Init+0x168>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e2:	f003 031c 	and.w	r3, r3, #28
 80067e6:	210f      	movs	r1, #15
 80067e8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ec:	43db      	mvns	r3, r3
 80067ee:	4924      	ldr	r1, [pc, #144]	@ (8006880 <HAL_DMA_Init+0x168>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80067f4:	4b22      	ldr	r3, [pc, #136]	@ (8006880 <HAL_DMA_Init+0x168>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006800:	f003 031c 	and.w	r3, r3, #28
 8006804:	fa01 f303 	lsl.w	r3, r1, r3
 8006808:	491d      	ldr	r1, [pc, #116]	@ (8006880 <HAL_DMA_Init+0x168>)
 800680a:	4313      	orrs	r3, r2
 800680c:	600b      	str	r3, [r1, #0]
 800680e:	e019      	b.n	8006844 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006810:	4b1c      	ldr	r3, [pc, #112]	@ (8006884 <HAL_DMA_Init+0x16c>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006818:	f003 031c 	and.w	r3, r3, #28
 800681c:	210f      	movs	r1, #15
 800681e:	fa01 f303 	lsl.w	r3, r1, r3
 8006822:	43db      	mvns	r3, r3
 8006824:	4917      	ldr	r1, [pc, #92]	@ (8006884 <HAL_DMA_Init+0x16c>)
 8006826:	4013      	ands	r3, r2
 8006828:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800682a:	4b16      	ldr	r3, [pc, #88]	@ (8006884 <HAL_DMA_Init+0x16c>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6859      	ldr	r1, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006836:	f003 031c 	and.w	r3, r3, #28
 800683a:	fa01 f303 	lsl.w	r3, r1, r3
 800683e:	4911      	ldr	r1, [pc, #68]	@ (8006884 <HAL_DMA_Init+0x16c>)
 8006840:	4313      	orrs	r3, r2
 8006842:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40020407 	.word	0x40020407
 800686c:	bffdfff8 	.word	0xbffdfff8
 8006870:	cccccccd 	.word	0xcccccccd
 8006874:	40020000 	.word	0x40020000
 8006878:	bffdfbf8 	.word	0xbffdfbf8
 800687c:	40020400 	.word	0x40020400
 8006880:	400200a8 	.word	0x400200a8
 8006884:	400204a8 	.word	0x400204a8

08006888 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_DMA_Start_IT+0x20>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e04b      	b.n	8006940 <HAL_DMA_Start_IT+0xb8>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d13a      	bne.n	8006932 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 f95f 	bl	8006ba4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d008      	beq.n	8006900 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 020e 	orr.w	r2, r2, #14
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e00f      	b.n	8006920 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0204 	bic.w	r2, r2, #4
 800690e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 020a 	orr.w	r2, r2, #10
 800691e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e005      	b.n	800693e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800693a:	2302      	movs	r3, #2
 800693c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d008      	beq.n	8006972 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2204      	movs	r2, #4
 8006964:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e022      	b.n	80069b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 020e 	bic.w	r2, r2, #14
 8006980:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006996:	f003 021c 	and.w	r2, r3, #28
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	2101      	movs	r1, #1
 80069a0:	fa01 f202 	lsl.w	r2, r1, r2
 80069a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d005      	beq.n	80069e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2204      	movs	r2, #4
 80069e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	73fb      	strb	r3, [r7, #15]
 80069e6:	e029      	b.n	8006a3c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 020e 	bic.w	r2, r2, #14
 80069f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0201 	bic.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a0c:	f003 021c 	and.w	r2, r3, #28
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	2101      	movs	r1, #1
 8006a16:	fa01 f202 	lsl.w	r2, r1, r2
 8006a1a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
    }
  }
  return status;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a62:	f003 031c 	and.w	r3, r3, #28
 8006a66:	2204      	movs	r2, #4
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d026      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x7a>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d021      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d107      	bne.n	8006a9a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0204 	bic.w	r2, r2, #4
 8006a98:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	f003 021c 	and.w	r2, r3, #28
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8006aac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d071      	beq.n	8006b9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006abe:	e06c      	b.n	8006b9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac4:	f003 031c 	and.w	r3, r3, #28
 8006ac8:	2202      	movs	r2, #2
 8006aca:	409a      	lsls	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d02e      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xec>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d029      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 020a 	bic.w	r2, r2, #10
 8006afa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b08:	f003 021c 	and.w	r2, r3, #28
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b10:	2102      	movs	r1, #2
 8006b12:	fa01 f202 	lsl.w	r2, r1, r2
 8006b16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d038      	beq.n	8006b9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006b30:	e033      	b.n	8006b9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f003 031c 	and.w	r3, r3, #28
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	409a      	lsls	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4013      	ands	r3, r2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d02a      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x156>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d025      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 020e 	bic.w	r2, r2, #14
 8006b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b64:	f003 021c 	and.w	r2, r3, #28
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b9a:	bf00      	nop
 8006b9c:	bf00      	nop
}
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb6:	f003 021c 	and.w	r2, r3, #28
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8006bc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b10      	cmp	r3, #16
 8006bd4:	d108      	bne.n	8006be8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006be6:	e007      	b.n	8006bf8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	60da      	str	r2, [r3, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c12:	e148      	b.n	8006ea6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	2101      	movs	r1, #1
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c20:	4013      	ands	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 813a 	beq.w	8006ea0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 0303 	and.w	r3, r3, #3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d005      	beq.n	8006c44 <HAL_GPIO_Init+0x40>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d130      	bne.n	8006ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	2203      	movs	r2, #3
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	43db      	mvns	r3, r3
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	43db      	mvns	r3, r3
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4013      	ands	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	091b      	lsrs	r3, r3, #4
 8006c90:	f003 0201 	and.w	r2, r3, #1
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d017      	beq.n	8006ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d123      	bne.n	8006d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	08da      	lsrs	r2, r3, #3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3208      	adds	r2, #8
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	220f      	movs	r2, #15
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	43db      	mvns	r3, r3
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	08da      	lsrs	r2, r3, #3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3208      	adds	r2, #8
 8006d30:	6939      	ldr	r1, [r7, #16]
 8006d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	2203      	movs	r2, #3
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f003 0203 	and.w	r2, r3, #3
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8094 	beq.w	8006ea0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d78:	4b52      	ldr	r3, [pc, #328]	@ (8006ec4 <HAL_GPIO_Init+0x2c0>)
 8006d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d7c:	4a51      	ldr	r2, [pc, #324]	@ (8006ec4 <HAL_GPIO_Init+0x2c0>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6613      	str	r3, [r2, #96]	@ 0x60
 8006d84:	4b4f      	ldr	r3, [pc, #316]	@ (8006ec4 <HAL_GPIO_Init+0x2c0>)
 8006d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006d90:	4a4d      	ldr	r2, [pc, #308]	@ (8006ec8 <HAL_GPIO_Init+0x2c4>)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	089b      	lsrs	r3, r3, #2
 8006d96:	3302      	adds	r3, #2
 8006d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	220f      	movs	r2, #15
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	43db      	mvns	r3, r3
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4013      	ands	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006dba:	d00d      	beq.n	8006dd8 <HAL_GPIO_Init+0x1d4>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a43      	ldr	r2, [pc, #268]	@ (8006ecc <HAL_GPIO_Init+0x2c8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d007      	beq.n	8006dd4 <HAL_GPIO_Init+0x1d0>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a42      	ldr	r2, [pc, #264]	@ (8006ed0 <HAL_GPIO_Init+0x2cc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d101      	bne.n	8006dd0 <HAL_GPIO_Init+0x1cc>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e004      	b.n	8006dda <HAL_GPIO_Init+0x1d6>
 8006dd0:	2307      	movs	r3, #7
 8006dd2:	e002      	b.n	8006dda <HAL_GPIO_Init+0x1d6>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <HAL_GPIO_Init+0x1d6>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	f002 0203 	and.w	r2, r2, #3
 8006de0:	0092      	lsls	r2, r2, #2
 8006de2:	4093      	lsls	r3, r2
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006dea:	4937      	ldr	r1, [pc, #220]	@ (8006ec8 <HAL_GPIO_Init+0x2c4>)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	089b      	lsrs	r3, r3, #2
 8006df0:	3302      	adds	r3, #2
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006df8:	4b36      	ldr	r3, [pc, #216]	@ (8006ed4 <HAL_GPIO_Init+0x2d0>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	43db      	mvns	r3, r3
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4013      	ands	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ed4 <HAL_GPIO_Init+0x2d0>)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006e22:	4b2c      	ldr	r3, [pc, #176]	@ (8006ed4 <HAL_GPIO_Init+0x2d0>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e46:	4a23      	ldr	r2, [pc, #140]	@ (8006ed4 <HAL_GPIO_Init+0x2d0>)
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006e4c:	4b21      	ldr	r3, [pc, #132]	@ (8006ed4 <HAL_GPIO_Init+0x2d0>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e70:	4a18      	ldr	r2, [pc, #96]	@ (8006ed4 <HAL_GPIO_Init+0x2d0>)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006e76:	4b17      	ldr	r3, [pc, #92]	@ (8006ed4 <HAL_GPIO_Init+0x2d0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4013      	ands	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed4 <HAL_GPIO_Init+0x2d0>)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f47f aeaf 	bne.w	8006c14 <HAL_GPIO_Init+0x10>
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	48000400 	.word	0x48000400
 8006ed0:	48000800 	.word	0x48000800
 8006ed4:	40010400 	.word	0x40010400

08006ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	807b      	strh	r3, [r7, #2]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ee8:	787b      	ldrb	r3, [r7, #1]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006eee:	887a      	ldrh	r2, [r7, #2]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ef4:	e002      	b.n	8006efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ef6:	887a      	ldrh	r2, [r7, #2]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e08d      	b.n	8007036 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fd fe76 	bl	8004c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2224      	movs	r2, #36	@ 0x24
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0201 	bic.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d107      	bne.n	8006f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f7e:	609a      	str	r2, [r3, #8]
 8006f80:	e006      	b.n	8006f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d108      	bne.n	8006faa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fa6:	605a      	str	r2, [r3, #4]
 8006fa8:	e007      	b.n	8006fba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69d9      	ldr	r1, [r3, #28]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1a      	ldr	r2, [r3, #32]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	461a      	mov	r2, r3
 800704c:	460b      	mov	r3, r1
 800704e:	817b      	strh	r3, [r7, #10]
 8007050:	4613      	mov	r3, r2
 8007052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b20      	cmp	r3, #32
 800705e:	f040 80fd 	bne.w	800725c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_I2C_Master_Transmit+0x30>
 800706c:	2302      	movs	r3, #2
 800706e:	e0f6      	b.n	800725e <HAL_I2C_Master_Transmit+0x21e>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007078:	f7fe f852 	bl	8005120 <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	2319      	movs	r3, #25
 8007084:	2201      	movs	r2, #1
 8007086:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fa0a 	bl	80074a4 <I2C_WaitOnFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e0e1      	b.n	800725e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2221      	movs	r2, #33	@ 0x21
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2210      	movs	r2, #16
 80070a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	893a      	ldrh	r2, [r7, #8]
 80070ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2bff      	cmp	r3, #255	@ 0xff
 80070ca:	d906      	bls.n	80070da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	22ff      	movs	r2, #255	@ 0xff
 80070d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80070d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e007      	b.n	80070ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80070e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d024      	beq.n	800713c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007126:	b2db      	uxtb	r3, r3
 8007128:	3301      	adds	r3, #1
 800712a:	b2da      	uxtb	r2, r3
 800712c:	8979      	ldrh	r1, [r7, #10]
 800712e:	4b4e      	ldr	r3, [pc, #312]	@ (8007268 <HAL_I2C_Master_Transmit+0x228>)
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fbf1 	bl	800791c <I2C_TransferConfig>
 800713a:	e066      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007140:	b2da      	uxtb	r2, r3
 8007142:	8979      	ldrh	r1, [r7, #10]
 8007144:	4b48      	ldr	r3, [pc, #288]	@ (8007268 <HAL_I2C_Master_Transmit+0x228>)
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fbe6 	bl	800791c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007150:	e05b      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	6a39      	ldr	r1, [r7, #32]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f9f3 	bl	8007542 <I2C_WaitOnTXISFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e07b      	b.n	800725e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716a:	781a      	ldrb	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d034      	beq.n	800720a <HAL_I2C_Master_Transmit+0x1ca>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d130      	bne.n	800720a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	2200      	movs	r2, #0
 80071b0:	2180      	movs	r1, #128	@ 0x80
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f976 	bl	80074a4 <I2C_WaitOnFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e04d      	b.n	800725e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2bff      	cmp	r3, #255	@ 0xff
 80071ca:	d90e      	bls.n	80071ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	22ff      	movs	r2, #255	@ 0xff
 80071d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	8979      	ldrh	r1, [r7, #10]
 80071da:	2300      	movs	r3, #0
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fb9a 	bl	800791c <I2C_TransferConfig>
 80071e8:	e00f      	b.n	800720a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	8979      	ldrh	r1, [r7, #10]
 80071fc:	2300      	movs	r3, #0
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fb89 	bl	800791c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800720e:	b29b      	uxth	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d19e      	bne.n	8007152 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	6a39      	ldr	r1, [r7, #32]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f9d9 	bl	80075d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e01a      	b.n	800725e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2220      	movs	r2, #32
 800722e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6859      	ldr	r1, [r3, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b0c      	ldr	r3, [pc, #48]	@ (800726c <HAL_I2C_Master_Transmit+0x22c>)
 800723c:	400b      	ands	r3, r1
 800723e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	e000      	b.n	800725e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800725c:	2302      	movs	r3, #2
  }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	80002000 	.word	0x80002000
 800726c:	fe00e800 	.word	0xfe00e800

08007270 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	461a      	mov	r2, r3
 800727c:	460b      	mov	r3, r1
 800727e:	817b      	strh	r3, [r7, #10]
 8007280:	4613      	mov	r3, r2
 8007282:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b20      	cmp	r3, #32
 800728e:	f040 80db 	bne.w	8007448 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_I2C_Master_Receive+0x30>
 800729c:	2302      	movs	r3, #2
 800729e:	e0d4      	b.n	800744a <HAL_I2C_Master_Receive+0x1da>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072a8:	f7fd ff3a 	bl	8005120 <HAL_GetTick>
 80072ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	2319      	movs	r3, #25
 80072b4:	2201      	movs	r2, #1
 80072b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f8f2 	bl	80074a4 <I2C_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e0bf      	b.n	800744a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2222      	movs	r2, #34	@ 0x22
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2210      	movs	r2, #16
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	893a      	ldrh	r2, [r7, #8]
 80072ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2bff      	cmp	r3, #255	@ 0xff
 80072fa:	d90e      	bls.n	800731a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	22ff      	movs	r2, #255	@ 0xff
 8007300:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007306:	b2da      	uxtb	r2, r3
 8007308:	8979      	ldrh	r1, [r7, #10]
 800730a:	4b52      	ldr	r3, [pc, #328]	@ (8007454 <HAL_I2C_Master_Receive+0x1e4>)
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fb02 	bl	800791c <I2C_TransferConfig>
 8007318:	e06d      	b.n	80073f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007328:	b2da      	uxtb	r2, r3
 800732a:	8979      	ldrh	r1, [r7, #10]
 800732c:	4b49      	ldr	r3, [pc, #292]	@ (8007454 <HAL_I2C_Master_Receive+0x1e4>)
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 faf1 	bl	800791c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800733a:	e05c      	b.n	80073f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	6a39      	ldr	r1, [r7, #32]
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f989 	bl	8007658 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e07c      	b.n	800744a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d034      	beq.n	80073f6 <HAL_I2C_Master_Receive+0x186>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007390:	2b00      	cmp	r3, #0
 8007392:	d130      	bne.n	80073f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	2200      	movs	r2, #0
 800739c:	2180      	movs	r1, #128	@ 0x80
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 f880 	bl	80074a4 <I2C_WaitOnFlagUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e04d      	b.n	800744a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2bff      	cmp	r3, #255	@ 0xff
 80073b6:	d90e      	bls.n	80073d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	22ff      	movs	r2, #255	@ 0xff
 80073bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	8979      	ldrh	r1, [r7, #10]
 80073c6:	2300      	movs	r3, #0
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 faa4 	bl	800791c <I2C_TransferConfig>
 80073d4:	e00f      	b.n	80073f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	8979      	ldrh	r1, [r7, #10]
 80073e8:	2300      	movs	r3, #0
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fa93 	bl	800791c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d19d      	bne.n	800733c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	6a39      	ldr	r1, [r7, #32]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f8e3 	bl	80075d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e01a      	b.n	800744a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2220      	movs	r2, #32
 800741a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6859      	ldr	r1, [r3, #4]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <HAL_I2C_Master_Receive+0x1e8>)
 8007428:	400b      	ands	r3, r1
 800742a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	e000      	b.n	800744a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	80002400 	.word	0x80002400
 8007458:	fe00e800 	.word	0xfe00e800

0800745c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b02      	cmp	r3, #2
 8007470:	d103      	bne.n	800747a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2200      	movs	r2, #0
 8007478:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b01      	cmp	r3, #1
 8007486:	d007      	beq.n	8007498 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0201 	orr.w	r2, r2, #1
 8007496:	619a      	str	r2, [r3, #24]
  }
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074b4:	e031      	b.n	800751a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d02d      	beq.n	800751a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074be:	f7fd fe2f 	bl	8005120 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d302      	bcc.n	80074d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d122      	bne.n	800751a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bf0c      	ite	eq
 80074e4:	2301      	moveq	r3, #1
 80074e6:	2300      	movne	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d113      	bne.n	800751a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e00f      	b.n	800753a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699a      	ldr	r2, [r3, #24]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	429a      	cmp	r2, r3
 8007528:	bf0c      	ite	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	2300      	movne	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	429a      	cmp	r2, r3
 8007536:	d0be      	beq.n	80074b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800754e:	e033      	b.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f901 	bl	800775c <I2C_IsErrorOccurred>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e031      	b.n	80075c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756a:	d025      	beq.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756c:	f7fd fdd8 	bl	8005120 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	429a      	cmp	r2, r3
 800757a:	d302      	bcc.n	8007582 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d11a      	bne.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b02      	cmp	r3, #2
 800758e:	d013      	beq.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e007      	b.n	80075c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d1c4      	bne.n	8007550 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075dc:	e02f      	b.n	800763e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 f8ba 	bl	800775c <I2C_IsErrorOccurred>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e02d      	b.n	800764e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f2:	f7fd fd95 	bl	8005120 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d11a      	bne.n	800763e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b20      	cmp	r3, #32
 8007614:	d013      	beq.n	800763e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e007      	b.n	800764e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b20      	cmp	r3, #32
 800764a:	d1c8      	bne.n	80075de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007664:	e06b      	b.n	800773e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 f876 	bl	800775c <I2C_IsErrorOccurred>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e069      	b.n	800774e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b20      	cmp	r3, #32
 8007686:	d138      	bne.n	80076fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b04      	cmp	r3, #4
 8007694:	d105      	bne.n	80076a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e055      	b.n	800774e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b10      	cmp	r3, #16
 80076ae:	d107      	bne.n	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2210      	movs	r2, #16
 80076b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2204      	movs	r2, #4
 80076bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80076be:	e002      	b.n	80076c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2220      	movs	r2, #32
 80076cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	4b1f      	ldr	r3, [pc, #124]	@ (8007758 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80076da:	400b      	ands	r3, r1
 80076dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e029      	b.n	800774e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fa:	f7fd fd11 	bl	8005120 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d116      	bne.n	800773e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d00f      	beq.n	800773e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007722:	f043 0220 	orr.w	r2, r3, #32
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e007      	b.n	800774e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b04      	cmp	r3, #4
 800774a:	d18c      	bne.n	8007666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	fe00e800 	.word	0xfe00e800

0800775c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	@ 0x28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b00      	cmp	r3, #0
 8007786:	d068      	beq.n	800785a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2210      	movs	r2, #16
 800778e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007790:	e049      	b.n	8007826 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d045      	beq.n	8007826 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800779a:	f7fd fcc1 	bl	8005120 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <I2C_IsErrorOccurred+0x54>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d13a      	bne.n	8007826 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d2:	d121      	bne.n	8007818 <I2C_IsErrorOccurred+0xbc>
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077da:	d01d      	beq.n	8007818 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80077dc:	7cfb      	ldrb	r3, [r7, #19]
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d01a      	beq.n	8007818 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80077f2:	f7fd fc95 	bl	8005120 <HAL_GetTick>
 80077f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077f8:	e00e      	b.n	8007818 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077fa:	f7fd fc91 	bl	8005120 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b19      	cmp	r3, #25
 8007806:	d907      	bls.n	8007818 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	f043 0320 	orr.w	r3, r3, #32
 800780e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007816:	e006      	b.n	8007826 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b20      	cmp	r3, #32
 8007824:	d1e9      	bne.n	80077fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f003 0320 	and.w	r3, r3, #32
 8007830:	2b20      	cmp	r3, #32
 8007832:	d003      	beq.n	800783c <I2C_IsErrorOccurred+0xe0>
 8007834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0aa      	beq.n	8007792 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800783c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2220      	movs	r2, #32
 800784a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	f043 0304 	orr.w	r3, r3, #4
 8007852:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800787c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	f043 0308 	orr.w	r3, r3, #8
 8007894:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800789e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	f043 0302 	orr.w	r3, r3, #2
 80078b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80078c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01c      	beq.n	800790a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff fdc3 	bl	800745c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6859      	ldr	r1, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <I2C_IsErrorOccurred+0x1bc>)
 80078e2:	400b      	ands	r3, r1
 80078e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800790a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800790e:	4618      	mov	r0, r3
 8007910:	3728      	adds	r7, #40	@ 0x28
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	fe00e800 	.word	0xfe00e800

0800791c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	607b      	str	r3, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	817b      	strh	r3, [r7, #10]
 800792a:	4613      	mov	r3, r2
 800792c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800792e:	897b      	ldrh	r3, [r7, #10]
 8007930:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007934:	7a7b      	ldrb	r3, [r7, #9]
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800793c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	4313      	orrs	r3, r2
 8007946:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800794a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	0d5b      	lsrs	r3, r3, #21
 8007956:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800795a:	4b08      	ldr	r3, [pc, #32]	@ (800797c <I2C_TransferConfig+0x60>)
 800795c:	430b      	orrs	r3, r1
 800795e:	43db      	mvns	r3, r3
 8007960:	ea02 0103 	and.w	r1, r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800796e:	bf00      	nop
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	03ff63ff 	.word	0x03ff63ff

08007980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b20      	cmp	r3, #32
 8007994:	d138      	bne.n	8007a08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e032      	b.n	8007a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2224      	movs	r2, #36	@ 0x24
 80079b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0201 	bic.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6819      	ldr	r1, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0201 	orr.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e000      	b.n	8007a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d139      	bne.n	8007aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e033      	b.n	8007aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2224      	movs	r2, #36	@ 0x24
 8007a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0201 	bic.w	r2, r2, #1
 8007a58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	e000      	b.n	8007aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007aa0:	2302      	movs	r3, #2
  }
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ab4:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a04      	ldr	r2, [pc, #16]	@ (8007acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007abe:	6013      	str	r3, [r2, #0]
}
 8007ac0:	bf00      	nop
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40007000 	.word	0x40007000

08007ad0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007ad4:	4b04      	ldr	r3, [pc, #16]	@ (8007ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40007000 	.word	0x40007000

08007aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007afa:	d130      	bne.n	8007b5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007afc:	4b23      	ldr	r3, [pc, #140]	@ (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b08:	d038      	beq.n	8007b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b0a:	4b20      	ldr	r3, [pc, #128]	@ (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b12:	4a1e      	ldr	r2, [pc, #120]	@ (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007b90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2232      	movs	r2, #50	@ 0x32
 8007b20:	fb02 f303 	mul.w	r3, r2, r3
 8007b24:	4a1b      	ldr	r2, [pc, #108]	@ (8007b94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	0c9b      	lsrs	r3, r3, #18
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b30:	e002      	b.n	8007b38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b38:	4b14      	ldr	r3, [pc, #80]	@ (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b44:	d102      	bne.n	8007b4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f2      	bne.n	8007b32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b58:	d110      	bne.n	8007b7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e00f      	b.n	8007b7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b6a:	d007      	beq.n	8007b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b6c:	4b07      	ldr	r3, [pc, #28]	@ (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b74:	4a05      	ldr	r2, [pc, #20]	@ (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40007000 	.word	0x40007000
 8007b90:	20000000 	.word	0x20000000
 8007b94:	431bde83 	.word	0x431bde83

08007b98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f000 bc02 	b.w	80083b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bac:	4b96      	ldr	r3, [pc, #600]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 030c 	and.w	r3, r3, #12
 8007bb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bb6:	4b94      	ldr	r3, [pc, #592]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0310 	and.w	r3, r3, #16
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80e4 	beq.w	8007d96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d007      	beq.n	8007be4 <HAL_RCC_OscConfig+0x4c>
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	2b0c      	cmp	r3, #12
 8007bd8:	f040 808b 	bne.w	8007cf2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	f040 8087 	bne.w	8007cf2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007be4:	4b88      	ldr	r3, [pc, #544]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <HAL_RCC_OscConfig+0x64>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e3d9      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a1a      	ldr	r2, [r3, #32]
 8007c00:	4b81      	ldr	r3, [pc, #516]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <HAL_RCC_OscConfig+0x7e>
 8007c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c14:	e005      	b.n	8007c22 <HAL_RCC_OscConfig+0x8a>
 8007c16:	4b7c      	ldr	r3, [pc, #496]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c1c:	091b      	lsrs	r3, r3, #4
 8007c1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d223      	bcs.n	8007c6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fdbe 	bl	80087ac <RCC_SetFlashLatencyFromMSIRange>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e3ba      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c3a:	4b73      	ldr	r3, [pc, #460]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a72      	ldr	r2, [pc, #456]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c40:	f043 0308 	orr.w	r3, r3, #8
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	4b70      	ldr	r3, [pc, #448]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	496d      	ldr	r1, [pc, #436]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c58:	4b6b      	ldr	r3, [pc, #428]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	4968      	ldr	r1, [pc, #416]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	604b      	str	r3, [r1, #4]
 8007c6c:	e025      	b.n	8007cba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c6e:	4b66      	ldr	r3, [pc, #408]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a65      	ldr	r2, [pc, #404]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c74:	f043 0308 	orr.w	r3, r3, #8
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	4b63      	ldr	r3, [pc, #396]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	4960      	ldr	r1, [pc, #384]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	495b      	ldr	r1, [pc, #364]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 fd7e 	bl	80087ac <RCC_SetFlashLatencyFromMSIRange>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e37a      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cba:	f000 fc81 	bl	80085c0 <HAL_RCC_GetSysClockFreq>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	4b51      	ldr	r3, [pc, #324]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	091b      	lsrs	r3, r3, #4
 8007cc6:	f003 030f 	and.w	r3, r3, #15
 8007cca:	4950      	ldr	r1, [pc, #320]	@ (8007e0c <HAL_RCC_OscConfig+0x274>)
 8007ccc:	5ccb      	ldrb	r3, [r1, r3]
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8007e10 <HAL_RCC_OscConfig+0x278>)
 8007cd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007cda:	4b4e      	ldr	r3, [pc, #312]	@ (8007e14 <HAL_RCC_OscConfig+0x27c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fd f904 	bl	8004eec <HAL_InitTick>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d052      	beq.n	8007d94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	e35e      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d032      	beq.n	8007d60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007cfa:	4b43      	ldr	r3, [pc, #268]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a42      	ldr	r2, [pc, #264]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d00:	f043 0301 	orr.w	r3, r3, #1
 8007d04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007d06:	f7fd fa0b 	bl	8005120 <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d0c:	e008      	b.n	8007d20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d0e:	f7fd fa07 	bl	8005120 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e347      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d20:	4b39      	ldr	r3, [pc, #228]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0f0      	beq.n	8007d0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d2c:	4b36      	ldr	r3, [pc, #216]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a35      	ldr	r2, [pc, #212]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d32:	f043 0308 	orr.w	r3, r3, #8
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	4b33      	ldr	r3, [pc, #204]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	4930      	ldr	r1, [pc, #192]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	492b      	ldr	r1, [pc, #172]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	604b      	str	r3, [r1, #4]
 8007d5e:	e01a      	b.n	8007d96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d60:	4b29      	ldr	r3, [pc, #164]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a28      	ldr	r2, [pc, #160]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007d6c:	f7fd f9d8 	bl	8005120 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d74:	f7fd f9d4 	bl	8005120 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e314      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d86:	4b20      	ldr	r3, [pc, #128]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCC_OscConfig+0x1dc>
 8007d92:	e000      	b.n	8007d96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d073      	beq.n	8007e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d005      	beq.n	8007db4 <HAL_RCC_OscConfig+0x21c>
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	2b0c      	cmp	r3, #12
 8007dac:	d10e      	bne.n	8007dcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d10b      	bne.n	8007dcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db4:	4b14      	ldr	r3, [pc, #80]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d063      	beq.n	8007e88 <HAL_RCC_OscConfig+0x2f0>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d15f      	bne.n	8007e88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e2f1      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd4:	d106      	bne.n	8007de4 <HAL_RCC_OscConfig+0x24c>
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a0b      	ldr	r2, [pc, #44]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007de0:	6013      	str	r3, [r2, #0]
 8007de2:	e025      	b.n	8007e30 <HAL_RCC_OscConfig+0x298>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dec:	d114      	bne.n	8007e18 <HAL_RCC_OscConfig+0x280>
 8007dee:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a05      	ldr	r2, [pc, #20]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	4b03      	ldr	r3, [pc, #12]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a02      	ldr	r2, [pc, #8]	@ (8007e08 <HAL_RCC_OscConfig+0x270>)
 8007e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	e013      	b.n	8007e30 <HAL_RCC_OscConfig+0x298>
 8007e08:	40021000 	.word	0x40021000
 8007e0c:	08010210 	.word	0x08010210
 8007e10:	20000000 	.word	0x20000000
 8007e14:	20000004 	.word	0x20000004
 8007e18:	4ba0      	ldr	r3, [pc, #640]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a9f      	ldr	r2, [pc, #636]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	4b9d      	ldr	r3, [pc, #628]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a9c      	ldr	r2, [pc, #624]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d013      	beq.n	8007e60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e38:	f7fd f972 	bl	8005120 <HAL_GetTick>
 8007e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e3e:	e008      	b.n	8007e52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e40:	f7fd f96e 	bl	8005120 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b64      	cmp	r3, #100	@ 0x64
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e2ae      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e52:	4b92      	ldr	r3, [pc, #584]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f0      	beq.n	8007e40 <HAL_RCC_OscConfig+0x2a8>
 8007e5e:	e014      	b.n	8007e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e60:	f7fd f95e 	bl	8005120 <HAL_GetTick>
 8007e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e66:	e008      	b.n	8007e7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e68:	f7fd f95a 	bl	8005120 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b64      	cmp	r3, #100	@ 0x64
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e29a      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e7a:	4b88      	ldr	r3, [pc, #544]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f0      	bne.n	8007e68 <HAL_RCC_OscConfig+0x2d0>
 8007e86:	e000      	b.n	8007e8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d060      	beq.n	8007f58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	d005      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x310>
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	2b0c      	cmp	r3, #12
 8007ea0:	d119      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d116      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x328>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e277      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec0:	4b76      	ldr	r3, [pc, #472]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	061b      	lsls	r3, r3, #24
 8007ece:	4973      	ldr	r1, [pc, #460]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ed4:	e040      	b.n	8007f58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d023      	beq.n	8007f26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ede:	4b6f      	ldr	r3, [pc, #444]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eea:	f7fd f919 	bl	8005120 <HAL_GetTick>
 8007eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ef2:	f7fd f915 	bl	8005120 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e255      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f04:	4b65      	ldr	r3, [pc, #404]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0f0      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f10:	4b62      	ldr	r3, [pc, #392]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	061b      	lsls	r3, r3, #24
 8007f1e:	495f      	ldr	r1, [pc, #380]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	604b      	str	r3, [r1, #4]
 8007f24:	e018      	b.n	8007f58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f26:	4b5d      	ldr	r3, [pc, #372]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f32:	f7fd f8f5 	bl	8005120 <HAL_GetTick>
 8007f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f3a:	f7fd f8f1 	bl	8005120 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e231      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f4c:	4b53      	ldr	r3, [pc, #332]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1f0      	bne.n	8007f3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0308 	and.w	r3, r3, #8
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d03c      	beq.n	8007fde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01c      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f72:	4a4a      	ldr	r2, [pc, #296]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f74:	f043 0301 	orr.w	r3, r3, #1
 8007f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f7c:	f7fd f8d0 	bl	8005120 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f84:	f7fd f8cc 	bl	8005120 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e20c      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f96:	4b41      	ldr	r3, [pc, #260]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0ef      	beq.n	8007f84 <HAL_RCC_OscConfig+0x3ec>
 8007fa4:	e01b      	b.n	8007fde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fac:	4a3b      	ldr	r2, [pc, #236]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007fae:	f023 0301 	bic.w	r3, r3, #1
 8007fb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb6:	f7fd f8b3 	bl	8005120 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fbe:	f7fd f8af 	bl	8005120 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e1ef      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fd0:	4b32      	ldr	r3, [pc, #200]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1ef      	bne.n	8007fbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 80a6 	beq.w	8008138 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fec:	2300      	movs	r3, #0
 8007fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10d      	bne.n	8008018 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ffc:	4b27      	ldr	r3, [pc, #156]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8007ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008000:	4a26      	ldr	r2, [pc, #152]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8008002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008006:	6593      	str	r3, [r2, #88]	@ 0x58
 8008008:	4b24      	ldr	r3, [pc, #144]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 800800a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800800c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008014:	2301      	movs	r3, #1
 8008016:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008018:	4b21      	ldr	r3, [pc, #132]	@ (80080a0 <HAL_RCC_OscConfig+0x508>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008020:	2b00      	cmp	r3, #0
 8008022:	d118      	bne.n	8008056 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008024:	4b1e      	ldr	r3, [pc, #120]	@ (80080a0 <HAL_RCC_OscConfig+0x508>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1d      	ldr	r2, [pc, #116]	@ (80080a0 <HAL_RCC_OscConfig+0x508>)
 800802a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800802e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008030:	f7fd f876 	bl	8005120 <HAL_GetTick>
 8008034:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008036:	e008      	b.n	800804a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008038:	f7fd f872 	bl	8005120 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e1b2      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800804a:	4b15      	ldr	r3, [pc, #84]	@ (80080a0 <HAL_RCC_OscConfig+0x508>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0f0      	beq.n	8008038 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d108      	bne.n	8008070 <HAL_RCC_OscConfig+0x4d8>
 800805e:	4b0f      	ldr	r3, [pc, #60]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8008060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008064:	4a0d      	ldr	r2, [pc, #52]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800806e:	e029      	b.n	80080c4 <HAL_RCC_OscConfig+0x52c>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b05      	cmp	r3, #5
 8008076:	d115      	bne.n	80080a4 <HAL_RCC_OscConfig+0x50c>
 8008078:	4b08      	ldr	r3, [pc, #32]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 800807a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800807e:	4a07      	ldr	r2, [pc, #28]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8008080:	f043 0304 	orr.w	r3, r3, #4
 8008084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008088:	4b04      	ldr	r3, [pc, #16]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808e:	4a03      	ldr	r2, [pc, #12]	@ (800809c <HAL_RCC_OscConfig+0x504>)
 8008090:	f043 0301 	orr.w	r3, r3, #1
 8008094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008098:	e014      	b.n	80080c4 <HAL_RCC_OscConfig+0x52c>
 800809a:	bf00      	nop
 800809c:	40021000 	.word	0x40021000
 80080a0:	40007000 	.word	0x40007000
 80080a4:	4b9a      	ldr	r3, [pc, #616]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80080a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080aa:	4a99      	ldr	r2, [pc, #612]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80080ac:	f023 0301 	bic.w	r3, r3, #1
 80080b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080b4:	4b96      	ldr	r3, [pc, #600]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80080b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ba:	4a95      	ldr	r2, [pc, #596]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80080bc:	f023 0304 	bic.w	r3, r3, #4
 80080c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d016      	beq.n	80080fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080cc:	f7fd f828 	bl	8005120 <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080d2:	e00a      	b.n	80080ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080d4:	f7fd f824 	bl	8005120 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e162      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080ea:	4b89      	ldr	r3, [pc, #548]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80080ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0ed      	beq.n	80080d4 <HAL_RCC_OscConfig+0x53c>
 80080f8:	e015      	b.n	8008126 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080fa:	f7fd f811 	bl	8005120 <HAL_GetTick>
 80080fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008100:	e00a      	b.n	8008118 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008102:	f7fd f80d 	bl	8005120 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008110:	4293      	cmp	r3, r2
 8008112:	d901      	bls.n	8008118 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e14b      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008118:	4b7d      	ldr	r3, [pc, #500]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 800811a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1ed      	bne.n	8008102 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008126:	7ffb      	ldrb	r3, [r7, #31]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d105      	bne.n	8008138 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800812c:	4b78      	ldr	r3, [pc, #480]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 800812e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008130:	4a77      	ldr	r2, [pc, #476]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 8008132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008136:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d03c      	beq.n	80081be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01c      	beq.n	8008186 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800814c:	4b70      	ldr	r3, [pc, #448]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 800814e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008152:	4a6f      	ldr	r2, [pc, #444]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 8008154:	f043 0301 	orr.w	r3, r3, #1
 8008158:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800815c:	f7fc ffe0 	bl	8005120 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008164:	f7fc ffdc 	bl	8005120 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e11c      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008176:	4b66      	ldr	r3, [pc, #408]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 8008178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0ef      	beq.n	8008164 <HAL_RCC_OscConfig+0x5cc>
 8008184:	e01b      	b.n	80081be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008186:	4b62      	ldr	r3, [pc, #392]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 8008188:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800818c:	4a60      	ldr	r2, [pc, #384]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 800818e:	f023 0301 	bic.w	r3, r3, #1
 8008192:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008196:	f7fc ffc3 	bl	8005120 <HAL_GetTick>
 800819a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800819c:	e008      	b.n	80081b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800819e:	f7fc ffbf 	bl	8005120 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e0ff      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081b0:	4b57      	ldr	r3, [pc, #348]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80081b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1ef      	bne.n	800819e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 80f3 	beq.w	80083ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	f040 80c9 	bne.w	8008364 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80081d2:	4b4f      	ldr	r3, [pc, #316]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f003 0203 	and.w	r2, r3, #3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d12c      	bne.n	8008240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f0:	3b01      	subs	r3, #1
 80081f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d123      	bne.n	8008240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008202:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008204:	429a      	cmp	r2, r3
 8008206:	d11b      	bne.n	8008240 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008212:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008214:	429a      	cmp	r2, r3
 8008216:	d113      	bne.n	8008240 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008222:	085b      	lsrs	r3, r3, #1
 8008224:	3b01      	subs	r3, #1
 8008226:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008228:	429a      	cmp	r2, r3
 800822a:	d109      	bne.n	8008240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008236:	085b      	lsrs	r3, r3, #1
 8008238:	3b01      	subs	r3, #1
 800823a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800823c:	429a      	cmp	r2, r3
 800823e:	d06b      	beq.n	8008318 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b0c      	cmp	r3, #12
 8008244:	d062      	beq.n	800830c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008246:	4b32      	ldr	r3, [pc, #200]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e0ac      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008256:	4b2e      	ldr	r3, [pc, #184]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a2d      	ldr	r2, [pc, #180]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 800825c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008260:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008262:	f7fc ff5d 	bl	8005120 <HAL_GetTick>
 8008266:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008268:	e008      	b.n	800827c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800826a:	f7fc ff59 	bl	8005120 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e099      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800827c:	4b24      	ldr	r3, [pc, #144]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1f0      	bne.n	800826a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008288:	4b21      	ldr	r3, [pc, #132]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	4b21      	ldr	r3, [pc, #132]	@ (8008314 <HAL_RCC_OscConfig+0x77c>)
 800828e:	4013      	ands	r3, r2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008298:	3a01      	subs	r2, #1
 800829a:	0112      	lsls	r2, r2, #4
 800829c:	4311      	orrs	r1, r2
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80082a2:	0212      	lsls	r2, r2, #8
 80082a4:	4311      	orrs	r1, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80082aa:	0852      	lsrs	r2, r2, #1
 80082ac:	3a01      	subs	r2, #1
 80082ae:	0552      	lsls	r2, r2, #21
 80082b0:	4311      	orrs	r1, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80082b6:	0852      	lsrs	r2, r2, #1
 80082b8:	3a01      	subs	r2, #1
 80082ba:	0652      	lsls	r2, r2, #25
 80082bc:	4311      	orrs	r1, r2
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80082c2:	06d2      	lsls	r2, r2, #27
 80082c4:	430a      	orrs	r2, r1
 80082c6:	4912      	ldr	r1, [pc, #72]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80082cc:	4b10      	ldr	r3, [pc, #64]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80082d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 80082de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80082e4:	f7fc ff1c 	bl	8005120 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ec:	f7fc ff18 	bl	8005120 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e058      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082fe:	4b04      	ldr	r3, [pc, #16]	@ (8008310 <HAL_RCC_OscConfig+0x778>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f0      	beq.n	80082ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800830a:	e050      	b.n	80083ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e04f      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
 8008310:	40021000 	.word	0x40021000
 8008314:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008318:	4b27      	ldr	r3, [pc, #156]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d144      	bne.n	80083ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008324:	4b24      	ldr	r3, [pc, #144]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a23      	ldr	r2, [pc, #140]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 800832a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800832e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008330:	4b21      	ldr	r3, [pc, #132]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	4a20      	ldr	r2, [pc, #128]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 8008336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800833a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800833c:	f7fc fef0 	bl	8005120 <HAL_GetTick>
 8008340:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008342:	e008      	b.n	8008356 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008344:	f7fc feec 	bl	8005120 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e02c      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008356:	4b18      	ldr	r3, [pc, #96]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0f0      	beq.n	8008344 <HAL_RCC_OscConfig+0x7ac>
 8008362:	e024      	b.n	80083ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	2b0c      	cmp	r3, #12
 8008368:	d01f      	beq.n	80083aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800836a:	4b13      	ldr	r3, [pc, #76]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a12      	ldr	r2, [pc, #72]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 8008370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008376:	f7fc fed3 	bl	8005120 <HAL_GetTick>
 800837a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800837e:	f7fc fecf 	bl	8005120 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e00f      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008390:	4b09      	ldr	r3, [pc, #36]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f0      	bne.n	800837e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800839c:	4b06      	ldr	r3, [pc, #24]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	4905      	ldr	r1, [pc, #20]	@ (80083b8 <HAL_RCC_OscConfig+0x820>)
 80083a2:	4b06      	ldr	r3, [pc, #24]	@ (80083bc <HAL_RCC_OscConfig+0x824>)
 80083a4:	4013      	ands	r3, r2
 80083a6:	60cb      	str	r3, [r1, #12]
 80083a8:	e001      	b.n	80083ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e000      	b.n	80083b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40021000 	.word	0x40021000
 80083bc:	feeefffc 	.word	0xfeeefffc

080083c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e0e7      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083d4:	4b75      	ldr	r3, [pc, #468]	@ (80085ac <HAL_RCC_ClockConfig+0x1ec>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d910      	bls.n	8008404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e2:	4b72      	ldr	r3, [pc, #456]	@ (80085ac <HAL_RCC_ClockConfig+0x1ec>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f023 0207 	bic.w	r2, r3, #7
 80083ea:	4970      	ldr	r1, [pc, #448]	@ (80085ac <HAL_RCC_ClockConfig+0x1ec>)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083f2:	4b6e      	ldr	r3, [pc, #440]	@ (80085ac <HAL_RCC_ClockConfig+0x1ec>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d001      	beq.n	8008404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e0cf      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d010      	beq.n	8008432 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	4b66      	ldr	r3, [pc, #408]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800841c:	429a      	cmp	r2, r3
 800841e:	d908      	bls.n	8008432 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008420:	4b63      	ldr	r3, [pc, #396]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	4960      	ldr	r1, [pc, #384]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 800842e:	4313      	orrs	r3, r2
 8008430:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d04c      	beq.n	80084d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b03      	cmp	r3, #3
 8008444:	d107      	bne.n	8008456 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008446:	4b5a      	ldr	r3, [pc, #360]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d121      	bne.n	8008496 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e0a6      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d107      	bne.n	800846e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800845e:	4b54      	ldr	r3, [pc, #336]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d115      	bne.n	8008496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e09a      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d107      	bne.n	8008486 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008476:	4b4e      	ldr	r3, [pc, #312]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e08e      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008486:	4b4a      	ldr	r3, [pc, #296]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e086      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008496:	4b46      	ldr	r3, [pc, #280]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f023 0203 	bic.w	r2, r3, #3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	4943      	ldr	r1, [pc, #268]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a8:	f7fc fe3a 	bl	8005120 <HAL_GetTick>
 80084ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ae:	e00a      	b.n	80084c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084b0:	f7fc fe36 	bl	8005120 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084be:	4293      	cmp	r3, r2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e06e      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084c6:	4b3a      	ldr	r3, [pc, #232]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 020c 	and.w	r2, r3, #12
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d1eb      	bne.n	80084b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d010      	beq.n	8008506 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	4b31      	ldr	r3, [pc, #196]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d208      	bcs.n	8008506 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084f4:	4b2e      	ldr	r3, [pc, #184]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	492b      	ldr	r1, [pc, #172]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008502:	4313      	orrs	r3, r2
 8008504:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008506:	4b29      	ldr	r3, [pc, #164]	@ (80085ac <HAL_RCC_ClockConfig+0x1ec>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d210      	bcs.n	8008536 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008514:	4b25      	ldr	r3, [pc, #148]	@ (80085ac <HAL_RCC_ClockConfig+0x1ec>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f023 0207 	bic.w	r2, r3, #7
 800851c:	4923      	ldr	r1, [pc, #140]	@ (80085ac <HAL_RCC_ClockConfig+0x1ec>)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	4313      	orrs	r3, r2
 8008522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008524:	4b21      	ldr	r3, [pc, #132]	@ (80085ac <HAL_RCC_ClockConfig+0x1ec>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	429a      	cmp	r2, r3
 8008530:	d001      	beq.n	8008536 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e036      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d008      	beq.n	8008554 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008542:	4b1b      	ldr	r3, [pc, #108]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	4918      	ldr	r1, [pc, #96]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008550:	4313      	orrs	r3, r2
 8008552:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0308 	and.w	r3, r3, #8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d009      	beq.n	8008574 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008560:	4b13      	ldr	r3, [pc, #76]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	4910      	ldr	r1, [pc, #64]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008570:	4313      	orrs	r3, r2
 8008572:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008574:	f000 f824 	bl	80085c0 <HAL_RCC_GetSysClockFreq>
 8008578:	4602      	mov	r2, r0
 800857a:	4b0d      	ldr	r3, [pc, #52]	@ (80085b0 <HAL_RCC_ClockConfig+0x1f0>)
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	091b      	lsrs	r3, r3, #4
 8008580:	f003 030f 	and.w	r3, r3, #15
 8008584:	490b      	ldr	r1, [pc, #44]	@ (80085b4 <HAL_RCC_ClockConfig+0x1f4>)
 8008586:	5ccb      	ldrb	r3, [r1, r3]
 8008588:	f003 031f 	and.w	r3, r3, #31
 800858c:	fa22 f303 	lsr.w	r3, r2, r3
 8008590:	4a09      	ldr	r2, [pc, #36]	@ (80085b8 <HAL_RCC_ClockConfig+0x1f8>)
 8008592:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008594:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <HAL_RCC_ClockConfig+0x1fc>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f7fc fca7 	bl	8004eec <HAL_InitTick>
 800859e:	4603      	mov	r3, r0
 80085a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80085a2:	7afb      	ldrb	r3, [r7, #11]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40022000 	.word	0x40022000
 80085b0:	40021000 	.word	0x40021000
 80085b4:	08010210 	.word	0x08010210
 80085b8:	20000000 	.word	0x20000000
 80085bc:	20000004 	.word	0x20000004

080085c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b089      	sub	sp, #36	@ 0x24
 80085c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	2300      	movs	r3, #0
 80085cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085ce:	4b3e      	ldr	r3, [pc, #248]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 030c 	and.w	r3, r3, #12
 80085d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085d8:	4b3b      	ldr	r3, [pc, #236]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <HAL_RCC_GetSysClockFreq+0x34>
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	2b0c      	cmp	r3, #12
 80085ec:	d121      	bne.n	8008632 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d11e      	bne.n	8008632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80085f4:	4b34      	ldr	r3, [pc, #208]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d107      	bne.n	8008610 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008600:	4b31      	ldr	r3, [pc, #196]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008606:	0a1b      	lsrs	r3, r3, #8
 8008608:	f003 030f 	and.w	r3, r3, #15
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	e005      	b.n	800861c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008610:	4b2d      	ldr	r3, [pc, #180]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	091b      	lsrs	r3, r3, #4
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800861c:	4a2b      	ldr	r2, [pc, #172]	@ (80086cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008624:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10d      	bne.n	8008648 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008630:	e00a      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b04      	cmp	r3, #4
 8008636:	d102      	bne.n	800863e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008638:	4b25      	ldr	r3, [pc, #148]	@ (80086d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	e004      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	2b08      	cmp	r3, #8
 8008642:	d101      	bne.n	8008648 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008644:	4b23      	ldr	r3, [pc, #140]	@ (80086d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008646:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b0c      	cmp	r3, #12
 800864c:	d134      	bne.n	80086b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800864e:	4b1e      	ldr	r3, [pc, #120]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d003      	beq.n	8008666 <HAL_RCC_GetSysClockFreq+0xa6>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b03      	cmp	r3, #3
 8008662:	d003      	beq.n	800866c <HAL_RCC_GetSysClockFreq+0xac>
 8008664:	e005      	b.n	8008672 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008666:	4b1a      	ldr	r3, [pc, #104]	@ (80086d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008668:	617b      	str	r3, [r7, #20]
      break;
 800866a:	e005      	b.n	8008678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800866c:	4b19      	ldr	r3, [pc, #100]	@ (80086d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800866e:	617b      	str	r3, [r7, #20]
      break;
 8008670:	e002      	b.n	8008678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	617b      	str	r3, [r7, #20]
      break;
 8008676:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008678:	4b13      	ldr	r3, [pc, #76]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	091b      	lsrs	r3, r3, #4
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	3301      	adds	r3, #1
 8008684:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008686:	4b10      	ldr	r3, [pc, #64]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	fb03 f202 	mul.w	r2, r3, r2
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	fbb2 f3f3 	udiv	r3, r2, r3
 800869c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800869e:	4b0a      	ldr	r3, [pc, #40]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	0e5b      	lsrs	r3, r3, #25
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	3301      	adds	r3, #1
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80086b8:	69bb      	ldr	r3, [r7, #24]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3724      	adds	r7, #36	@ 0x24
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	40021000 	.word	0x40021000
 80086cc:	08010228 	.word	0x08010228
 80086d0:	00f42400 	.word	0x00f42400
 80086d4:	007a1200 	.word	0x007a1200

080086d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086dc:	4b03      	ldr	r3, [pc, #12]	@ (80086ec <HAL_RCC_GetHCLKFreq+0x14>)
 80086de:	681b      	ldr	r3, [r3, #0]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	20000000 	.word	0x20000000

080086f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80086f4:	f7ff fff0 	bl	80086d8 <HAL_RCC_GetHCLKFreq>
 80086f8:	4602      	mov	r2, r0
 80086fa:	4b06      	ldr	r3, [pc, #24]	@ (8008714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	4904      	ldr	r1, [pc, #16]	@ (8008718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008706:	5ccb      	ldrb	r3, [r1, r3]
 8008708:	f003 031f 	and.w	r3, r3, #31
 800870c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008710:	4618      	mov	r0, r3
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40021000 	.word	0x40021000
 8008718:	08010220 	.word	0x08010220

0800871c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008720:	f7ff ffda 	bl	80086d8 <HAL_RCC_GetHCLKFreq>
 8008724:	4602      	mov	r2, r0
 8008726:	4b06      	ldr	r3, [pc, #24]	@ (8008740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	0adb      	lsrs	r3, r3, #11
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	4904      	ldr	r1, [pc, #16]	@ (8008744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008732:	5ccb      	ldrb	r3, [r1, r3]
 8008734:	f003 031f 	and.w	r3, r3, #31
 8008738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800873c:	4618      	mov	r0, r3
 800873e:	bd80      	pop	{r7, pc}
 8008740:	40021000 	.word	0x40021000
 8008744:	08010220 	.word	0x08010220

08008748 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	220f      	movs	r2, #15
 8008756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008758:	4b12      	ldr	r3, [pc, #72]	@ (80087a4 <HAL_RCC_GetClockConfig+0x5c>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f003 0203 	and.w	r2, r3, #3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008764:	4b0f      	ldr	r3, [pc, #60]	@ (80087a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008770:	4b0c      	ldr	r3, [pc, #48]	@ (80087a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800877c:	4b09      	ldr	r3, [pc, #36]	@ (80087a4 <HAL_RCC_GetClockConfig+0x5c>)
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	08db      	lsrs	r3, r3, #3
 8008782:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800878a:	4b07      	ldr	r3, [pc, #28]	@ (80087a8 <HAL_RCC_GetClockConfig+0x60>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0207 	and.w	r2, r3, #7
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	601a      	str	r2, [r3, #0]
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40021000 	.word	0x40021000
 80087a8:	40022000 	.word	0x40022000

080087ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80087b4:	2300      	movs	r3, #0
 80087b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80087b8:	4b2a      	ldr	r3, [pc, #168]	@ (8008864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80087c4:	f7ff f984 	bl	8007ad0 <HAL_PWREx_GetVoltageRange>
 80087c8:	6178      	str	r0, [r7, #20]
 80087ca:	e014      	b.n	80087f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80087cc:	4b25      	ldr	r3, [pc, #148]	@ (8008864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d0:	4a24      	ldr	r2, [pc, #144]	@ (8008864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80087d8:	4b22      	ldr	r3, [pc, #136]	@ (8008864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80087e4:	f7ff f974 	bl	8007ad0 <HAL_PWREx_GetVoltageRange>
 80087e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80087ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087fc:	d10b      	bne.n	8008816 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b80      	cmp	r3, #128	@ 0x80
 8008802:	d919      	bls.n	8008838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2ba0      	cmp	r3, #160	@ 0xa0
 8008808:	d902      	bls.n	8008810 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800880a:	2302      	movs	r3, #2
 800880c:	613b      	str	r3, [r7, #16]
 800880e:	e013      	b.n	8008838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008810:	2301      	movs	r3, #1
 8008812:	613b      	str	r3, [r7, #16]
 8008814:	e010      	b.n	8008838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b80      	cmp	r3, #128	@ 0x80
 800881a:	d902      	bls.n	8008822 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800881c:	2303      	movs	r3, #3
 800881e:	613b      	str	r3, [r7, #16]
 8008820:	e00a      	b.n	8008838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b80      	cmp	r3, #128	@ 0x80
 8008826:	d102      	bne.n	800882e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008828:	2302      	movs	r3, #2
 800882a:	613b      	str	r3, [r7, #16]
 800882c:	e004      	b.n	8008838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b70      	cmp	r3, #112	@ 0x70
 8008832:	d101      	bne.n	8008838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008834:	2301      	movs	r3, #1
 8008836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008838:	4b0b      	ldr	r3, [pc, #44]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f023 0207 	bic.w	r2, r3, #7
 8008840:	4909      	ldr	r1, [pc, #36]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	4313      	orrs	r3, r2
 8008846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008848:	4b07      	ldr	r3, [pc, #28]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0307 	and.w	r3, r3, #7
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	429a      	cmp	r2, r3
 8008854:	d001      	beq.n	800885a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e000      	b.n	800885c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	40021000 	.word	0x40021000
 8008868:	40022000 	.word	0x40022000

0800886c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008874:	2300      	movs	r3, #0
 8008876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008878:	2300      	movs	r3, #0
 800887a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008884:	2b00      	cmp	r3, #0
 8008886:	d031      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800888c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008890:	d01a      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008892:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008896:	d814      	bhi.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d009      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800889c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088a0:	d10f      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80088a2:	4b5d      	ldr	r3, [pc, #372]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	4a5c      	ldr	r2, [pc, #368]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80088ae:	e00c      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3304      	adds	r3, #4
 80088b4:	2100      	movs	r1, #0
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f9de 	bl	8008c78 <RCCEx_PLLSAI1_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80088c0:	e003      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	74fb      	strb	r3, [r7, #19]
      break;
 80088c6:	e000      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80088c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ca:	7cfb      	ldrb	r3, [r7, #19]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088d0:	4b51      	ldr	r3, [pc, #324]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088de:	494e      	ldr	r1, [pc, #312]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80088e6:	e001      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	7cfb      	ldrb	r3, [r7, #19]
 80088ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 809e 	beq.w	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fa:	2300      	movs	r3, #0
 80088fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80088fe:	4b46      	ldr	r3, [pc, #280]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800890e:	2300      	movs	r3, #0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00d      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008914:	4b40      	ldr	r3, [pc, #256]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008918:	4a3f      	ldr	r2, [pc, #252]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800891a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800891e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008920:	4b3d      	ldr	r3, [pc, #244]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008928:	60bb      	str	r3, [r7, #8]
 800892a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800892c:	2301      	movs	r3, #1
 800892e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008930:	4b3a      	ldr	r3, [pc, #232]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a39      	ldr	r2, [pc, #228]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800893a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800893c:	f7fc fbf0 	bl	8005120 <HAL_GetTick>
 8008940:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008942:	e009      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008944:	f7fc fbec 	bl	8005120 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d902      	bls.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	74fb      	strb	r3, [r7, #19]
        break;
 8008956:	e005      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008958:	4b30      	ldr	r3, [pc, #192]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0ef      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008964:	7cfb      	ldrb	r3, [r7, #19]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d15a      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800896a:	4b2b      	ldr	r3, [pc, #172]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800896c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008974:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01e      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	429a      	cmp	r2, r3
 8008984:	d019      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008986:	4b24      	ldr	r3, [pc, #144]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800898c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008990:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008992:	4b21      	ldr	r3, [pc, #132]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008998:	4a1f      	ldr	r2, [pc, #124]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800899a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800899e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089b2:	4a19      	ldr	r2, [pc, #100]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d016      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c4:	f7fc fbac 	bl	8005120 <HAL_GetTick>
 80089c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089ca:	e00b      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089cc:	f7fc fba8 	bl	8005120 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089da:	4293      	cmp	r3, r2
 80089dc:	d902      	bls.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	74fb      	strb	r3, [r7, #19]
            break;
 80089e2:	e006      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0ec      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80089f2:	7cfb      	ldrb	r3, [r7, #19]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089f8:	4b07      	ldr	r3, [pc, #28]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a06:	4904      	ldr	r1, [pc, #16]	@ (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008a0e:	e009      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a10:	7cfb      	ldrb	r3, [r7, #19]
 8008a12:	74bb      	strb	r3, [r7, #18]
 8008a14:	e006      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008a16:	bf00      	nop
 8008a18:	40021000 	.word	0x40021000
 8008a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a20:	7cfb      	ldrb	r3, [r7, #19]
 8008a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a24:	7c7b      	ldrb	r3, [r7, #17]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d105      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a2a:	4b8a      	ldr	r3, [pc, #552]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2e:	4a89      	ldr	r2, [pc, #548]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a42:	4b84      	ldr	r3, [pc, #528]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a48:	f023 0203 	bic.w	r2, r3, #3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	4980      	ldr	r1, [pc, #512]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00a      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a64:	4b7b      	ldr	r3, [pc, #492]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a6a:	f023 020c 	bic.w	r2, r3, #12
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a72:	4978      	ldr	r1, [pc, #480]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a86:	4b73      	ldr	r3, [pc, #460]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	496f      	ldr	r1, [pc, #444]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab6:	4967      	ldr	r1, [pc, #412]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008aca:	4b62      	ldr	r3, [pc, #392]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad8:	495e      	ldr	r1, [pc, #376]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008aec:	4b59      	ldr	r3, [pc, #356]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	4956      	ldr	r1, [pc, #344]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b0e:	4b51      	ldr	r3, [pc, #324]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1c:	494d      	ldr	r1, [pc, #308]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d028      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b30:	4b48      	ldr	r3, [pc, #288]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	4945      	ldr	r1, [pc, #276]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b4e:	d106      	bne.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b50:	4b40      	ldr	r3, [pc, #256]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	4a3f      	ldr	r2, [pc, #252]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b5a:	60d3      	str	r3, [r2, #12]
 8008b5c:	e011      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b66:	d10c      	bne.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f882 	bl	8008c78 <RCCEx_PLLSAI1_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008b78:	7cfb      	ldrb	r3, [r7, #19]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8008b7e:	7cfb      	ldrb	r3, [r7, #19]
 8008b80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d028      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b8e:	4b31      	ldr	r3, [pc, #196]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b9c:	492d      	ldr	r1, [pc, #180]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bac:	d106      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bae:	4b29      	ldr	r3, [pc, #164]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	4a28      	ldr	r2, [pc, #160]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bb8:	60d3      	str	r3, [r2, #12]
 8008bba:	e011      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bc4:	d10c      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	2101      	movs	r1, #1
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 f853 	bl	8008c78 <RCCEx_PLLSAI1_Config>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008bd6:	7cfb      	ldrb	r3, [r7, #19]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008bdc:	7cfb      	ldrb	r3, [r7, #19]
 8008bde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01c      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bec:	4b19      	ldr	r3, [pc, #100]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bfa:	4916      	ldr	r1, [pc, #88]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c0a:	d10c      	bne.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	2102      	movs	r1, #2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 f830 	bl	8008c78 <RCCEx_PLLSAI1_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c1c:	7cfb      	ldrb	r3, [r7, #19]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8008c22:	7cfb      	ldrb	r3, [r7, #19]
 8008c24:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c32:	4b08      	ldr	r3, [pc, #32]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c38:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c40:	4904      	ldr	r1, [pc, #16]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008c48:	7cbb      	ldrb	r3, [r7, #18]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40021000 	.word	0x40021000

08008c58 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008c5c:	4b05      	ldr	r3, [pc, #20]	@ (8008c74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a04      	ldr	r2, [pc, #16]	@ (8008c74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008c62:	f043 0304 	orr.w	r3, r3, #4
 8008c66:	6013      	str	r3, [r2, #0]
}
 8008c68:	bf00      	nop
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	40021000 	.word	0x40021000

08008c78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c86:	4b74      	ldr	r3, [pc, #464]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d018      	beq.n	8008cc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008c92:	4b71      	ldr	r3, [pc, #452]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f003 0203 	and.w	r2, r3, #3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d10d      	bne.n	8008cbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
       ||
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d009      	beq.n	8008cbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008caa:	4b6b      	ldr	r3, [pc, #428]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	091b      	lsrs	r3, r3, #4
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
       ||
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d047      	beq.n	8008d4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	73fb      	strb	r3, [r7, #15]
 8008cc2:	e044      	b.n	8008d4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d018      	beq.n	8008cfe <RCCEx_PLLSAI1_Config+0x86>
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d825      	bhi.n	8008d1c <RCCEx_PLLSAI1_Config+0xa4>
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d002      	beq.n	8008cda <RCCEx_PLLSAI1_Config+0x62>
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d009      	beq.n	8008cec <RCCEx_PLLSAI1_Config+0x74>
 8008cd8:	e020      	b.n	8008d1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008cda:	4b5f      	ldr	r3, [pc, #380]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d11d      	bne.n	8008d22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cea:	e01a      	b.n	8008d22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008cec:	4b5a      	ldr	r3, [pc, #360]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d116      	bne.n	8008d26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cfc:	e013      	b.n	8008d26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008cfe:	4b56      	ldr	r3, [pc, #344]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10f      	bne.n	8008d2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008d0a:	4b53      	ldr	r3, [pc, #332]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d109      	bne.n	8008d2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d1a:	e006      	b.n	8008d2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d20:	e004      	b.n	8008d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d22:	bf00      	nop
 8008d24:	e002      	b.n	8008d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d26:	bf00      	nop
 8008d28:	e000      	b.n	8008d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10d      	bne.n	8008d4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008d32:	4b49      	ldr	r3, [pc, #292]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6819      	ldr	r1, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	430b      	orrs	r3, r1
 8008d48:	4943      	ldr	r1, [pc, #268]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d17c      	bne.n	8008e4e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008d54:	4b40      	ldr	r3, [pc, #256]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a3f      	ldr	r2, [pc, #252]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d60:	f7fc f9de 	bl	8005120 <HAL_GetTick>
 8008d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d66:	e009      	b.n	8008d7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d68:	f7fc f9da 	bl	8005120 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d902      	bls.n	8008d7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	73fb      	strb	r3, [r7, #15]
        break;
 8008d7a:	e005      	b.n	8008d88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d7c:	4b36      	ldr	r3, [pc, #216]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1ef      	bne.n	8008d68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d15f      	bne.n	8008e4e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d110      	bne.n	8008db6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d94:	4b30      	ldr	r3, [pc, #192]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8008d9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6892      	ldr	r2, [r2, #8]
 8008da4:	0211      	lsls	r1, r2, #8
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68d2      	ldr	r2, [r2, #12]
 8008daa:	06d2      	lsls	r2, r2, #27
 8008dac:	430a      	orrs	r2, r1
 8008dae:	492a      	ldr	r1, [pc, #168]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	610b      	str	r3, [r1, #16]
 8008db4:	e027      	b.n	8008e06 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d112      	bne.n	8008de2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008dbc:	4b26      	ldr	r3, [pc, #152]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008dc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6892      	ldr	r2, [r2, #8]
 8008dcc:	0211      	lsls	r1, r2, #8
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6912      	ldr	r2, [r2, #16]
 8008dd2:	0852      	lsrs	r2, r2, #1
 8008dd4:	3a01      	subs	r2, #1
 8008dd6:	0552      	lsls	r2, r2, #21
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	491f      	ldr	r1, [pc, #124]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	610b      	str	r3, [r1, #16]
 8008de0:	e011      	b.n	8008e06 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008de2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008dea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6892      	ldr	r2, [r2, #8]
 8008df2:	0211      	lsls	r1, r2, #8
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6952      	ldr	r2, [r2, #20]
 8008df8:	0852      	lsrs	r2, r2, #1
 8008dfa:	3a01      	subs	r2, #1
 8008dfc:	0652      	lsls	r2, r2, #25
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	4915      	ldr	r1, [pc, #84]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008e06:	4b14      	ldr	r3, [pc, #80]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a13      	ldr	r2, [pc, #76]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e12:	f7fc f985 	bl	8005120 <HAL_GetTick>
 8008e16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e18:	e009      	b.n	8008e2e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e1a:	f7fc f981 	bl	8005120 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d902      	bls.n	8008e2e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e2c:	e005      	b.n	8008e3a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0ef      	beq.n	8008e1a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d106      	bne.n	8008e4e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008e40:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e42:	691a      	ldr	r2, [r3, #16]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	4903      	ldr	r1, [pc, #12]	@ (8008e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	40021000 	.word	0x40021000

08008e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e095      	b.n	8008f9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d108      	bne.n	8008e88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e7e:	d009      	beq.n	8008e94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	61da      	str	r2, [r3, #28]
 8008e86:	e005      	b.n	8008e94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fb ff0e 	bl	8004cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ed4:	d902      	bls.n	8008edc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	e002      	b.n	8008ee2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ee0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008eea:	d007      	beq.n	8008efc <HAL_SPI_Init+0xa0>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ef4:	d002      	beq.n	8008efc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	431a      	orrs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3e:	ea42 0103 	orr.w	r1, r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f46:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	0c1b      	lsrs	r3, r3, #16
 8008f58:	f003 0204 	and.w	r2, r3, #4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	431a      	orrs	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f6a:	f003 0308 	and.w	r3, r3, #8
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008f78:	ea42 0103 	orr.w	r1, r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b088      	sub	sp, #32
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	603b      	str	r3, [r7, #0]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d101      	bne.n	8008fc4 <HAL_SPI_Transmit+0x22>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e15f      	b.n	8009284 <HAL_SPI_Transmit+0x2e2>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fcc:	f7fc f8a8 	bl	8005120 <HAL_GetTick>
 8008fd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d002      	beq.n	8008fe8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008fe6:	e148      	b.n	800927a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <HAL_SPI_Transmit+0x52>
 8008fee:	88fb      	ldrh	r3, [r7, #6]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ff8:	e13f      	b.n	800927a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	88fa      	ldrh	r2, [r7, #6]
 8009012:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	88fa      	ldrh	r2, [r7, #6]
 8009018:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009044:	d10f      	bne.n	8009066 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009070:	2b40      	cmp	r3, #64	@ 0x40
 8009072:	d007      	beq.n	8009084 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800908c:	d94f      	bls.n	800912e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <HAL_SPI_Transmit+0xfa>
 8009096:	8afb      	ldrh	r3, [r7, #22]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d142      	bne.n	8009122 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a0:	881a      	ldrh	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	1c9a      	adds	r2, r3, #2
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090c0:	e02f      	b.n	8009122 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d112      	bne.n	80090f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d4:	881a      	ldrh	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e0:	1c9a      	adds	r2, r3, #2
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090f4:	e015      	b.n	8009122 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090f6:	f7fc f813 	bl	8005120 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d803      	bhi.n	800910e <HAL_SPI_Transmit+0x16c>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910c:	d102      	bne.n	8009114 <HAL_SPI_Transmit+0x172>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009120:	e0ab      	b.n	800927a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009126:	b29b      	uxth	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1ca      	bne.n	80090c2 <HAL_SPI_Transmit+0x120>
 800912c:	e080      	b.n	8009230 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <HAL_SPI_Transmit+0x19a>
 8009136:	8afb      	ldrh	r3, [r7, #22]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d174      	bne.n	8009226 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b01      	cmp	r3, #1
 8009144:	d912      	bls.n	800916c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914a:	881a      	ldrh	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009156:	1c9a      	adds	r2, r3, #2
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009160:	b29b      	uxth	r3, r3
 8009162:	3b02      	subs	r3, #2
 8009164:	b29a      	uxth	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800916a:	e05c      	b.n	8009226 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	7812      	ldrb	r2, [r2, #0]
 8009178:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009188:	b29b      	uxth	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009192:	e048      	b.n	8009226 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d12b      	bne.n	80091fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d912      	bls.n	80091d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b0:	881a      	ldrh	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091bc:	1c9a      	adds	r2, r3, #2
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	3b02      	subs	r3, #2
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091d0:	e029      	b.n	8009226 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	330c      	adds	r3, #12
 80091dc:	7812      	ldrb	r2, [r2, #0]
 80091de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091f8:	e015      	b.n	8009226 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091fa:	f7fb ff91 	bl	8005120 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d803      	bhi.n	8009212 <HAL_SPI_Transmit+0x270>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009210:	d102      	bne.n	8009218 <HAL_SPI_Transmit+0x276>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d106      	bne.n	8009226 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009224:	e029      	b.n	800927a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800922a:	b29b      	uxth	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1b1      	bne.n	8009194 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fcf9 	bl	8009c2c <SPI_EndRxTxTransaction>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2220      	movs	r2, #32
 8009244:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800924e:	2300      	movs	r3, #0
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	613b      	str	r3, [r7, #16]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	77fb      	strb	r3, [r7, #31]
 8009270:	e003      	b.n	800927a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009282:	7ffb      	ldrb	r3, [r7, #31]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3720      	adds	r7, #32
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af02      	add	r7, sp, #8
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	4613      	mov	r3, r2
 800929a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d002      	beq.n	80092b2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80092ac:	2302      	movs	r3, #2
 80092ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092b0:	e11a      	b.n	80094e8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092ba:	d112      	bne.n	80092e2 <HAL_SPI_Receive+0x56>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10e      	bne.n	80092e2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2204      	movs	r2, #4
 80092c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80092cc:	88fa      	ldrh	r2, [r7, #6]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	4613      	mov	r3, r2
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f90e 	bl	80094fa <HAL_SPI_TransmitReceive>
 80092de:	4603      	mov	r3, r0
 80092e0:	e107      	b.n	80094f2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_SPI_Receive+0x64>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e100      	b.n	80094f2 <HAL_SPI_Receive+0x266>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092f8:	f7fb ff12 	bl	8005120 <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <HAL_SPI_Receive+0x7e>
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d102      	bne.n	8009310 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800930e:	e0eb      	b.n	80094e8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2204      	movs	r2, #4
 8009314:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	88fa      	ldrh	r2, [r7, #6]
 8009330:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800935a:	d908      	bls.n	800936e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800936a:	605a      	str	r2, [r3, #4]
 800936c:	e007      	b.n	800937e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800937c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009386:	d10f      	bne.n	80093a8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009396:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b2:	2b40      	cmp	r3, #64	@ 0x40
 80093b4:	d007      	beq.n	80093c6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80093ce:	d86f      	bhi.n	80094b0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80093d0:	e034      	b.n	800943c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d117      	bne.n	8009410 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f103 020c 	add.w	r2, r3, #12
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ec:	7812      	ldrb	r2, [r2, #0]
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009402:	b29b      	uxth	r3, r3
 8009404:	3b01      	subs	r3, #1
 8009406:	b29a      	uxth	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800940e:	e015      	b.n	800943c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009410:	f7fb fe86 	bl	8005120 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d803      	bhi.n	8009428 <HAL_SPI_Receive+0x19c>
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009426:	d102      	bne.n	800942e <HAL_SPI_Receive+0x1a2>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800943a:	e055      	b.n	80094e8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1c4      	bne.n	80093d2 <HAL_SPI_Receive+0x146>
 8009448:	e038      	b.n	80094bc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b01      	cmp	r3, #1
 8009456:	d115      	bne.n	8009484 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009462:	b292      	uxth	r2, r2
 8009464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946a:	1c9a      	adds	r2, r3, #2
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009476:	b29b      	uxth	r3, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009482:	e015      	b.n	80094b0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009484:	f7fb fe4c 	bl	8005120 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d803      	bhi.n	800949c <HAL_SPI_Receive+0x210>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949a:	d102      	bne.n	80094a2 <HAL_SPI_Receive+0x216>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d106      	bne.n	80094b0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80094ae:	e01b      	b.n	80094e8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1c6      	bne.n	800944a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 fb5b 	bl	8009b7c <SPI_EndRxTransaction>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2220      	movs	r2, #32
 80094d0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	75fb      	strb	r3, [r7, #23]
 80094de:	e003      	b.n	80094e8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b08a      	sub	sp, #40	@ 0x28
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009508:	2301      	movs	r3, #1
 800950a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d101      	bne.n	8009520 <HAL_SPI_TransmitReceive+0x26>
 800951c:	2302      	movs	r3, #2
 800951e:	e20a      	b.n	8009936 <HAL_SPI_TransmitReceive+0x43c>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009528:	f7fb fdfa 	bl	8005120 <HAL_GetTick>
 800952c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009534:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800953c:	887b      	ldrh	r3, [r7, #2]
 800953e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009540:	887b      	ldrh	r3, [r7, #2]
 8009542:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009544:	7efb      	ldrb	r3, [r7, #27]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d00e      	beq.n	8009568 <HAL_SPI_TransmitReceive+0x6e>
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009550:	d106      	bne.n	8009560 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d102      	bne.n	8009560 <HAL_SPI_TransmitReceive+0x66>
 800955a:	7efb      	ldrb	r3, [r7, #27]
 800955c:	2b04      	cmp	r3, #4
 800955e:	d003      	beq.n	8009568 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009560:	2302      	movs	r3, #2
 8009562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009566:	e1e0      	b.n	800992a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <HAL_SPI_TransmitReceive+0x80>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <HAL_SPI_TransmitReceive+0x80>
 8009574:	887b      	ldrh	r3, [r7, #2]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009580:	e1d3      	b.n	800992a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b04      	cmp	r3, #4
 800958c:	d003      	beq.n	8009596 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2205      	movs	r2, #5
 8009592:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	887a      	ldrh	r2, [r7, #2]
 80095a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	887a      	ldrh	r2, [r7, #2]
 80095ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	887a      	ldrh	r2, [r7, #2]
 80095bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	887a      	ldrh	r2, [r7, #2]
 80095c2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095d8:	d802      	bhi.n	80095e0 <HAL_SPI_TransmitReceive+0xe6>
 80095da:	8a3b      	ldrh	r3, [r7, #16]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d908      	bls.n	80095f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095ee:	605a      	str	r2, [r3, #4]
 80095f0:	e007      	b.n	8009602 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009600:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800960c:	2b40      	cmp	r3, #64	@ 0x40
 800960e:	d007      	beq.n	8009620 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800961e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009628:	f240 8081 	bls.w	800972e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <HAL_SPI_TransmitReceive+0x140>
 8009634:	8a7b      	ldrh	r3, [r7, #18]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d16d      	bne.n	8009716 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963e:	881a      	ldrh	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964a:	1c9a      	adds	r2, r3, #2
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009654:	b29b      	uxth	r3, r3
 8009656:	3b01      	subs	r3, #1
 8009658:	b29a      	uxth	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800965e:	e05a      	b.n	8009716 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b02      	cmp	r3, #2
 800966c:	d11b      	bne.n	80096a6 <HAL_SPI_TransmitReceive+0x1ac>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009672:	b29b      	uxth	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d016      	beq.n	80096a6 <HAL_SPI_TransmitReceive+0x1ac>
 8009678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967a:	2b01      	cmp	r3, #1
 800967c:	d113      	bne.n	80096a6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009682:	881a      	ldrh	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968e:	1c9a      	adds	r2, r3, #2
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009698:	b29b      	uxth	r3, r3
 800969a:	3b01      	subs	r3, #1
 800969c:	b29a      	uxth	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d11c      	bne.n	80096ee <HAL_SPI_TransmitReceive+0x1f4>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d016      	beq.n	80096ee <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68da      	ldr	r2, [r3, #12]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ca:	b292      	uxth	r2, r2
 80096cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d2:	1c9a      	adds	r2, r3, #2
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80096de:	b29b      	uxth	r3, r3
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80096ea:	2301      	movs	r3, #1
 80096ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80096ee:	f7fb fd17 	bl	8005120 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d80b      	bhi.n	8009716 <HAL_SPI_TransmitReceive+0x21c>
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009704:	d007      	beq.n	8009716 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009714:	e109      	b.n	800992a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800971a:	b29b      	uxth	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d19f      	bne.n	8009660 <HAL_SPI_TransmitReceive+0x166>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009726:	b29b      	uxth	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	d199      	bne.n	8009660 <HAL_SPI_TransmitReceive+0x166>
 800972c:	e0e3      	b.n	80098f6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <HAL_SPI_TransmitReceive+0x244>
 8009736:	8a7b      	ldrh	r3, [r7, #18]
 8009738:	2b01      	cmp	r3, #1
 800973a:	f040 80cf 	bne.w	80098dc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009742:	b29b      	uxth	r3, r3
 8009744:	2b01      	cmp	r3, #1
 8009746:	d912      	bls.n	800976e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	881a      	ldrh	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009758:	1c9a      	adds	r2, r3, #2
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009762:	b29b      	uxth	r3, r3
 8009764:	3b02      	subs	r3, #2
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800976c:	e0b6      	b.n	80098dc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	330c      	adds	r3, #12
 8009778:	7812      	ldrb	r2, [r2, #0]
 800977a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009794:	e0a2      	b.n	80098dc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d134      	bne.n	800980e <HAL_SPI_TransmitReceive+0x314>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d02f      	beq.n	800980e <HAL_SPI_TransmitReceive+0x314>
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d12c      	bne.n	800980e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d912      	bls.n	80097e4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	881a      	ldrh	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ce:	1c9a      	adds	r2, r3, #2
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097d8:	b29b      	uxth	r3, r3
 80097da:	3b02      	subs	r3, #2
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097e2:	e012      	b.n	800980a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	330c      	adds	r3, #12
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f6:	1c5a      	adds	r2, r3, #1
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009800:	b29b      	uxth	r3, r3
 8009802:	3b01      	subs	r3, #1
 8009804:	b29a      	uxth	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b01      	cmp	r3, #1
 800981a:	d148      	bne.n	80098ae <HAL_SPI_TransmitReceive+0x3b4>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009822:	b29b      	uxth	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d042      	beq.n	80098ae <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800982e:	b29b      	uxth	r3, r3
 8009830:	2b01      	cmp	r3, #1
 8009832:	d923      	bls.n	800987c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800983e:	b292      	uxth	r2, r2
 8009840:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009846:	1c9a      	adds	r2, r3, #2
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009852:	b29b      	uxth	r3, r3
 8009854:	3b02      	subs	r3, #2
 8009856:	b29a      	uxth	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b01      	cmp	r3, #1
 8009868:	d81f      	bhi.n	80098aa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009878:	605a      	str	r2, [r3, #4]
 800987a:	e016      	b.n	80098aa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f103 020c 	add.w	r2, r3, #12
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009888:	7812      	ldrb	r2, [r2, #0]
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098aa:	2301      	movs	r3, #1
 80098ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80098ae:	f7fb fc37 	bl	8005120 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d803      	bhi.n	80098c6 <HAL_SPI_TransmitReceive+0x3cc>
 80098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c4:	d102      	bne.n	80098cc <HAL_SPI_TransmitReceive+0x3d2>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d107      	bne.n	80098dc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80098da:	e026      	b.n	800992a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f47f af57 	bne.w	8009796 <HAL_SPI_TransmitReceive+0x29c>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f47f af50 	bne.w	8009796 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098f6:	69fa      	ldr	r2, [r7, #28]
 80098f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 f996 	bl	8009c2c <SPI_EndRxTxTransaction>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2220      	movs	r2, #32
 8009910:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009920:	e003      	b.n	800992a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009932:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009936:	4618      	mov	r0, r3
 8009938:	3728      	adds	r7, #40	@ 0x28
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b088      	sub	sp, #32
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	4613      	mov	r3, r2
 800994e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009950:	f7fb fbe6 	bl	8005120 <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	4413      	add	r3, r2
 800995e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009960:	f7fb fbde 	bl	8005120 <HAL_GetTick>
 8009964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009966:	4b39      	ldr	r3, [pc, #228]	@ (8009a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	015b      	lsls	r3, r3, #5
 800996c:	0d1b      	lsrs	r3, r3, #20
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	fb02 f303 	mul.w	r3, r2, r3
 8009974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009976:	e054      	b.n	8009a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997e:	d050      	beq.n	8009a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009980:	f7fb fbce 	bl	8005120 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	429a      	cmp	r2, r3
 800998e:	d902      	bls.n	8009996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d13d      	bne.n	8009a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099ae:	d111      	bne.n	80099d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099b8:	d004      	beq.n	80099c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099c2:	d107      	bne.n	80099d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099dc:	d10f      	bne.n	80099fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e017      	b.n	8009a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	bf0c      	ite	eq
 8009a32:	2301      	moveq	r3, #1
 8009a34:	2300      	movne	r3, #0
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d19b      	bne.n	8009978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000000 	.word	0x20000000

08009a50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	@ 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a62:	f7fb fb5d 	bl	8005120 <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6a:	1a9b      	subs	r3, r3, r2
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	4413      	add	r3, r2
 8009a70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009a72:	f7fb fb55 	bl	8005120 <HAL_GetTick>
 8009a76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	330c      	adds	r3, #12
 8009a7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a80:	4b3d      	ldr	r3, [pc, #244]	@ (8009b78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	00da      	lsls	r2, r3, #3
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	0d1b      	lsrs	r3, r3, #20
 8009a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a92:	fb02 f303 	mul.w	r3, r2, r3
 8009a96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a98:	e060      	b.n	8009b5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009aa0:	d107      	bne.n	8009ab2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab8:	d050      	beq.n	8009b5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009aba:	f7fb fb31 	bl	8005120 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d902      	bls.n	8009ad0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d13d      	bne.n	8009b4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ade:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ae8:	d111      	bne.n	8009b0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009af2:	d004      	beq.n	8009afe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009afc:	d107      	bne.n	8009b0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b16:	d10f      	bne.n	8009b38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e010      	b.n	8009b6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4013      	ands	r3, r2
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d196      	bne.n	8009a9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3728      	adds	r7, #40	@ 0x28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20000000 	.word	0x20000000

08009b7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b90:	d111      	bne.n	8009bb6 <SPI_EndRxTransaction+0x3a>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b9a:	d004      	beq.n	8009ba6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ba4:	d107      	bne.n	8009bb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2180      	movs	r1, #128	@ 0x80
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f7ff febd 	bl	8009940 <SPI_WaitFlagStateUntilTimeout>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d007      	beq.n	8009bdc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bd0:	f043 0220 	orr.w	r2, r3, #32
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e023      	b.n	8009c24 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009be4:	d11d      	bne.n	8009c22 <SPI_EndRxTransaction+0xa6>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bee:	d004      	beq.n	8009bfa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf8:	d113      	bne.n	8009c22 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f7ff ff22 	bl	8009a50 <SPI_WaitFifoStateUntilTimeout>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d007      	beq.n	8009c22 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c16:	f043 0220 	orr.w	r2, r3, #32
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e000      	b.n	8009c24 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff ff03 	bl	8009a50 <SPI_WaitFifoStateUntilTimeout>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c54:	f043 0220 	orr.w	r2, r3, #32
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e027      	b.n	8009cb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2200      	movs	r2, #0
 8009c68:	2180      	movs	r1, #128	@ 0x80
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff fe68 	bl	8009940 <SPI_WaitFlagStateUntilTimeout>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d007      	beq.n	8009c86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c7a:	f043 0220 	orr.w	r2, r3, #32
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e014      	b.n	8009cb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff fedc 	bl	8009a50 <SPI_WaitFifoStateUntilTimeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ca2:	f043 0220 	orr.w	r2, r3, #32
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e000      	b.n	8009cb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e049      	b.n	8009d5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d106      	bne.n	8009ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f841 	bl	8009d66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f000 f9be 	bl	800a078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
	...

08009d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d001      	beq.n	8009d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e03b      	b.n	8009e0c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0201 	orr.w	r2, r2, #1
 8009daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a19      	ldr	r2, [pc, #100]	@ (8009e18 <HAL_TIM_Base_Start_IT+0x9c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d009      	beq.n	8009dca <HAL_TIM_Base_Start_IT+0x4e>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dbe:	d004      	beq.n	8009dca <HAL_TIM_Base_Start_IT+0x4e>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a15      	ldr	r2, [pc, #84]	@ (8009e1c <HAL_TIM_Base_Start_IT+0xa0>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d115      	bne.n	8009df6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	4b13      	ldr	r3, [pc, #76]	@ (8009e20 <HAL_TIM_Base_Start_IT+0xa4>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b06      	cmp	r3, #6
 8009dda:	d015      	beq.n	8009e08 <HAL_TIM_Base_Start_IT+0x8c>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009de2:	d011      	beq.n	8009e08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0201 	orr.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df4:	e008      	b.n	8009e08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f042 0201 	orr.w	r2, r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	e000      	b.n	8009e0a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	40012c00 	.word	0x40012c00
 8009e1c:	40014000 	.word	0x40014000
 8009e20:	00010007 	.word	0x00010007

08009e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f003 0302 	and.w	r3, r3, #2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d020      	beq.n	8009e88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01b      	beq.n	8009e88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f06f 0202 	mvn.w	r2, #2
 8009e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	f003 0303 	and.w	r3, r3, #3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f8e4 	bl	800a03c <HAL_TIM_IC_CaptureCallback>
 8009e74:	e005      	b.n	8009e82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f8d6 	bl	800a028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f8e7 	bl	800a050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d020      	beq.n	8009ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01b      	beq.n	8009ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f06f 0204 	mvn.w	r2, #4
 8009ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f8be 	bl	800a03c <HAL_TIM_IC_CaptureCallback>
 8009ec0:	e005      	b.n	8009ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f8b0 	bl	800a028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f8c1 	bl	800a050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f003 0308 	and.w	r3, r3, #8
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d020      	beq.n	8009f20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f003 0308 	and.w	r3, r3, #8
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01b      	beq.n	8009f20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f06f 0208 	mvn.w	r2, #8
 8009ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	f003 0303 	and.w	r3, r3, #3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d003      	beq.n	8009f0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f898 	bl	800a03c <HAL_TIM_IC_CaptureCallback>
 8009f0c:	e005      	b.n	8009f1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f88a 	bl	800a028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f89b 	bl	800a050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f003 0310 	and.w	r3, r3, #16
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d020      	beq.n	8009f6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f003 0310 	and.w	r3, r3, #16
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01b      	beq.n	8009f6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f06f 0210 	mvn.w	r2, #16
 8009f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2208      	movs	r2, #8
 8009f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f872 	bl	800a03c <HAL_TIM_IC_CaptureCallback>
 8009f58:	e005      	b.n	8009f66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f864 	bl	800a028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f875 	bl	800a050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00c      	beq.n	8009f90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d007      	beq.n	8009f90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f06f 0201 	mvn.w	r2, #1
 8009f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7fa fda4 	bl	8004ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00c      	beq.n	8009fb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d007      	beq.n	8009fb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f8d0 	bl	800a154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00c      	beq.n	8009fd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d007      	beq.n	8009fd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f8c8 	bl	800a168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00c      	beq.n	8009ffc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d007      	beq.n	8009ffc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f834 	bl	800a064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00c      	beq.n	800a020 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d007      	beq.n	800a020 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f06f 0220 	mvn.w	r2, #32
 800a018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f890 	bl	800a140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a2a      	ldr	r2, [pc, #168]	@ (800a134 <TIM_Base_SetConfig+0xbc>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_Base_SetConfig+0x20>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a096:	d108      	bne.n	800a0aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a09e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a21      	ldr	r2, [pc, #132]	@ (800a134 <TIM_Base_SetConfig+0xbc>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00b      	beq.n	800a0ca <TIM_Base_SetConfig+0x52>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b8:	d007      	beq.n	800a0ca <TIM_Base_SetConfig+0x52>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a1e      	ldr	r2, [pc, #120]	@ (800a138 <TIM_Base_SetConfig+0xc0>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d003      	beq.n	800a0ca <TIM_Base_SetConfig+0x52>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a13c <TIM_Base_SetConfig+0xc4>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d108      	bne.n	800a0dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a0c      	ldr	r2, [pc, #48]	@ (800a134 <TIM_Base_SetConfig+0xbc>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d007      	beq.n	800a118 <TIM_Base_SetConfig+0xa0>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a0b      	ldr	r2, [pc, #44]	@ (800a138 <TIM_Base_SetConfig+0xc0>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d003      	beq.n	800a118 <TIM_Base_SetConfig+0xa0>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a0a      	ldr	r2, [pc, #40]	@ (800a13c <TIM_Base_SetConfig+0xc4>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d103      	bne.n	800a120 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	691a      	ldr	r2, [r3, #16]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	615a      	str	r2, [r3, #20]
}
 800a126:	bf00      	nop
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	40012c00 	.word	0x40012c00
 800a138:	40014000 	.word	0x40014000
 800a13c:	40014400 	.word	0x40014400

0800a140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e040      	b.n	800a210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a192:	2b00      	cmp	r3, #0
 800a194:	d106      	bne.n	800a1a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7fa fdd8 	bl	8004d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2224      	movs	r2, #36	@ 0x24
 800a1a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0201 	bic.w	r2, r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d002      	beq.n	800a1c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fe30 	bl	800ae28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fc01 	bl	800a9d0 <UART_SetConfig>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d101      	bne.n	800a1d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e01b      	b.n	800a210 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0201 	orr.w	r2, r2, #1
 800a206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 feaf 	bl	800af6c <UART_CheckIdleState>
 800a20e:	4603      	mov	r3, r0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	@ 0x28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a22a:	2b20      	cmp	r3, #32
 800a22c:	d165      	bne.n	800a2fa <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <HAL_UART_Transmit_DMA+0x22>
 800a234:	88fb      	ldrh	r3, [r7, #6]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e05e      	b.n	800a2fc <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	88fa      	ldrh	r2, [r7, #6]
 800a248:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	88fa      	ldrh	r2, [r7, #6]
 800a250:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2221      	movs	r2, #33	@ 0x21
 800a260:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a266:	2b00      	cmp	r3, #0
 800a268:	d027      	beq.n	800a2ba <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a26e:	4a25      	ldr	r2, [pc, #148]	@ (800a304 <HAL_UART_Transmit_DMA+0xec>)
 800a270:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a276:	4a24      	ldr	r2, [pc, #144]	@ (800a308 <HAL_UART_Transmit_DMA+0xf0>)
 800a278:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a27e:	4a23      	ldr	r2, [pc, #140]	@ (800a30c <HAL_UART_Transmit_DMA+0xf4>)
 800a280:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a286:	2200      	movs	r2, #0
 800a288:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a292:	4619      	mov	r1, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3328      	adds	r3, #40	@ 0x28
 800a29a:	461a      	mov	r2, r3
 800a29c:	88fb      	ldrh	r3, [r7, #6]
 800a29e:	f7fc faf3 	bl	8006888 <HAL_DMA_Start_IT>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d008      	beq.n	800a2ba <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2210      	movs	r2, #16
 800a2ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e020      	b.n	800a2fc <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2240      	movs	r2, #64	@ 0x40
 800a2c0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3308      	adds	r3, #8
 800a2e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e2:	623a      	str	r2, [r7, #32]
 800a2e4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e6:	69f9      	ldr	r1, [r7, #28]
 800a2e8:	6a3a      	ldr	r2, [r7, #32]
 800a2ea:	e841 2300 	strex	r3, r2, [r1]
 800a2ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1e5      	bne.n	800a2c2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e000      	b.n	800a2fc <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a2fa:	2302      	movs	r3, #2
  }
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3728      	adds	r7, #40	@ 0x28
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	0800b3e1 	.word	0x0800b3e1
 800a308:	0800b47b 	.word	0x0800b47b
 800a30c:	0800b601 	.word	0x0800b601

0800a310 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08a      	sub	sp, #40	@ 0x28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	4613      	mov	r3, r2
 800a31c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a324:	2b20      	cmp	r3, #32
 800a326:	d137      	bne.n	800a398 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <HAL_UART_Receive_DMA+0x24>
 800a32e:	88fb      	ldrh	r3, [r7, #6]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e030      	b.n	800a39a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a18      	ldr	r2, [pc, #96]	@ (800a3a4 <HAL_UART_Receive_DMA+0x94>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d01f      	beq.n	800a388 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d018      	beq.n	800a388 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	e853 3f00 	ldrex	r3, [r3]
 800a362:	613b      	str	r3, [r7, #16]
   return(result);
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a36a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	461a      	mov	r2, r3
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	623b      	str	r3, [r7, #32]
 800a376:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	69f9      	ldr	r1, [r7, #28]
 800a37a:	6a3a      	ldr	r2, [r7, #32]
 800a37c:	e841 2300 	strex	r3, r2, [r1]
 800a380:	61bb      	str	r3, [r7, #24]
   return(result);
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e6      	bne.n	800a356 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a388:	88fb      	ldrh	r3, [r7, #6]
 800a38a:	461a      	mov	r2, r3
 800a38c:	68b9      	ldr	r1, [r7, #8]
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 fefc 	bl	800b18c <UART_Start_Receive_DMA>
 800a394:	4603      	mov	r3, r0
 800a396:	e000      	b.n	800a39a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a398:	2302      	movs	r3, #2
  }
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3728      	adds	r7, #40	@ 0x28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	40008000 	.word	0x40008000

0800a3a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b0ba      	sub	sp, #232	@ 0xe8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a3d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a3dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d115      	bne.n	800a410 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3e8:	f003 0320 	and.w	r3, r3, #32
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00f      	beq.n	800a410 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3f4:	f003 0320 	and.w	r3, r3, #32
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 82ae 	beq.w	800a962 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	4798      	blx	r3
      }
      return;
 800a40e:	e2a8      	b.n	800a962 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 8117 	beq.w	800a648 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a41a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a426:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a42a:	4b85      	ldr	r3, [pc, #532]	@ (800a640 <HAL_UART_IRQHandler+0x298>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 810a 	beq.w	800a648 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d011      	beq.n	800a464 <HAL_UART_IRQHandler+0xbc>
 800a440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00b      	beq.n	800a464 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2201      	movs	r2, #1
 800a452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a45a:	f043 0201 	orr.w	r2, r3, #1
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d011      	beq.n	800a494 <HAL_UART_IRQHandler+0xec>
 800a470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00b      	beq.n	800a494 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2202      	movs	r2, #2
 800a482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a48a:	f043 0204 	orr.w	r2, r3, #4
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d011      	beq.n	800a4c4 <HAL_UART_IRQHandler+0x11c>
 800a4a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00b      	beq.n	800a4c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2204      	movs	r2, #4
 800a4b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ba:	f043 0202 	orr.w	r2, r3, #2
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d017      	beq.n	800a500 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4d4:	f003 0320 	and.w	r3, r3, #32
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d105      	bne.n	800a4e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a4dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00b      	beq.n	800a500 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2208      	movs	r2, #8
 800a4ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4f6:	f043 0208 	orr.w	r2, r3, #8
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d012      	beq.n	800a532 <HAL_UART_IRQHandler+0x18a>
 800a50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a510:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00c      	beq.n	800a532 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a528:	f043 0220 	orr.w	r2, r3, #32
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 8214 	beq.w	800a966 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00d      	beq.n	800a566 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a54a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a54e:	f003 0320 	and.w	r3, r3, #32
 800a552:	2b00      	cmp	r3, #0
 800a554:	d007      	beq.n	800a566 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a56c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57a:	2b40      	cmp	r3, #64	@ 0x40
 800a57c:	d005      	beq.n	800a58a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a57e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a582:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a586:	2b00      	cmp	r3, #0
 800a588:	d04f      	beq.n	800a62a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fec4 	bl	800b318 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a59a:	2b40      	cmp	r3, #64	@ 0x40
 800a59c:	d141      	bne.n	800a622 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a5b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a5ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a5ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a5d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a5e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1d9      	bne.n	800a59e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d013      	beq.n	800a61a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5f6:	4a13      	ldr	r2, [pc, #76]	@ (800a644 <HAL_UART_IRQHandler+0x29c>)
 800a5f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fc f9e0 	bl	80069c4 <HAL_DMA_Abort_IT>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d017      	beq.n	800a63a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a618:	e00f      	b.n	800a63a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f9c2 	bl	800a9a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a620:	e00b      	b.n	800a63a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f9be 	bl	800a9a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a628:	e007      	b.n	800a63a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f9ba 	bl	800a9a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a638:	e195      	b.n	800a966 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a63a:	bf00      	nop
    return;
 800a63c:	e193      	b.n	800a966 <HAL_UART_IRQHandler+0x5be>
 800a63e:	bf00      	nop
 800a640:	04000120 	.word	0x04000120
 800a644:	0800b67f 	.word	0x0800b67f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	f040 814e 	bne.w	800a8ee <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a656:	f003 0310 	and.w	r3, r3, #16
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 8147 	beq.w	800a8ee <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a664:	f003 0310 	and.w	r3, r3, #16
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 8140 	beq.w	800a8ee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2210      	movs	r2, #16
 800a674:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a680:	2b40      	cmp	r3, #64	@ 0x40
 800a682:	f040 80b8 	bne.w	800a7f6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a692:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 8167 	beq.w	800a96a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a6a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	f080 815f 	bcs.w	800a96a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f040 8086 	bne.w	800a7d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a6dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a6f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a6fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a70a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1da      	bne.n	800a6c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3308      	adds	r3, #8
 800a718:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a724:	f023 0301 	bic.w	r3, r3, #1
 800a728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3308      	adds	r3, #8
 800a732:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a736:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a73a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a73e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e1      	bne.n	800a712 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3308      	adds	r3, #8
 800a754:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a756:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a75e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3308      	adds	r3, #8
 800a76e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a772:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a774:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a778:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e3      	bne.n	800a74e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a79c:	e853 3f00 	ldrex	r3, [r3]
 800a7a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7a4:	f023 0310 	bic.w	r3, r3, #16
 800a7a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1e4      	bne.n	800a794 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fc f8ba 	bl	8006948 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f8e2 	bl	800a9b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7f4:	e0b9      	b.n	800a96a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a802:	b29b      	uxth	r3, r3
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a810:	b29b      	uxth	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 80ab 	beq.w	800a96e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800a818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 80a6 	beq.w	800a96e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82a:	e853 3f00 	ldrex	r3, [r3]
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	461a      	mov	r2, r3
 800a840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a844:	647b      	str	r3, [r7, #68]	@ 0x44
 800a846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a84c:	e841 2300 	strex	r3, r2, [r1]
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e4      	bne.n	800a822 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3308      	adds	r3, #8
 800a85e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a862:	e853 3f00 	ldrex	r3, [r3]
 800a866:	623b      	str	r3, [r7, #32]
   return(result);
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3308      	adds	r3, #8
 800a878:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a87c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a880:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a884:	e841 2300 	strex	r3, r2, [r1]
 800a888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e3      	bne.n	800a858 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2220      	movs	r2, #32
 800a894:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f023 0310 	bic.w	r3, r3, #16
 800a8b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a8c6:	61fb      	str	r3, [r7, #28]
 800a8c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ca:	69b9      	ldr	r1, [r7, #24]
 800a8cc:	69fa      	ldr	r2, [r7, #28]
 800a8ce:	e841 2300 	strex	r3, r2, [r1]
 800a8d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e4      	bne.n	800a8a4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2202      	movs	r2, #2
 800a8de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f866 	bl	800a9b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8ec:	e03f      	b.n	800a96e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00e      	beq.n	800a918 <HAL_UART_IRQHandler+0x570>
 800a8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d008      	beq.n	800a918 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a90e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fef4 	bl	800b6fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a916:	e02d      	b.n	800a974 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a91c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00e      	beq.n	800a942 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d008      	beq.n	800a942 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d01c      	beq.n	800a972 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	4798      	blx	r3
    }
    return;
 800a940:	e017      	b.n	800a972 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d012      	beq.n	800a974 <HAL_UART_IRQHandler+0x5cc>
 800a94e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00c      	beq.n	800a974 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fea5 	bl	800b6aa <UART_EndTransmit_IT>
    return;
 800a960:	e008      	b.n	800a974 <HAL_UART_IRQHandler+0x5cc>
      return;
 800a962:	bf00      	nop
 800a964:	e006      	b.n	800a974 <HAL_UART_IRQHandler+0x5cc>
    return;
 800a966:	bf00      	nop
 800a968:	e004      	b.n	800a974 <HAL_UART_IRQHandler+0x5cc>
      return;
 800a96a:	bf00      	nop
 800a96c:	e002      	b.n	800a974 <HAL_UART_IRQHandler+0x5cc>
      return;
 800a96e:	bf00      	nop
 800a970:	e000      	b.n	800a974 <HAL_UART_IRQHandler+0x5cc>
    return;
 800a972:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a974:	37e8      	adds	r7, #232	@ 0xe8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop

0800a97c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9d4:	b08a      	sub	sp, #40	@ 0x28
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	4bb4      	ldr	r3, [pc, #720]	@ (800acd0 <UART_SetConfig+0x300>)
 800aa00:	4013      	ands	r3, r2
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	6812      	ldr	r2, [r2, #0]
 800aa06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4aa9      	ldr	r2, [pc, #676]	@ (800acd4 <UART_SetConfig+0x304>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d004      	beq.n	800aa3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4aa0      	ldr	r2, [pc, #640]	@ (800acd8 <UART_SetConfig+0x308>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d126      	bne.n	800aaa8 <UART_SetConfig+0xd8>
 800aa5a:	4ba0      	ldr	r3, [pc, #640]	@ (800acdc <UART_SetConfig+0x30c>)
 800aa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa60:	f003 0303 	and.w	r3, r3, #3
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d81b      	bhi.n	800aaa0 <UART_SetConfig+0xd0>
 800aa68:	a201      	add	r2, pc, #4	@ (adr r2, 800aa70 <UART_SetConfig+0xa0>)
 800aa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6e:	bf00      	nop
 800aa70:	0800aa81 	.word	0x0800aa81
 800aa74:	0800aa91 	.word	0x0800aa91
 800aa78:	0800aa89 	.word	0x0800aa89
 800aa7c:	0800aa99 	.word	0x0800aa99
 800aa80:	2301      	movs	r3, #1
 800aa82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aa86:	e080      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800aa88:	2302      	movs	r3, #2
 800aa8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aa8e:	e07c      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800aa90:	2304      	movs	r3, #4
 800aa92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aa96:	e078      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800aa98:	2308      	movs	r3, #8
 800aa9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aa9e:	e074      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aaa6:	e070      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a8c      	ldr	r2, [pc, #560]	@ (800ace0 <UART_SetConfig+0x310>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d138      	bne.n	800ab24 <UART_SetConfig+0x154>
 800aab2:	4b8a      	ldr	r3, [pc, #552]	@ (800acdc <UART_SetConfig+0x30c>)
 800aab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aab8:	f003 030c 	and.w	r3, r3, #12
 800aabc:	2b0c      	cmp	r3, #12
 800aabe:	d82d      	bhi.n	800ab1c <UART_SetConfig+0x14c>
 800aac0:	a201      	add	r2, pc, #4	@ (adr r2, 800aac8 <UART_SetConfig+0xf8>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800aafd 	.word	0x0800aafd
 800aacc:	0800ab1d 	.word	0x0800ab1d
 800aad0:	0800ab1d 	.word	0x0800ab1d
 800aad4:	0800ab1d 	.word	0x0800ab1d
 800aad8:	0800ab0d 	.word	0x0800ab0d
 800aadc:	0800ab1d 	.word	0x0800ab1d
 800aae0:	0800ab1d 	.word	0x0800ab1d
 800aae4:	0800ab1d 	.word	0x0800ab1d
 800aae8:	0800ab05 	.word	0x0800ab05
 800aaec:	0800ab1d 	.word	0x0800ab1d
 800aaf0:	0800ab1d 	.word	0x0800ab1d
 800aaf4:	0800ab1d 	.word	0x0800ab1d
 800aaf8:	0800ab15 	.word	0x0800ab15
 800aafc:	2300      	movs	r3, #0
 800aafe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab02:	e042      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab04:	2302      	movs	r3, #2
 800ab06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab0a:	e03e      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab12:	e03a      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab14:	2308      	movs	r3, #8
 800ab16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab1a:	e036      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab22:	e032      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a6a      	ldr	r2, [pc, #424]	@ (800acd4 <UART_SetConfig+0x304>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d12a      	bne.n	800ab84 <UART_SetConfig+0x1b4>
 800ab2e:	4b6b      	ldr	r3, [pc, #428]	@ (800acdc <UART_SetConfig+0x30c>)
 800ab30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab3c:	d01a      	beq.n	800ab74 <UART_SetConfig+0x1a4>
 800ab3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab42:	d81b      	bhi.n	800ab7c <UART_SetConfig+0x1ac>
 800ab44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab48:	d00c      	beq.n	800ab64 <UART_SetConfig+0x194>
 800ab4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab4e:	d815      	bhi.n	800ab7c <UART_SetConfig+0x1ac>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <UART_SetConfig+0x18c>
 800ab54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab58:	d008      	beq.n	800ab6c <UART_SetConfig+0x19c>
 800ab5a:	e00f      	b.n	800ab7c <UART_SetConfig+0x1ac>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab62:	e012      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab64:	2302      	movs	r3, #2
 800ab66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab6a:	e00e      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab6c:	2304      	movs	r3, #4
 800ab6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab72:	e00a      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab74:	2308      	movs	r3, #8
 800ab76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab7a:	e006      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab7c:	2310      	movs	r3, #16
 800ab7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab82:	e002      	b.n	800ab8a <UART_SetConfig+0x1ba>
 800ab84:	2310      	movs	r3, #16
 800ab86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a51      	ldr	r2, [pc, #324]	@ (800acd4 <UART_SetConfig+0x304>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d17a      	bne.n	800ac8a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab98:	2b08      	cmp	r3, #8
 800ab9a:	d824      	bhi.n	800abe6 <UART_SetConfig+0x216>
 800ab9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aba4 <UART_SetConfig+0x1d4>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800abc9 	.word	0x0800abc9
 800aba8:	0800abe7 	.word	0x0800abe7
 800abac:	0800abd1 	.word	0x0800abd1
 800abb0:	0800abe7 	.word	0x0800abe7
 800abb4:	0800abd7 	.word	0x0800abd7
 800abb8:	0800abe7 	.word	0x0800abe7
 800abbc:	0800abe7 	.word	0x0800abe7
 800abc0:	0800abe7 	.word	0x0800abe7
 800abc4:	0800abdf 	.word	0x0800abdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abc8:	f7fd fd92 	bl	80086f0 <HAL_RCC_GetPCLK1Freq>
 800abcc:	61f8      	str	r0, [r7, #28]
        break;
 800abce:	e010      	b.n	800abf2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abd0:	4b44      	ldr	r3, [pc, #272]	@ (800ace4 <UART_SetConfig+0x314>)
 800abd2:	61fb      	str	r3, [r7, #28]
        break;
 800abd4:	e00d      	b.n	800abf2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abd6:	f7fd fcf3 	bl	80085c0 <HAL_RCC_GetSysClockFreq>
 800abda:	61f8      	str	r0, [r7, #28]
        break;
 800abdc:	e009      	b.n	800abf2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abe2:	61fb      	str	r3, [r7, #28]
        break;
 800abe4:	e005      	b.n	800abf2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800abe6:	2300      	movs	r3, #0
 800abe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800abf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 8107 	beq.w	800ae08 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	4613      	mov	r3, r2
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	4413      	add	r3, r2
 800ac04:	69fa      	ldr	r2, [r7, #28]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d305      	bcc.n	800ac16 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ac10:	69fa      	ldr	r2, [r7, #28]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d903      	bls.n	800ac1e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ac1c:	e0f4      	b.n	800ae08 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	2200      	movs	r2, #0
 800ac22:	461c      	mov	r4, r3
 800ac24:	4615      	mov	r5, r2
 800ac26:	f04f 0200 	mov.w	r2, #0
 800ac2a:	f04f 0300 	mov.w	r3, #0
 800ac2e:	022b      	lsls	r3, r5, #8
 800ac30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ac34:	0222      	lsls	r2, r4, #8
 800ac36:	68f9      	ldr	r1, [r7, #12]
 800ac38:	6849      	ldr	r1, [r1, #4]
 800ac3a:	0849      	lsrs	r1, r1, #1
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	4688      	mov	r8, r1
 800ac40:	4681      	mov	r9, r0
 800ac42:	eb12 0a08 	adds.w	sl, r2, r8
 800ac46:	eb43 0b09 	adc.w	fp, r3, r9
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	603b      	str	r3, [r7, #0]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac58:	4650      	mov	r0, sl
 800ac5a:	4659      	mov	r1, fp
 800ac5c:	f7f5 ff94 	bl	8000b88 <__aeabi_uldivmod>
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	4613      	mov	r3, r2
 800ac66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac6e:	d308      	bcc.n	800ac82 <UART_SetConfig+0x2b2>
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac76:	d204      	bcs.n	800ac82 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	69ba      	ldr	r2, [r7, #24]
 800ac7e:	60da      	str	r2, [r3, #12]
 800ac80:	e0c2      	b.n	800ae08 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ac88:	e0be      	b.n	800ae08 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac92:	d16a      	bne.n	800ad6a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800ac94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ac98:	2b08      	cmp	r3, #8
 800ac9a:	d834      	bhi.n	800ad06 <UART_SetConfig+0x336>
 800ac9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aca4 <UART_SetConfig+0x2d4>)
 800ac9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca2:	bf00      	nop
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800ace9 	.word	0x0800ace9
 800acac:	0800acf1 	.word	0x0800acf1
 800acb0:	0800ad07 	.word	0x0800ad07
 800acb4:	0800acf7 	.word	0x0800acf7
 800acb8:	0800ad07 	.word	0x0800ad07
 800acbc:	0800ad07 	.word	0x0800ad07
 800acc0:	0800ad07 	.word	0x0800ad07
 800acc4:	0800acff 	.word	0x0800acff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acc8:	f7fd fd12 	bl	80086f0 <HAL_RCC_GetPCLK1Freq>
 800accc:	61f8      	str	r0, [r7, #28]
        break;
 800acce:	e020      	b.n	800ad12 <UART_SetConfig+0x342>
 800acd0:	efff69f3 	.word	0xefff69f3
 800acd4:	40008000 	.word	0x40008000
 800acd8:	40013800 	.word	0x40013800
 800acdc:	40021000 	.word	0x40021000
 800ace0:	40004400 	.word	0x40004400
 800ace4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ace8:	f7fd fd18 	bl	800871c <HAL_RCC_GetPCLK2Freq>
 800acec:	61f8      	str	r0, [r7, #28]
        break;
 800acee:	e010      	b.n	800ad12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acf0:	4b4c      	ldr	r3, [pc, #304]	@ (800ae24 <UART_SetConfig+0x454>)
 800acf2:	61fb      	str	r3, [r7, #28]
        break;
 800acf4:	e00d      	b.n	800ad12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acf6:	f7fd fc63 	bl	80085c0 <HAL_RCC_GetSysClockFreq>
 800acfa:	61f8      	str	r0, [r7, #28]
        break;
 800acfc:	e009      	b.n	800ad12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad02:	61fb      	str	r3, [r7, #28]
        break;
 800ad04:	e005      	b.n	800ad12 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ad10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d077      	beq.n	800ae08 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	005a      	lsls	r2, r3, #1
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	085b      	lsrs	r3, r3, #1
 800ad22:	441a      	add	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b0f      	cmp	r3, #15
 800ad32:	d916      	bls.n	800ad62 <UART_SetConfig+0x392>
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad3a:	d212      	bcs.n	800ad62 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	f023 030f 	bic.w	r3, r3, #15
 800ad44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	085b      	lsrs	r3, r3, #1
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	f003 0307 	and.w	r3, r3, #7
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	8afb      	ldrh	r3, [r7, #22]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	8afa      	ldrh	r2, [r7, #22]
 800ad5e:	60da      	str	r2, [r3, #12]
 800ad60:	e052      	b.n	800ae08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ad68:	e04e      	b.n	800ae08 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad6e:	2b08      	cmp	r3, #8
 800ad70:	d827      	bhi.n	800adc2 <UART_SetConfig+0x3f2>
 800ad72:	a201      	add	r2, pc, #4	@ (adr r2, 800ad78 <UART_SetConfig+0x3a8>)
 800ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad78:	0800ad9d 	.word	0x0800ad9d
 800ad7c:	0800ada5 	.word	0x0800ada5
 800ad80:	0800adad 	.word	0x0800adad
 800ad84:	0800adc3 	.word	0x0800adc3
 800ad88:	0800adb3 	.word	0x0800adb3
 800ad8c:	0800adc3 	.word	0x0800adc3
 800ad90:	0800adc3 	.word	0x0800adc3
 800ad94:	0800adc3 	.word	0x0800adc3
 800ad98:	0800adbb 	.word	0x0800adbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad9c:	f7fd fca8 	bl	80086f0 <HAL_RCC_GetPCLK1Freq>
 800ada0:	61f8      	str	r0, [r7, #28]
        break;
 800ada2:	e014      	b.n	800adce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ada4:	f7fd fcba 	bl	800871c <HAL_RCC_GetPCLK2Freq>
 800ada8:	61f8      	str	r0, [r7, #28]
        break;
 800adaa:	e010      	b.n	800adce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adac:	4b1d      	ldr	r3, [pc, #116]	@ (800ae24 <UART_SetConfig+0x454>)
 800adae:	61fb      	str	r3, [r7, #28]
        break;
 800adb0:	e00d      	b.n	800adce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adb2:	f7fd fc05 	bl	80085c0 <HAL_RCC_GetSysClockFreq>
 800adb6:	61f8      	str	r0, [r7, #28]
        break;
 800adb8:	e009      	b.n	800adce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adbe:	61fb      	str	r3, [r7, #28]
        break;
 800adc0:	e005      	b.n	800adce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800adcc:	bf00      	nop
    }

    if (pclk != 0U)
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d019      	beq.n	800ae08 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	085a      	lsrs	r2, r3, #1
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	441a      	add	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	2b0f      	cmp	r3, #15
 800adec:	d909      	bls.n	800ae02 <UART_SetConfig+0x432>
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adf4:	d205      	bcs.n	800ae02 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	60da      	str	r2, [r3, #12]
 800ae00:	e002      	b.n	800ae08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ae14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3728      	adds	r7, #40	@ 0x28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae22:	bf00      	nop
 800ae24:	00f42400 	.word	0x00f42400

0800ae28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00a      	beq.n	800ae52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae78:	f003 0302 	and.w	r3, r3, #2
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00a      	beq.n	800ae96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00a      	beq.n	800aeb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aebc:	f003 0310 	and.w	r3, r3, #16
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00a      	beq.n	800aeda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aede:	f003 0320 	and.w	r3, r3, #32
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	430a      	orrs	r2, r1
 800aefa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af04:	2b00      	cmp	r3, #0
 800af06:	d01a      	beq.n	800af3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af26:	d10a      	bne.n	800af3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	430a      	orrs	r2, r1
 800af3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00a      	beq.n	800af60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	430a      	orrs	r2, r1
 800af5e:	605a      	str	r2, [r3, #4]
  }
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b098      	sub	sp, #96	@ 0x60
 800af70:	af02      	add	r7, sp, #8
 800af72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af7c:	f7fa f8d0 	bl	8005120 <HAL_GetTick>
 800af80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 0308 	and.w	r3, r3, #8
 800af8c:	2b08      	cmp	r3, #8
 800af8e:	d12e      	bne.n	800afee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af98:	2200      	movs	r2, #0
 800af9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f88c 	bl	800b0bc <UART_WaitOnFlagUntilTimeout>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d021      	beq.n	800afee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb2:	e853 3f00 	ldrex	r3, [r3]
 800afb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afbe:	653b      	str	r3, [r7, #80]	@ 0x50
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	461a      	mov	r2, r3
 800afc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800afca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afd0:	e841 2300 	strex	r3, r2, [r1]
 800afd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1e6      	bne.n	800afaa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2220      	movs	r2, #32
 800afe0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e062      	b.n	800b0b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d149      	bne.n	800b090 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800affc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b004:	2200      	movs	r2, #0
 800b006:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f856 	bl	800b0bc <UART_WaitOnFlagUntilTimeout>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d03c      	beq.n	800b090 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	e853 3f00 	ldrex	r3, [r3]
 800b022:	623b      	str	r3, [r7, #32]
   return(result);
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b02a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	461a      	mov	r2, r3
 800b032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b034:	633b      	str	r3, [r7, #48]	@ 0x30
 800b036:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b038:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b03a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b03c:	e841 2300 	strex	r3, r2, [r1]
 800b040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e6      	bne.n	800b016 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3308      	adds	r3, #8
 800b04e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	e853 3f00 	ldrex	r3, [r3]
 800b056:	60fb      	str	r3, [r7, #12]
   return(result);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f023 0301 	bic.w	r3, r3, #1
 800b05e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3308      	adds	r3, #8
 800b066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b068:	61fa      	str	r2, [r7, #28]
 800b06a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06c:	69b9      	ldr	r1, [r7, #24]
 800b06e:	69fa      	ldr	r2, [r7, #28]
 800b070:	e841 2300 	strex	r3, r2, [r1]
 800b074:	617b      	str	r3, [r7, #20]
   return(result);
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e5      	bne.n	800b048 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2220      	movs	r2, #32
 800b080:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e011      	b.n	800b0b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2220      	movs	r2, #32
 800b094:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2220      	movs	r2, #32
 800b09a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3758      	adds	r7, #88	@ 0x58
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	603b      	str	r3, [r7, #0]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0cc:	e049      	b.n	800b162 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d4:	d045      	beq.n	800b162 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0d6:	f7fa f823 	bl	8005120 <HAL_GetTick>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d302      	bcc.n	800b0ec <UART_WaitOnFlagUntilTimeout+0x30>
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e048      	b.n	800b182 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d031      	beq.n	800b162 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	f003 0308 	and.w	r3, r3, #8
 800b108:	2b08      	cmp	r3, #8
 800b10a:	d110      	bne.n	800b12e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2208      	movs	r2, #8
 800b112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 f8ff 	bl	800b318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2208      	movs	r2, #8
 800b11e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e029      	b.n	800b182 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b13c:	d111      	bne.n	800b162 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f000 f8e5 	bl	800b318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2220      	movs	r2, #32
 800b152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e00f      	b.n	800b182 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69da      	ldr	r2, [r3, #28]
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	4013      	ands	r3, r2
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	429a      	cmp	r2, r3
 800b170:	bf0c      	ite	eq
 800b172:	2301      	moveq	r3, #1
 800b174:	2300      	movne	r3, #0
 800b176:	b2db      	uxtb	r3, r3
 800b178:	461a      	mov	r2, r3
 800b17a:	79fb      	ldrb	r3, [r7, #7]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d0a6      	beq.n	800b0ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b096      	sub	sp, #88	@ 0x58
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	88fa      	ldrh	r2, [r7, #6]
 800b1a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2222      	movs	r2, #34	@ 0x22
 800b1b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d028      	beq.n	800b212 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1c4:	4a3e      	ldr	r2, [pc, #248]	@ (800b2c0 <UART_Start_Receive_DMA+0x134>)
 800b1c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1cc:	4a3d      	ldr	r2, [pc, #244]	@ (800b2c4 <UART_Start_Receive_DMA+0x138>)
 800b1ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1d4:	4a3c      	ldr	r2, [pc, #240]	@ (800b2c8 <UART_Start_Receive_DMA+0x13c>)
 800b1d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1dc:	2200      	movs	r2, #0
 800b1de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3324      	adds	r3, #36	@ 0x24
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	88fb      	ldrh	r3, [r7, #6]
 800b1f4:	f7fb fb48 	bl	8006888 <HAL_DMA_Start_IT>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d009      	beq.n	800b212 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2210      	movs	r2, #16
 800b202:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2220      	movs	r2, #32
 800b20a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e051      	b.n	800b2b6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d018      	beq.n	800b24c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b222:	e853 3f00 	ldrex	r3, [r3]
 800b226:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b22e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b23a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b23e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b240:	e841 2300 	strex	r3, r2, [r1]
 800b244:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1e6      	bne.n	800b21a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3308      	adds	r3, #8
 800b252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b256:	e853 3f00 	ldrex	r3, [r3]
 800b25a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25e:	f043 0301 	orr.w	r3, r3, #1
 800b262:	653b      	str	r3, [r7, #80]	@ 0x50
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3308      	adds	r3, #8
 800b26a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b26c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b26e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b270:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b274:	e841 2300 	strex	r3, r2, [r1]
 800b278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1e5      	bne.n	800b24c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3308      	adds	r3, #8
 800b286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	e853 3f00 	ldrex	r3, [r3]
 800b28e:	613b      	str	r3, [r7, #16]
   return(result);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3308      	adds	r3, #8
 800b29e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2a0:	623a      	str	r2, [r7, #32]
 800b2a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	69f9      	ldr	r1, [r7, #28]
 800b2a6:	6a3a      	ldr	r2, [r7, #32]
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e5      	bne.n	800b280 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3758      	adds	r7, #88	@ 0x58
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	0800b497 	.word	0x0800b497
 800b2c4:	0800b5c3 	.word	0x0800b5c3
 800b2c8:	0800b601 	.word	0x0800b601

0800b2cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b089      	sub	sp, #36	@ 0x24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	e853 3f00 	ldrex	r3, [r3]
 800b2e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b2e8:	61fb      	str	r3, [r7, #28]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	61bb      	str	r3, [r7, #24]
 800b2f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f6:	6979      	ldr	r1, [r7, #20]
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	e841 2300 	strex	r3, r2, [r1]
 800b2fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1e6      	bne.n	800b2d4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2220      	movs	r2, #32
 800b30a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b30c:	bf00      	nop
 800b30e:	3724      	adds	r7, #36	@ 0x24
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b095      	sub	sp, #84	@ 0x54
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b328:	e853 3f00 	ldrex	r3, [r3]
 800b32c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b33e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b340:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b342:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b344:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b346:	e841 2300 	strex	r3, r2, [r1]
 800b34a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1e6      	bne.n	800b320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3308      	adds	r3, #8
 800b358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	61fb      	str	r3, [r7, #28]
   return(result);
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	f023 0301 	bic.w	r3, r3, #1
 800b368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3308      	adds	r3, #8
 800b370:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b372:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e5      	bne.n	800b352 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d118      	bne.n	800b3c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f023 0310 	bic.w	r3, r3, #16
 800b3a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b0:	6979      	ldr	r1, [r7, #20]
 800b3b2:	69ba      	ldr	r2, [r7, #24]
 800b3b4:	e841 2300 	strex	r3, r2, [r1]
 800b3b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e6      	bne.n	800b38e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2220      	movs	r2, #32
 800b3c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b3d4:	bf00      	nop
 800b3d6:	3754      	adds	r7, #84	@ 0x54
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b090      	sub	sp, #64	@ 0x40
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d137      	bne.n	800b46c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3308      	adds	r3, #8
 800b40a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40e:	e853 3f00 	ldrex	r3, [r3]
 800b412:	623b      	str	r3, [r7, #32]
   return(result);
 800b414:	6a3b      	ldr	r3, [r7, #32]
 800b416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b41a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3308      	adds	r3, #8
 800b422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b424:	633a      	str	r2, [r7, #48]	@ 0x30
 800b426:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b428:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b42a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b42c:	e841 2300 	strex	r3, r2, [r1]
 800b430:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1e5      	bne.n	800b404 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	e853 3f00 	ldrex	r3, [r3]
 800b444:	60fb      	str	r3, [r7, #12]
   return(result);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b44c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b456:	61fb      	str	r3, [r7, #28]
 800b458:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	69b9      	ldr	r1, [r7, #24]
 800b45c:	69fa      	ldr	r2, [r7, #28]
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	617b      	str	r3, [r7, #20]
   return(result);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e6      	bne.n	800b438 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b46a:	e002      	b.n	800b472 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b46c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b46e:	f7f8 fe33 	bl	80040d8 <HAL_UART_TxCpltCallback>
}
 800b472:	bf00      	nop
 800b474:	3740      	adds	r7, #64	@ 0x40
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b486:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7ff fa77 	bl	800a97c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b48e:	bf00      	nop
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b09c      	sub	sp, #112	@ 0x70
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0320 	and.w	r3, r3, #32
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d171      	bne.n	800b596 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b4b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4c2:	e853 3f00 	ldrex	r3, [r3]
 800b4c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b4c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4e0:	e841 2300 	strex	r3, r2, [r1]
 800b4e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b4e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1e6      	bne.n	800b4ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fe:	f023 0301 	bic.w	r3, r3, #1
 800b502:	667b      	str	r3, [r7, #100]	@ 0x64
 800b504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3308      	adds	r3, #8
 800b50a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b50c:	647a      	str	r2, [r7, #68]	@ 0x44
 800b50e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e5      	bne.n	800b4ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3308      	adds	r3, #8
 800b526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52a:	e853 3f00 	ldrex	r3, [r3]
 800b52e:	623b      	str	r3, [r7, #32]
   return(result);
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b536:	663b      	str	r3, [r7, #96]	@ 0x60
 800b538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3308      	adds	r3, #8
 800b53e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b540:	633a      	str	r2, [r7, #48]	@ 0x30
 800b542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b548:	e841 2300 	strex	r3, r2, [r1]
 800b54c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e5      	bne.n	800b520 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b556:	2220      	movs	r2, #32
 800b558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b55c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b55e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b560:	2b01      	cmp	r3, #1
 800b562:	d118      	bne.n	800b596 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	60fb      	str	r3, [r7, #12]
   return(result);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f023 0310 	bic.w	r3, r3, #16
 800b578:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b57a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b582:	61fb      	str	r3, [r7, #28]
 800b584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b586:	69b9      	ldr	r1, [r7, #24]
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	e841 2300 	strex	r3, r2, [r1]
 800b58e:	617b      	str	r3, [r7, #20]
   return(result);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1e6      	bne.n	800b564 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b598:	2200      	movs	r2, #0
 800b59a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b59c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b59e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d107      	bne.n	800b5b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5ae:	f7ff fa03 	bl	800a9b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5b2:	e002      	b.n	800b5ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b5b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5b6:	f7f8 fd9f 	bl	80040f8 <HAL_UART_RxCpltCallback>
}
 800b5ba:	bf00      	nop
 800b5bc:	3770      	adds	r7, #112	@ 0x70
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d109      	bne.n	800b5f2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b5e4:	085b      	lsrs	r3, r3, #1
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f7ff f9e4 	bl	800a9b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5f0:	e002      	b.n	800b5f8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f7ff f9cc 	bl	800a990 <HAL_UART_RxHalfCpltCallback>
}
 800b5f8:	bf00      	nop
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b612:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b626:	2b80      	cmp	r3, #128	@ 0x80
 800b628:	d109      	bne.n	800b63e <UART_DMAError+0x3e>
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	2b21      	cmp	r3, #33	@ 0x21
 800b62e:	d106      	bne.n	800b63e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2200      	movs	r2, #0
 800b634:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b638:	6978      	ldr	r0, [r7, #20]
 800b63a:	f7ff fe47 	bl	800b2cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b648:	2b40      	cmp	r3, #64	@ 0x40
 800b64a:	d109      	bne.n	800b660 <UART_DMAError+0x60>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b22      	cmp	r3, #34	@ 0x22
 800b650:	d106      	bne.n	800b660 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2200      	movs	r2, #0
 800b656:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b65a:	6978      	ldr	r0, [r7, #20]
 800b65c:	f7ff fe5c 	bl	800b318 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b666:	f043 0210 	orr.w	r2, r3, #16
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b670:	6978      	ldr	r0, [r7, #20]
 800b672:	f7ff f997 	bl	800a9a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b676:	bf00      	nop
 800b678:	3718      	adds	r7, #24
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f7ff f981 	bl	800a9a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b088      	sub	sp, #32
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	e853 3f00 	ldrex	r3, [r3]
 800b6be:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6c6:	61fb      	str	r3, [r7, #28]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	61bb      	str	r3, [r7, #24]
 800b6d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d4:	6979      	ldr	r1, [r7, #20]
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	e841 2300 	strex	r3, r2, [r1]
 800b6dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1e6      	bne.n	800b6b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7f8 fcf1 	bl	80040d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6f6:	bf00      	nop
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
	...

0800b714 <__NVIC_SetPriority>:
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	4603      	mov	r3, r0
 800b71c:	6039      	str	r1, [r7, #0]
 800b71e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b724:	2b00      	cmp	r3, #0
 800b726:	db0a      	blt.n	800b73e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	490c      	ldr	r1, [pc, #48]	@ (800b760 <__NVIC_SetPriority+0x4c>)
 800b72e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b732:	0112      	lsls	r2, r2, #4
 800b734:	b2d2      	uxtb	r2, r2
 800b736:	440b      	add	r3, r1
 800b738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b73c:	e00a      	b.n	800b754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	b2da      	uxtb	r2, r3
 800b742:	4908      	ldr	r1, [pc, #32]	@ (800b764 <__NVIC_SetPriority+0x50>)
 800b744:	79fb      	ldrb	r3, [r7, #7]
 800b746:	f003 030f 	and.w	r3, r3, #15
 800b74a:	3b04      	subs	r3, #4
 800b74c:	0112      	lsls	r2, r2, #4
 800b74e:	b2d2      	uxtb	r2, r2
 800b750:	440b      	add	r3, r1
 800b752:	761a      	strb	r2, [r3, #24]
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	e000e100 	.word	0xe000e100
 800b764:	e000ed00 	.word	0xe000ed00

0800b768 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b768:	b580      	push	{r7, lr}
 800b76a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b76c:	4b05      	ldr	r3, [pc, #20]	@ (800b784 <SysTick_Handler+0x1c>)
 800b76e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b770:	f002 fdd0 	bl	800e314 <xTaskGetSchedulerState>
 800b774:	4603      	mov	r3, r0
 800b776:	2b01      	cmp	r3, #1
 800b778:	d001      	beq.n	800b77e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b77a:	f003 fcc5 	bl	800f108 <xPortSysTickHandler>
  }
}
 800b77e:	bf00      	nop
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	e000e010 	.word	0xe000e010

0800b788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b78c:	2100      	movs	r1, #0
 800b78e:	f06f 0004 	mvn.w	r0, #4
 800b792:	f7ff ffbf 	bl	800b714 <__NVIC_SetPriority>
#endif
}
 800b796:	bf00      	nop
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7a2:	f3ef 8305 	mrs	r3, IPSR
 800b7a6:	603b      	str	r3, [r7, #0]
  return(result);
 800b7a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d003      	beq.n	800b7b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b7ae:	f06f 0305 	mvn.w	r3, #5
 800b7b2:	607b      	str	r3, [r7, #4]
 800b7b4:	e00c      	b.n	800b7d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e0 <osKernelInitialize+0x44>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d105      	bne.n	800b7ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b7be:	4b08      	ldr	r3, [pc, #32]	@ (800b7e0 <osKernelInitialize+0x44>)
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	607b      	str	r3, [r7, #4]
 800b7c8:	e002      	b.n	800b7d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b7d0:	687b      	ldr	r3, [r7, #4]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	20000510 	.word	0x20000510

0800b7e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ea:	f3ef 8305 	mrs	r3, IPSR
 800b7ee:	603b      	str	r3, [r7, #0]
  return(result);
 800b7f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <osKernelStart+0x1a>
    stat = osErrorISR;
 800b7f6:	f06f 0305 	mvn.w	r3, #5
 800b7fa:	607b      	str	r3, [r7, #4]
 800b7fc:	e010      	b.n	800b820 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b82c <osKernelStart+0x48>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d109      	bne.n	800b81a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b806:	f7ff ffbf 	bl	800b788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b80a:	4b08      	ldr	r3, [pc, #32]	@ (800b82c <osKernelStart+0x48>)
 800b80c:	2202      	movs	r2, #2
 800b80e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b810:	f002 f8fa 	bl	800da08 <vTaskStartScheduler>
      stat = osOK;
 800b814:	2300      	movs	r3, #0
 800b816:	607b      	str	r3, [r7, #4]
 800b818:	e002      	b.n	800b820 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b81a:	f04f 33ff 	mov.w	r3, #4294967295
 800b81e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b820:	687b      	ldr	r3, [r7, #4]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20000510 	.word	0x20000510

0800b830 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b836:	f3ef 8305 	mrs	r3, IPSR
 800b83a:	603b      	str	r3, [r7, #0]
  return(result);
 800b83c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d003      	beq.n	800b84a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b842:	f002 fa0d 	bl	800dc60 <xTaskGetTickCountFromISR>
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	e002      	b.n	800b850 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b84a:	f002 f9f9 	bl	800dc40 <xTaskGetTickCount>
 800b84e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b850:	687b      	ldr	r3, [r7, #4]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b08e      	sub	sp, #56	@ 0x38
 800b85e:	af04      	add	r7, sp, #16
 800b860:	60f8      	str	r0, [r7, #12]
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b86a:	f3ef 8305 	mrs	r3, IPSR
 800b86e:	617b      	str	r3, [r7, #20]
  return(result);
 800b870:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b872:	2b00      	cmp	r3, #0
 800b874:	d17e      	bne.n	800b974 <osThreadNew+0x11a>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d07b      	beq.n	800b974 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b87c:	2380      	movs	r3, #128	@ 0x80
 800b87e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b880:	2318      	movs	r3, #24
 800b882:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b884:	2300      	movs	r3, #0
 800b886:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b888:	f04f 33ff 	mov.w	r3, #4294967295
 800b88c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d045      	beq.n	800b920 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d002      	beq.n	800b8a2 <osThreadNew+0x48>
        name = attr->name;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d008      	beq.n	800b8c8 <osThreadNew+0x6e>
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	2b38      	cmp	r3, #56	@ 0x38
 800b8ba:	d805      	bhi.n	800b8c8 <osThreadNew+0x6e>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d001      	beq.n	800b8cc <osThreadNew+0x72>
        return (NULL);
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e054      	b.n	800b976 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	695b      	ldr	r3, [r3, #20]
 800b8d8:	089b      	lsrs	r3, r3, #2
 800b8da:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00e      	beq.n	800b902 <osThreadNew+0xa8>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	2ba7      	cmp	r3, #167	@ 0xa7
 800b8ea:	d90a      	bls.n	800b902 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d006      	beq.n	800b902 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <osThreadNew+0xa8>
        mem = 1;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	61bb      	str	r3, [r7, #24]
 800b900:	e010      	b.n	800b924 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10c      	bne.n	800b924 <osThreadNew+0xca>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d108      	bne.n	800b924 <osThreadNew+0xca>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d104      	bne.n	800b924 <osThreadNew+0xca>
          mem = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	61bb      	str	r3, [r7, #24]
 800b91e:	e001      	b.n	800b924 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d110      	bne.n	800b94c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b932:	9202      	str	r2, [sp, #8]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6a3a      	ldr	r2, [r7, #32]
 800b93e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f001 fded 	bl	800d520 <xTaskCreateStatic>
 800b946:	4603      	mov	r3, r0
 800b948:	613b      	str	r3, [r7, #16]
 800b94a:	e013      	b.n	800b974 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d110      	bne.n	800b974 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	b29a      	uxth	r2, r3
 800b956:	f107 0310 	add.w	r3, r7, #16
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f001 fe3b 	bl	800d5e0 <xTaskCreate>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d001      	beq.n	800b974 <osThreadNew+0x11a>
            hTask = NULL;
 800b970:	2300      	movs	r3, #0
 800b972:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b974:	693b      	ldr	r3, [r7, #16]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3728      	adds	r7, #40	@ 0x28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b986:	f3ef 8305 	mrs	r3, IPSR
 800b98a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b98c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <osDelay+0x1c>
    stat = osErrorISR;
 800b992:	f06f 0305 	mvn.w	r3, #5
 800b996:	60fb      	str	r3, [r7, #12]
 800b998:	e007      	b.n	800b9aa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <osDelay+0x2c>
      vTaskDelay(ticks);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 fff9 	bl	800d99c <vTaskDelay>
    }
  }

  return (stat);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9bc:	f3ef 8305 	mrs	r3, IPSR
 800b9c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800b9c8:	f06f 0305 	mvn.w	r3, #5
 800b9cc:	617b      	str	r3, [r7, #20]
 800b9ce:	e019      	b.n	800ba04 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800b9d4:	f002 f934 	bl	800dc40 <xTaskGetTickCount>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d009      	beq.n	800b9fe <osDelayUntil+0x4a>
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	db06      	blt.n	800b9fe <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800b9f0:	f107 0308 	add.w	r3, r7, #8
 800b9f4:	6939      	ldr	r1, [r7, #16]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 ff50 	bl	800d89c <vTaskDelayUntil>
 800b9fc:	e002      	b.n	800ba04 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800b9fe:	f06f 0303 	mvn.w	r3, #3
 800ba02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ba04:	697b      	ldr	r3, [r7, #20]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3718      	adds	r7, #24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b088      	sub	sp, #32
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba1a:	f3ef 8305 	mrs	r3, IPSR
 800ba1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba20:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d174      	bne.n	800bb10 <osMutexNew+0x102>
    if (attr != NULL) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	61bb      	str	r3, [r7, #24]
 800ba32:	e001      	b.n	800ba38 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ba34:	2300      	movs	r3, #0
 800ba36:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <osMutexNew+0x3a>
      rmtx = 1U;
 800ba42:	2301      	movs	r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	e001      	b.n	800ba4c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	f003 0308 	and.w	r3, r3, #8
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d15c      	bne.n	800bb10 <osMutexNew+0x102>
      mem = -1;
 800ba56:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d015      	beq.n	800ba8e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d006      	beq.n	800ba78 <osMutexNew+0x6a>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	2b4f      	cmp	r3, #79	@ 0x4f
 800ba70:	d902      	bls.n	800ba78 <osMutexNew+0x6a>
          mem = 1;
 800ba72:	2301      	movs	r3, #1
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	e00c      	b.n	800ba92 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d108      	bne.n	800ba92 <osMutexNew+0x84>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d104      	bne.n	800ba92 <osMutexNew+0x84>
            mem = 0;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	613b      	str	r3, [r7, #16]
 800ba8c:	e001      	b.n	800ba92 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d112      	bne.n	800babe <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d007      	beq.n	800baae <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	4619      	mov	r1, r3
 800baa4:	2004      	movs	r0, #4
 800baa6:	f000 fd90 	bl	800c5ca <xQueueCreateMutexStatic>
 800baaa:	61f8      	str	r0, [r7, #28]
 800baac:	e016      	b.n	800badc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	4619      	mov	r1, r3
 800bab4:	2001      	movs	r0, #1
 800bab6:	f000 fd88 	bl	800c5ca <xQueueCreateMutexStatic>
 800baba:	61f8      	str	r0, [r7, #28]
 800babc:	e00e      	b.n	800badc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10b      	bne.n	800badc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d004      	beq.n	800bad4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800baca:	2004      	movs	r0, #4
 800bacc:	f000 fd65 	bl	800c59a <xQueueCreateMutex>
 800bad0:	61f8      	str	r0, [r7, #28]
 800bad2:	e003      	b.n	800badc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bad4:	2001      	movs	r0, #1
 800bad6:	f000 fd60 	bl	800c59a <xQueueCreateMutex>
 800bada:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00c      	beq.n	800bafc <osMutexNew+0xee>
        if (attr != NULL) {
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <osMutexNew+0xe2>
          name = attr->name;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	e001      	b.n	800baf4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800baf0:	2300      	movs	r3, #0
 800baf2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800baf4:	68f9      	ldr	r1, [r7, #12]
 800baf6:	69f8      	ldr	r0, [r7, #28]
 800baf8:	f001 fc8a 	bl	800d410 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d006      	beq.n	800bb10 <osMutexNew+0x102>
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	f043 0301 	orr.w	r3, r3, #1
 800bb0e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bb10:	69fb      	ldr	r3, [r7, #28]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3720      	adds	r7, #32
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b086      	sub	sp, #24
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f023 0301 	bic.w	r3, r3, #1
 800bb2a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb38:	f3ef 8305 	mrs	r3, IPSR
 800bb3c:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb3e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800bb44:	f06f 0305 	mvn.w	r3, #5
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	e02c      	b.n	800bba6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d103      	bne.n	800bb5a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800bb52:	f06f 0303 	mvn.w	r3, #3
 800bb56:	617b      	str	r3, [r7, #20]
 800bb58:	e025      	b.n	800bba6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d011      	beq.n	800bb84 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6938      	ldr	r0, [r7, #16]
 800bb64:	f000 fd81 	bl	800c66a <xQueueTakeMutexRecursive>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d01b      	beq.n	800bba6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d003      	beq.n	800bb7c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800bb74:	f06f 0301 	mvn.w	r3, #1
 800bb78:	617b      	str	r3, [r7, #20]
 800bb7a:	e014      	b.n	800bba6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bb7c:	f06f 0302 	mvn.w	r3, #2
 800bb80:	617b      	str	r3, [r7, #20]
 800bb82:	e010      	b.n	800bba6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6938      	ldr	r0, [r7, #16]
 800bb88:	f001 f926 	bl	800cdd8 <xQueueSemaphoreTake>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d009      	beq.n	800bba6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800bb98:	f06f 0301 	mvn.w	r3, #1
 800bb9c:	617b      	str	r3, [r7, #20]
 800bb9e:	e002      	b.n	800bba6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bba0:	f06f 0302 	mvn.w	r3, #2
 800bba4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800bba6:	697b      	ldr	r3, [r7, #20]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f023 0301 	bic.w	r3, r3, #1
 800bbbe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbcc:	f3ef 8305 	mrs	r3, IPSR
 800bbd0:	60bb      	str	r3, [r7, #8]
  return(result);
 800bbd2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <osMutexRelease+0x30>
    stat = osErrorISR;
 800bbd8:	f06f 0305 	mvn.w	r3, #5
 800bbdc:	617b      	str	r3, [r7, #20]
 800bbde:	e01f      	b.n	800bc20 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d103      	bne.n	800bbee <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800bbe6:	f06f 0303 	mvn.w	r3, #3
 800bbea:	617b      	str	r3, [r7, #20]
 800bbec:	e018      	b.n	800bc20 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d009      	beq.n	800bc08 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bbf4:	6938      	ldr	r0, [r7, #16]
 800bbf6:	f000 fd03 	bl	800c600 <xQueueGiveMutexRecursive>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d00f      	beq.n	800bc20 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bc00:	f06f 0302 	mvn.w	r3, #2
 800bc04:	617b      	str	r3, [r7, #20]
 800bc06:	e00b      	b.n	800bc20 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bc08:	2300      	movs	r3, #0
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6938      	ldr	r0, [r7, #16]
 800bc10:	f000 fdd0 	bl	800c7b4 <xQueueGenericSend>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d002      	beq.n	800bc20 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bc1a:	f06f 0302 	mvn.w	r3, #2
 800bc1e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bc20:	697b      	ldr	r3, [r7, #20]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3718      	adds	r7, #24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b08a      	sub	sp, #40	@ 0x28
 800bc2e:	af02      	add	r7, sp, #8
 800bc30:	60f8      	str	r0, [r7, #12]
 800bc32:	60b9      	str	r1, [r7, #8]
 800bc34:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc3a:	f3ef 8305 	mrs	r3, IPSR
 800bc3e:	613b      	str	r3, [r7, #16]
  return(result);
 800bc40:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d175      	bne.n	800bd32 <osSemaphoreNew+0x108>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d072      	beq.n	800bd32 <osSemaphoreNew+0x108>
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d86e      	bhi.n	800bd32 <osSemaphoreNew+0x108>
    mem = -1;
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295
 800bc58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d015      	beq.n	800bc8c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d006      	beq.n	800bc76 <osSemaphoreNew+0x4c>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	2b4f      	cmp	r3, #79	@ 0x4f
 800bc6e:	d902      	bls.n	800bc76 <osSemaphoreNew+0x4c>
        mem = 1;
 800bc70:	2301      	movs	r3, #1
 800bc72:	61bb      	str	r3, [r7, #24]
 800bc74:	e00c      	b.n	800bc90 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d108      	bne.n	800bc90 <osSemaphoreNew+0x66>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d104      	bne.n	800bc90 <osSemaphoreNew+0x66>
          mem = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	61bb      	str	r3, [r7, #24]
 800bc8a:	e001      	b.n	800bc90 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc96:	d04c      	beq.n	800bd32 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d128      	bne.n	800bcf0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d10a      	bne.n	800bcba <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	2203      	movs	r2, #3
 800bcaa:	9200      	str	r2, [sp, #0]
 800bcac:	2200      	movs	r2, #0
 800bcae:	2100      	movs	r1, #0
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	f000 fb7d 	bl	800c3b0 <xQueueGenericCreateStatic>
 800bcb6:	61f8      	str	r0, [r7, #28]
 800bcb8:	e005      	b.n	800bcc6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bcba:	2203      	movs	r2, #3
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	f000 fbf3 	bl	800c4aa <xQueueGenericCreate>
 800bcc4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d022      	beq.n	800bd12 <osSemaphoreNew+0xe8>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d01f      	beq.n	800bd12 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	69f8      	ldr	r0, [r7, #28]
 800bcda:	f000 fd6b 	bl	800c7b4 <xQueueGenericSend>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d016      	beq.n	800bd12 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bce4:	69f8      	ldr	r0, [r7, #28]
 800bce6:	f001 fa47 	bl	800d178 <vQueueDelete>
            hSemaphore = NULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	61fb      	str	r3, [r7, #28]
 800bcee:	e010      	b.n	800bd12 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d108      	bne.n	800bd08 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	68b9      	ldr	r1, [r7, #8]
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f000 fcea 	bl	800c6d8 <xQueueCreateCountingSemaphoreStatic>
 800bd04:	61f8      	str	r0, [r7, #28]
 800bd06:	e004      	b.n	800bd12 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bd08:	68b9      	ldr	r1, [r7, #8]
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f000 fd1d 	bl	800c74a <xQueueCreateCountingSemaphore>
 800bd10:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00c      	beq.n	800bd32 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <osSemaphoreNew+0xfc>
          name = attr->name;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	617b      	str	r3, [r7, #20]
 800bd24:	e001      	b.n	800bd2a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bd26:	2300      	movs	r3, #0
 800bd28:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bd2a:	6979      	ldr	r1, [r7, #20]
 800bd2c:	69f8      	ldr	r0, [r7, #28]
 800bd2e:	f001 fb6f 	bl	800d410 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bd32:	69fb      	ldr	r3, [r7, #28]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3720      	adds	r7, #32
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d103      	bne.n	800bd5c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bd54:	f06f 0303 	mvn.w	r3, #3
 800bd58:	617b      	str	r3, [r7, #20]
 800bd5a:	e039      	b.n	800bdd0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd5c:	f3ef 8305 	mrs	r3, IPSR
 800bd60:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d022      	beq.n	800bdae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d003      	beq.n	800bd76 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800bd6e:	f06f 0303 	mvn.w	r3, #3
 800bd72:	617b      	str	r3, [r7, #20]
 800bd74:	e02c      	b.n	800bdd0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bd7a:	f107 0308 	add.w	r3, r7, #8
 800bd7e:	461a      	mov	r2, r3
 800bd80:	2100      	movs	r1, #0
 800bd82:	6938      	ldr	r0, [r7, #16]
 800bd84:	f001 f938 	bl	800cff8 <xQueueReceiveFromISR>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d003      	beq.n	800bd96 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800bd8e:	f06f 0302 	mvn.w	r3, #2
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	e01c      	b.n	800bdd0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d019      	beq.n	800bdd0 <osSemaphoreAcquire+0x94>
 800bd9c:	4b0f      	ldr	r3, [pc, #60]	@ (800bddc <osSemaphoreAcquire+0xa0>)
 800bd9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	e010      	b.n	800bdd0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6938      	ldr	r0, [r7, #16]
 800bdb2:	f001 f811 	bl	800cdd8 <xQueueSemaphoreTake>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d009      	beq.n	800bdd0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800bdc2:	f06f 0301 	mvn.w	r3, #1
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	e002      	b.n	800bdd0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800bdca:	f06f 0302 	mvn.w	r3, #2
 800bdce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bdd0:	697b      	ldr	r3, [r7, #20]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	e000ed04 	.word	0xe000ed04

0800bde0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d103      	bne.n	800bdfe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bdf6:	f06f 0303 	mvn.w	r3, #3
 800bdfa:	617b      	str	r3, [r7, #20]
 800bdfc:	e02c      	b.n	800be58 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdfe:	f3ef 8305 	mrs	r3, IPSR
 800be02:	60fb      	str	r3, [r7, #12]
  return(result);
 800be04:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800be06:	2b00      	cmp	r3, #0
 800be08:	d01a      	beq.n	800be40 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800be0e:	f107 0308 	add.w	r3, r7, #8
 800be12:	4619      	mov	r1, r3
 800be14:	6938      	ldr	r0, [r7, #16]
 800be16:	f000 fe6d 	bl	800caf4 <xQueueGiveFromISR>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d003      	beq.n	800be28 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800be20:	f06f 0302 	mvn.w	r3, #2
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	e017      	b.n	800be58 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d014      	beq.n	800be58 <osSemaphoreRelease+0x78>
 800be2e:	4b0d      	ldr	r3, [pc, #52]	@ (800be64 <osSemaphoreRelease+0x84>)
 800be30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	e00b      	b.n	800be58 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800be40:	2300      	movs	r3, #0
 800be42:	2200      	movs	r2, #0
 800be44:	2100      	movs	r1, #0
 800be46:	6938      	ldr	r0, [r7, #16]
 800be48:	f000 fcb4 	bl	800c7b4 <xQueueGenericSend>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d002      	beq.n	800be58 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800be52:	f06f 0302 	mvn.w	r3, #2
 800be56:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800be58:	697b      	ldr	r3, [r7, #20]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	e000ed04 	.word	0xe000ed04

0800be68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	@ 0x28
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800be74:	2300      	movs	r3, #0
 800be76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be78:	f3ef 8305 	mrs	r3, IPSR
 800be7c:	613b      	str	r3, [r7, #16]
  return(result);
 800be7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800be80:	2b00      	cmp	r3, #0
 800be82:	d15f      	bne.n	800bf44 <osMessageQueueNew+0xdc>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d05c      	beq.n	800bf44 <osMessageQueueNew+0xdc>
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d059      	beq.n	800bf44 <osMessageQueueNew+0xdc>
    mem = -1;
 800be90:	f04f 33ff 	mov.w	r3, #4294967295
 800be94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d029      	beq.n	800bef0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d012      	beq.n	800beca <osMessageQueueNew+0x62>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	2b4f      	cmp	r3, #79	@ 0x4f
 800beaa:	d90e      	bls.n	800beca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	695a      	ldr	r2, [r3, #20]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	68b9      	ldr	r1, [r7, #8]
 800bebc:	fb01 f303 	mul.w	r3, r1, r3
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d302      	bcc.n	800beca <osMessageQueueNew+0x62>
        mem = 1;
 800bec4:	2301      	movs	r3, #1
 800bec6:	61bb      	str	r3, [r7, #24]
 800bec8:	e014      	b.n	800bef4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d110      	bne.n	800bef4 <osMessageQueueNew+0x8c>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10c      	bne.n	800bef4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d108      	bne.n	800bef4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d104      	bne.n	800bef4 <osMessageQueueNew+0x8c>
          mem = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	61bb      	str	r3, [r7, #24]
 800beee:	e001      	b.n	800bef4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d10b      	bne.n	800bf12 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	691a      	ldr	r2, [r3, #16]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	2100      	movs	r1, #0
 800bf04:	9100      	str	r1, [sp, #0]
 800bf06:	68b9      	ldr	r1, [r7, #8]
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 fa51 	bl	800c3b0 <xQueueGenericCreateStatic>
 800bf0e:	61f8      	str	r0, [r7, #28]
 800bf10:	e008      	b.n	800bf24 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d105      	bne.n	800bf24 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bf18:	2200      	movs	r2, #0
 800bf1a:	68b9      	ldr	r1, [r7, #8]
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f000 fac4 	bl	800c4aa <xQueueGenericCreate>
 800bf22:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00c      	beq.n	800bf44 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d003      	beq.n	800bf38 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	617b      	str	r3, [r7, #20]
 800bf36:	e001      	b.n	800bf3c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bf3c:	6979      	ldr	r1, [r7, #20]
 800bf3e:	69f8      	ldr	r0, [r7, #28]
 800bf40:	f001 fa66 	bl	800d410 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bf44:	69fb      	ldr	r3, [r7, #28]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3720      	adds	r7, #32
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
	...

0800bf50 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	603b      	str	r3, [r7, #0]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bf64:	2300      	movs	r3, #0
 800bf66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf68:	f3ef 8305 	mrs	r3, IPSR
 800bf6c:	617b      	str	r3, [r7, #20]
  return(result);
 800bf6e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d028      	beq.n	800bfc6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d005      	beq.n	800bf86 <osMessageQueuePut+0x36>
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <osMessageQueuePut+0x36>
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d003      	beq.n	800bf8e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bf86:	f06f 0303 	mvn.w	r3, #3
 800bf8a:	61fb      	str	r3, [r7, #28]
 800bf8c:	e038      	b.n	800c000 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bf92:	f107 0210 	add.w	r2, r7, #16
 800bf96:	2300      	movs	r3, #0
 800bf98:	68b9      	ldr	r1, [r7, #8]
 800bf9a:	69b8      	ldr	r0, [r7, #24]
 800bf9c:	f000 fd0c 	bl	800c9b8 <xQueueGenericSendFromISR>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d003      	beq.n	800bfae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bfa6:	f06f 0302 	mvn.w	r3, #2
 800bfaa:	61fb      	str	r3, [r7, #28]
 800bfac:	e028      	b.n	800c000 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d025      	beq.n	800c000 <osMessageQueuePut+0xb0>
 800bfb4:	4b15      	ldr	r3, [pc, #84]	@ (800c00c <osMessageQueuePut+0xbc>)
 800bfb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	e01c      	b.n	800c000 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <osMessageQueuePut+0x82>
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d103      	bne.n	800bfda <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bfd2:	f06f 0303 	mvn.w	r3, #3
 800bfd6:	61fb      	str	r3, [r7, #28]
 800bfd8:	e012      	b.n	800c000 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bfda:	2300      	movs	r3, #0
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	69b8      	ldr	r0, [r7, #24]
 800bfe2:	f000 fbe7 	bl	800c7b4 <xQueueGenericSend>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d009      	beq.n	800c000 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bff2:	f06f 0301 	mvn.w	r3, #1
 800bff6:	61fb      	str	r3, [r7, #28]
 800bff8:	e002      	b.n	800c000 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bffa:	f06f 0302 	mvn.w	r3, #2
 800bffe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c000:	69fb      	ldr	r3, [r7, #28]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3720      	adds	r7, #32
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	e000ed04 	.word	0xe000ed04

0800c010 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
 800c01c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c022:	2300      	movs	r3, #0
 800c024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c026:	f3ef 8305 	mrs	r3, IPSR
 800c02a:	617b      	str	r3, [r7, #20]
  return(result);
 800c02c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d028      	beq.n	800c084 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d005      	beq.n	800c044 <osMessageQueueGet+0x34>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d002      	beq.n	800c044 <osMessageQueueGet+0x34>
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d003      	beq.n	800c04c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c044:	f06f 0303 	mvn.w	r3, #3
 800c048:	61fb      	str	r3, [r7, #28]
 800c04a:	e037      	b.n	800c0bc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c04c:	2300      	movs	r3, #0
 800c04e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c050:	f107 0310 	add.w	r3, r7, #16
 800c054:	461a      	mov	r2, r3
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	69b8      	ldr	r0, [r7, #24]
 800c05a:	f000 ffcd 	bl	800cff8 <xQueueReceiveFromISR>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b01      	cmp	r3, #1
 800c062:	d003      	beq.n	800c06c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c064:	f06f 0302 	mvn.w	r3, #2
 800c068:	61fb      	str	r3, [r7, #28]
 800c06a:	e027      	b.n	800c0bc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d024      	beq.n	800c0bc <osMessageQueueGet+0xac>
 800c072:	4b15      	ldr	r3, [pc, #84]	@ (800c0c8 <osMessageQueueGet+0xb8>)
 800c074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c078:	601a      	str	r2, [r3, #0]
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	e01b      	b.n	800c0bc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d002      	beq.n	800c090 <osMessageQueueGet+0x80>
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d103      	bne.n	800c098 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c090:	f06f 0303 	mvn.w	r3, #3
 800c094:	61fb      	str	r3, [r7, #28]
 800c096:	e011      	b.n	800c0bc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	68b9      	ldr	r1, [r7, #8]
 800c09c:	69b8      	ldr	r0, [r7, #24]
 800c09e:	f000 fdb9 	bl	800cc14 <xQueueReceive>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d009      	beq.n	800c0bc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c0ae:	f06f 0301 	mvn.w	r3, #1
 800c0b2:	61fb      	str	r3, [r7, #28]
 800c0b4:	e002      	b.n	800c0bc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c0b6:	f06f 0302 	mvn.w	r3, #2
 800c0ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c0bc:	69fb      	ldr	r3, [r7, #28]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3720      	adds	r7, #32
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	e000ed04 	.word	0xe000ed04

0800c0cc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d102      	bne.n	800c0e4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	e00e      	b.n	800c102 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e4:	f3ef 8305 	mrs	r3, IPSR
 800c0e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d004      	beq.n	800c0fa <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800c0f0:	6938      	ldr	r0, [r7, #16]
 800c0f2:	f001 f822 	bl	800d13a <uxQueueMessagesWaitingFromISR>
 800c0f6:	6178      	str	r0, [r7, #20]
 800c0f8:	e003      	b.n	800c102 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800c0fa:	6938      	ldr	r0, [r7, #16]
 800c0fc:	f000 fffe 	bl	800d0fc <uxQueueMessagesWaiting>
 800c100:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800c102:	697b      	ldr	r3, [r7, #20]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4a07      	ldr	r2, [pc, #28]	@ (800c138 <vApplicationGetIdleTaskMemory+0x2c>)
 800c11c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	4a06      	ldr	r2, [pc, #24]	@ (800c13c <vApplicationGetIdleTaskMemory+0x30>)
 800c122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2280      	movs	r2, #128	@ 0x80
 800c128:	601a      	str	r2, [r3, #0]
}
 800c12a:	bf00      	nop
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	20000514 	.word	0x20000514
 800c13c:	200005bc 	.word	0x200005bc

0800c140 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4a07      	ldr	r2, [pc, #28]	@ (800c16c <vApplicationGetTimerTaskMemory+0x2c>)
 800c150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	4a06      	ldr	r2, [pc, #24]	@ (800c170 <vApplicationGetTimerTaskMemory+0x30>)
 800c156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c15e:	601a      	str	r2, [r3, #0]
}
 800c160:	bf00      	nop
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	200007bc 	.word	0x200007bc
 800c170:	20000864 	.word	0x20000864

0800c174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f103 0208 	add.w	r2, r3, #8
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f04f 32ff 	mov.w	r2, #4294967295
 800c18c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f103 0208 	add.w	r2, r3, #8
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f103 0208 	add.w	r2, r3, #8
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	689a      	ldr	r2, [r3, #8]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	1c5a      	adds	r2, r3, #1
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	601a      	str	r2, [r3, #0]
}
 800c20a:	bf00      	nop
 800c20c:	3714      	adds	r7, #20
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c216:	b480      	push	{r7}
 800c218:	b085      	sub	sp, #20
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22c:	d103      	bne.n	800c236 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	60fb      	str	r3, [r7, #12]
 800c234:	e00c      	b.n	800c250 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3308      	adds	r3, #8
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	e002      	b.n	800c244 <vListInsert+0x2e>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d2f6      	bcs.n	800c23e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	685a      	ldr	r2, [r3, #4]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	683a      	ldr	r2, [r7, #0]
 800c26a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	1c5a      	adds	r2, r3, #1
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	601a      	str	r2, [r3, #0]
}
 800c27c:	bf00      	nop
 800c27e:	3714      	adds	r7, #20
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	6892      	ldr	r2, [r2, #8]
 800c29e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	6852      	ldr	r2, [r2, #4]
 800c2a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d103      	bne.n	800c2bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	1e5a      	subs	r2, r3, #1
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10b      	bne.n	800c308 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c302:	bf00      	nop
 800c304:	bf00      	nop
 800c306:	e7fd      	b.n	800c304 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c308:	f002 fe6e 	bl	800efe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c314:	68f9      	ldr	r1, [r7, #12]
 800c316:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c318:	fb01 f303 	mul.w	r3, r1, r3
 800c31c:	441a      	add	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c338:	3b01      	subs	r3, #1
 800c33a:	68f9      	ldr	r1, [r7, #12]
 800c33c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c33e:	fb01 f303 	mul.w	r3, r1, r3
 800c342:	441a      	add	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	22ff      	movs	r2, #255	@ 0xff
 800c34c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	22ff      	movs	r2, #255	@ 0xff
 800c354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d114      	bne.n	800c388 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d01a      	beq.n	800c39c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3310      	adds	r3, #16
 800c36a:	4618      	mov	r0, r3
 800c36c:	f001 fdfc 	bl	800df68 <xTaskRemoveFromEventList>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d012      	beq.n	800c39c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c376:	4b0d      	ldr	r3, [pc, #52]	@ (800c3ac <xQueueGenericReset+0xd0>)
 800c378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	e009      	b.n	800c39c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3310      	adds	r3, #16
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff fef1 	bl	800c174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3324      	adds	r3, #36	@ 0x24
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff feec 	bl	800c174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c39c:	f002 fe56 	bl	800f04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c3a0:	2301      	movs	r3, #1
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	e000ed04 	.word	0xe000ed04

0800c3b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08e      	sub	sp, #56	@ 0x38
 800c3b4:	af02      	add	r7, sp, #8
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10b      	bne.n	800c3dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c3d6:	bf00      	nop
 800c3d8:	bf00      	nop
 800c3da:	e7fd      	b.n	800c3d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10b      	bne.n	800c3fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop
 800c3f8:	e7fd      	b.n	800c3f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <xQueueGenericCreateStatic+0x56>
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <xQueueGenericCreateStatic+0x5a>
 800c406:	2301      	movs	r3, #1
 800c408:	e000      	b.n	800c40c <xQueueGenericCreateStatic+0x5c>
 800c40a:	2300      	movs	r3, #0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10b      	bne.n	800c428 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	623b      	str	r3, [r7, #32]
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	e7fd      	b.n	800c424 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d102      	bne.n	800c434 <xQueueGenericCreateStatic+0x84>
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d101      	bne.n	800c438 <xQueueGenericCreateStatic+0x88>
 800c434:	2301      	movs	r3, #1
 800c436:	e000      	b.n	800c43a <xQueueGenericCreateStatic+0x8a>
 800c438:	2300      	movs	r3, #0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10b      	bne.n	800c456 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	61fb      	str	r3, [r7, #28]
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	e7fd      	b.n	800c452 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c456:	2350      	movs	r3, #80	@ 0x50
 800c458:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	2b50      	cmp	r3, #80	@ 0x50
 800c45e:	d00b      	beq.n	800c478 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	61bb      	str	r3, [r7, #24]
}
 800c472:	bf00      	nop
 800c474:	bf00      	nop
 800c476:	e7fd      	b.n	800c474 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c478:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00d      	beq.n	800c4a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c48c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	4613      	mov	r3, r2
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	68b9      	ldr	r1, [r7, #8]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 f840 	bl	800c520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3730      	adds	r7, #48	@ 0x30
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b08a      	sub	sp, #40	@ 0x28
 800c4ae:	af02      	add	r7, sp, #8
 800c4b0:	60f8      	str	r0, [r7, #12]
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10b      	bne.n	800c4d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	613b      	str	r3, [r7, #16]
}
 800c4d0:	bf00      	nop
 800c4d2:	bf00      	nop
 800c4d4:	e7fd      	b.n	800c4d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	fb02 f303 	mul.w	r3, r2, r3
 800c4de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	3350      	adds	r3, #80	@ 0x50
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f002 fea1 	bl	800f22c <pvPortMalloc>
 800c4ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d011      	beq.n	800c516 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	3350      	adds	r3, #80	@ 0x50
 800c4fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c504:	79fa      	ldrb	r2, [r7, #7]
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	4613      	mov	r3, r2
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	68b9      	ldr	r1, [r7, #8]
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 f805 	bl	800c520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c516:	69bb      	ldr	r3, [r7, #24]
	}
 800c518:	4618      	mov	r0, r3
 800c51a:	3720      	adds	r7, #32
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
 800c52c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d103      	bne.n	800c53c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	69ba      	ldr	r2, [r7, #24]
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	e002      	b.n	800c542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c54e:	2101      	movs	r1, #1
 800c550:	69b8      	ldr	r0, [r7, #24]
 800c552:	f7ff fec3 	bl	800c2dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	78fa      	ldrb	r2, [r7, #3]
 800c55a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c55e:	bf00      	nop
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c566:	b580      	push	{r7, lr}
 800c568:	b082      	sub	sp, #8
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00e      	beq.n	800c592 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c586:	2300      	movs	r3, #0
 800c588:	2200      	movs	r2, #0
 800c58a:	2100      	movs	r1, #0
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f911 	bl	800c7b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c592:	bf00      	nop
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b086      	sub	sp, #24
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	617b      	str	r3, [r7, #20]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6939      	ldr	r1, [r7, #16]
 800c5b2:	6978      	ldr	r0, [r7, #20]
 800c5b4:	f7ff ff79 	bl	800c4aa <xQueueGenericCreate>
 800c5b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7ff ffd3 	bl	800c566 <prvInitialiseMutex>

		return xNewQueue;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
	}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3718      	adds	r7, #24
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b088      	sub	sp, #32
 800c5ce:	af02      	add	r7, sp, #8
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	6039      	str	r1, [r7, #0]
 800c5d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	617b      	str	r3, [r7, #20]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c5de:	79fb      	ldrb	r3, [r7, #7]
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	6939      	ldr	r1, [r7, #16]
 800c5e8:	6978      	ldr	r0, [r7, #20]
 800c5ea:	f7ff fee1 	bl	800c3b0 <xQueueGenericCreateStatic>
 800c5ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f7ff ffb8 	bl	800c566 <prvInitialiseMutex>

		return xNewQueue;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
	}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c600:	b590      	push	{r4, r7, lr}
 800c602:	b087      	sub	sp, #28
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10b      	bne.n	800c62a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60fb      	str	r3, [r7, #12]
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	e7fd      	b.n	800c626 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	689c      	ldr	r4, [r3, #8]
 800c62e:	f001 fe61 	bl	800e2f4 <xTaskGetCurrentTaskHandle>
 800c632:	4603      	mov	r3, r0
 800c634:	429c      	cmp	r4, r3
 800c636:	d111      	bne.n	800c65c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	1e5a      	subs	r2, r3, #1
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d105      	bne.n	800c656 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c64a:	2300      	movs	r3, #0
 800c64c:	2200      	movs	r2, #0
 800c64e:	2100      	movs	r1, #0
 800c650:	6938      	ldr	r0, [r7, #16]
 800c652:	f000 f8af 	bl	800c7b4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c656:	2301      	movs	r3, #1
 800c658:	617b      	str	r3, [r7, #20]
 800c65a:	e001      	b.n	800c660 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c65c:	2300      	movs	r3, #0
 800c65e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c660:	697b      	ldr	r3, [r7, #20]
	}
 800c662:	4618      	mov	r0, r3
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	bd90      	pop	{r4, r7, pc}

0800c66a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c66a:	b590      	push	{r4, r7, lr}
 800c66c:	b087      	sub	sp, #28
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10b      	bne.n	800c696 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	60fb      	str	r3, [r7, #12]
}
 800c690:	bf00      	nop
 800c692:	bf00      	nop
 800c694:	e7fd      	b.n	800c692 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	689c      	ldr	r4, [r3, #8]
 800c69a:	f001 fe2b 	bl	800e2f4 <xTaskGetCurrentTaskHandle>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	429c      	cmp	r4, r3
 800c6a2:	d107      	bne.n	800c6b4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	e00c      	b.n	800c6ce <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6938      	ldr	r0, [r7, #16]
 800c6b8:	f000 fb8e 	bl	800cdd8 <xQueueSemaphoreTake>
 800c6bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d004      	beq.n	800c6ce <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	1c5a      	adds	r2, r3, #1
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c6ce:	697b      	ldr	r3, [r7, #20]
	}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	371c      	adds	r7, #28
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd90      	pop	{r4, r7, pc}

0800c6d8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08a      	sub	sp, #40	@ 0x28
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10b      	bne.n	800c702 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	61bb      	str	r3, [r7, #24]
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	e7fd      	b.n	800c6fe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	429a      	cmp	r2, r3
 800c708:	d90b      	bls.n	800c722 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c70e:	f383 8811 	msr	BASEPRI, r3
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	617b      	str	r3, [r7, #20]
}
 800c71c:	bf00      	nop
 800c71e:	bf00      	nop
 800c720:	e7fd      	b.n	800c71e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c722:	2302      	movs	r3, #2
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	2100      	movs	r1, #0
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f7ff fe3f 	bl	800c3b0 <xQueueGenericCreateStatic>
 800c732:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d002      	beq.n	800c740 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c740:	69fb      	ldr	r3, [r7, #28]
	}
 800c742:	4618      	mov	r0, r3
 800c744:	3720      	adds	r7, #32
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b086      	sub	sp, #24
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10b      	bne.n	800c772 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	613b      	str	r3, [r7, #16]
}
 800c76c:	bf00      	nop
 800c76e:	bf00      	nop
 800c770:	e7fd      	b.n	800c76e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	429a      	cmp	r2, r3
 800c778:	d90b      	bls.n	800c792 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	60fb      	str	r3, [r7, #12]
}
 800c78c:	bf00      	nop
 800c78e:	bf00      	nop
 800c790:	e7fd      	b.n	800c78e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c792:	2202      	movs	r2, #2
 800c794:	2100      	movs	r1, #0
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7ff fe87 	bl	800c4aa <xQueueGenericCreate>
 800c79c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c7aa:	697b      	ldr	r3, [r7, #20]
	}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3718      	adds	r7, #24
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08e      	sub	sp, #56	@ 0x38
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
 800c7c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10b      	bne.n	800c7e8 <xQueueGenericSend+0x34>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c7e2:	bf00      	nop
 800c7e4:	bf00      	nop
 800c7e6:	e7fd      	b.n	800c7e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d103      	bne.n	800c7f6 <xQueueGenericSend+0x42>
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <xQueueGenericSend+0x46>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e000      	b.n	800c7fc <xQueueGenericSend+0x48>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10b      	bne.n	800c818 <xQueueGenericSend+0x64>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c812:	bf00      	nop
 800c814:	bf00      	nop
 800c816:	e7fd      	b.n	800c814 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d103      	bne.n	800c826 <xQueueGenericSend+0x72>
 800c81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c822:	2b01      	cmp	r3, #1
 800c824:	d101      	bne.n	800c82a <xQueueGenericSend+0x76>
 800c826:	2301      	movs	r3, #1
 800c828:	e000      	b.n	800c82c <xQueueGenericSend+0x78>
 800c82a:	2300      	movs	r3, #0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10b      	bne.n	800c848 <xQueueGenericSend+0x94>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	623b      	str	r3, [r7, #32]
}
 800c842:	bf00      	nop
 800c844:	bf00      	nop
 800c846:	e7fd      	b.n	800c844 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c848:	f001 fd64 	bl	800e314 <xTaskGetSchedulerState>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d102      	bne.n	800c858 <xQueueGenericSend+0xa4>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d101      	bne.n	800c85c <xQueueGenericSend+0xa8>
 800c858:	2301      	movs	r3, #1
 800c85a:	e000      	b.n	800c85e <xQueueGenericSend+0xaa>
 800c85c:	2300      	movs	r3, #0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10b      	bne.n	800c87a <xQueueGenericSend+0xc6>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	61fb      	str	r3, [r7, #28]
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop
 800c878:	e7fd      	b.n	800c876 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c87a:	f002 fbb5 	bl	800efe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c886:	429a      	cmp	r2, r3
 800c888:	d302      	bcc.n	800c890 <xQueueGenericSend+0xdc>
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d129      	bne.n	800c8e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	68b9      	ldr	r1, [r7, #8]
 800c894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c896:	f000 fcab 	bl	800d1f0 <prvCopyDataToQueue>
 800c89a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d010      	beq.n	800c8c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a6:	3324      	adds	r3, #36	@ 0x24
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f001 fb5d 	bl	800df68 <xTaskRemoveFromEventList>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d013      	beq.n	800c8dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c8b4:	4b3f      	ldr	r3, [pc, #252]	@ (800c9b4 <xQueueGenericSend+0x200>)
 800c8b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	e00a      	b.n	800c8dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d007      	beq.n	800c8dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c8cc:	4b39      	ldr	r3, [pc, #228]	@ (800c9b4 <xQueueGenericSend+0x200>)
 800c8ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c8dc:	f002 fbb6 	bl	800f04c <vPortExitCritical>
				return pdPASS;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e063      	b.n	800c9ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d103      	bne.n	800c8f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8ea:	f002 fbaf 	bl	800f04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e05c      	b.n	800c9ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d106      	bne.n	800c906 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8f8:	f107 0314 	add.w	r3, r7, #20
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f001 fb97 	bl	800e030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c902:	2301      	movs	r3, #1
 800c904:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c906:	f002 fba1 	bl	800f04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c90a:	f001 f8ed 	bl	800dae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c90e:	f002 fb6b 	bl	800efe8 <vPortEnterCritical>
 800c912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c918:	b25b      	sxtb	r3, r3
 800c91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91e:	d103      	bne.n	800c928 <xQueueGenericSend+0x174>
 800c920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c922:	2200      	movs	r2, #0
 800c924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c92e:	b25b      	sxtb	r3, r3
 800c930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c934:	d103      	bne.n	800c93e <xQueueGenericSend+0x18a>
 800c936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c93e:	f002 fb85 	bl	800f04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c942:	1d3a      	adds	r2, r7, #4
 800c944:	f107 0314 	add.w	r3, r7, #20
 800c948:	4611      	mov	r1, r2
 800c94a:	4618      	mov	r0, r3
 800c94c:	f001 fb86 	bl	800e05c <xTaskCheckForTimeOut>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d124      	bne.n	800c9a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c956:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c958:	f000 fd42 	bl	800d3e0 <prvIsQueueFull>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d018      	beq.n	800c994 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c964:	3310      	adds	r3, #16
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f001 faaa 	bl	800dec4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c972:	f000 fccd 	bl	800d310 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c976:	f001 f8c5 	bl	800db04 <xTaskResumeAll>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f47f af7c 	bne.w	800c87a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c982:	4b0c      	ldr	r3, [pc, #48]	@ (800c9b4 <xQueueGenericSend+0x200>)
 800c984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	e772      	b.n	800c87a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c996:	f000 fcbb 	bl	800d310 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c99a:	f001 f8b3 	bl	800db04 <xTaskResumeAll>
 800c99e:	e76c      	b.n	800c87a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c9a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9a2:	f000 fcb5 	bl	800d310 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9a6:	f001 f8ad 	bl	800db04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c9aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3738      	adds	r7, #56	@ 0x38
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	e000ed04 	.word	0xe000ed04

0800c9b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b090      	sub	sp, #64	@ 0x40
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10b      	bne.n	800c9e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c9e2:	bf00      	nop
 800c9e4:	bf00      	nop
 800c9e6:	e7fd      	b.n	800c9e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d103      	bne.n	800c9f6 <xQueueGenericSendFromISR+0x3e>
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <xQueueGenericSendFromISR+0x42>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e000      	b.n	800c9fc <xQueueGenericSendFromISR+0x44>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10b      	bne.n	800ca18 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ca12:	bf00      	nop
 800ca14:	bf00      	nop
 800ca16:	e7fd      	b.n	800ca14 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d103      	bne.n	800ca26 <xQueueGenericSendFromISR+0x6e>
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d101      	bne.n	800ca2a <xQueueGenericSendFromISR+0x72>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e000      	b.n	800ca2c <xQueueGenericSendFromISR+0x74>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10b      	bne.n	800ca48 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	623b      	str	r3, [r7, #32]
}
 800ca42:	bf00      	nop
 800ca44:	bf00      	nop
 800ca46:	e7fd      	b.n	800ca44 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca48:	f002 fbae 	bl	800f1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ca4c:	f3ef 8211 	mrs	r2, BASEPRI
 800ca50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	61fa      	str	r2, [r7, #28]
 800ca62:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ca64:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca66:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d302      	bcc.n	800ca7a <xQueueGenericSendFromISR+0xc2>
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d12f      	bne.n	800cada <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca88:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	68b9      	ldr	r1, [r7, #8]
 800ca8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca90:	f000 fbae 	bl	800d1f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca94:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ca98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9c:	d112      	bne.n	800cac4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d016      	beq.n	800cad4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa8:	3324      	adds	r3, #36	@ 0x24
 800caaa:	4618      	mov	r0, r3
 800caac:	f001 fa5c 	bl	800df68 <xTaskRemoveFromEventList>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00e      	beq.n	800cad4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00b      	beq.n	800cad4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	e007      	b.n	800cad4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cac4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cac8:	3301      	adds	r3, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	b25a      	sxtb	r2, r3
 800cace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cad4:	2301      	movs	r3, #1
 800cad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cad8:	e001      	b.n	800cade <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cae8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800caea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800caec:	4618      	mov	r0, r3
 800caee:	3740      	adds	r7, #64	@ 0x40
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08e      	sub	sp, #56	@ 0x38
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10b      	bne.n	800cb20 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	623b      	str	r3, [r7, #32]
}
 800cb1a:	bf00      	nop
 800cb1c:	bf00      	nop
 800cb1e:	e7fd      	b.n	800cb1c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00b      	beq.n	800cb40 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	61fb      	str	r3, [r7, #28]
}
 800cb3a:	bf00      	nop
 800cb3c:	bf00      	nop
 800cb3e:	e7fd      	b.n	800cb3c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d103      	bne.n	800cb50 <xQueueGiveFromISR+0x5c>
 800cb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d101      	bne.n	800cb54 <xQueueGiveFromISR+0x60>
 800cb50:	2301      	movs	r3, #1
 800cb52:	e000      	b.n	800cb56 <xQueueGiveFromISR+0x62>
 800cb54:	2300      	movs	r3, #0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10b      	bne.n	800cb72 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	61bb      	str	r3, [r7, #24]
}
 800cb6c:	bf00      	nop
 800cb6e:	bf00      	nop
 800cb70:	e7fd      	b.n	800cb6e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb72:	f002 fb19 	bl	800f1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800cb76:	f3ef 8211 	mrs	r2, BASEPRI
 800cb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	617a      	str	r2, [r7, #20]
 800cb8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cb8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb96:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d22b      	bcs.n	800cbfa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbae:	1c5a      	adds	r2, r3, #1
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cbb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbbc:	d112      	bne.n	800cbe4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d016      	beq.n	800cbf4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc8:	3324      	adds	r3, #36	@ 0x24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f001 f9cc 	bl	800df68 <xTaskRemoveFromEventList>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00e      	beq.n	800cbf4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00b      	beq.n	800cbf4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	601a      	str	r2, [r3, #0]
 800cbe2:	e007      	b.n	800cbf4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	b25a      	sxtb	r2, r3
 800cbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbf8:	e001      	b.n	800cbfe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f383 8811 	msr	BASEPRI, r3
}
 800cc08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3738      	adds	r7, #56	@ 0x38
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b08c      	sub	sp, #48	@ 0x30
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc20:	2300      	movs	r3, #0
 800cc22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10b      	bne.n	800cc46 <xQueueReceive+0x32>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	623b      	str	r3, [r7, #32]
}
 800cc40:	bf00      	nop
 800cc42:	bf00      	nop
 800cc44:	e7fd      	b.n	800cc42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d103      	bne.n	800cc54 <xQueueReceive+0x40>
 800cc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <xQueueReceive+0x44>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <xQueueReceive+0x46>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10b      	bne.n	800cc76 <xQueueReceive+0x62>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	61fb      	str	r3, [r7, #28]
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	e7fd      	b.n	800cc72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc76:	f001 fb4d 	bl	800e314 <xTaskGetSchedulerState>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d102      	bne.n	800cc86 <xQueueReceive+0x72>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <xQueueReceive+0x76>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e000      	b.n	800cc8c <xQueueReceive+0x78>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10b      	bne.n	800cca8 <xQueueReceive+0x94>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	61bb      	str	r3, [r7, #24]
}
 800cca2:	bf00      	nop
 800cca4:	bf00      	nop
 800cca6:	e7fd      	b.n	800cca4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cca8:	f002 f99e 	bl	800efe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d01f      	beq.n	800ccf8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccb8:	68b9      	ldr	r1, [r7, #8]
 800ccba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccbc:	f000 fb02 	bl	800d2c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	1e5a      	subs	r2, r3, #1
 800ccc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00f      	beq.n	800ccf0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd2:	3310      	adds	r3, #16
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f001 f947 	bl	800df68 <xTaskRemoveFromEventList>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d007      	beq.n	800ccf0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cce0:	4b3c      	ldr	r3, [pc, #240]	@ (800cdd4 <xQueueReceive+0x1c0>)
 800cce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ccf0:	f002 f9ac 	bl	800f04c <vPortExitCritical>
				return pdPASS;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e069      	b.n	800cdcc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d103      	bne.n	800cd06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccfe:	f002 f9a5 	bl	800f04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd02:	2300      	movs	r3, #0
 800cd04:	e062      	b.n	800cdcc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d106      	bne.n	800cd1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd0c:	f107 0310 	add.w	r3, r7, #16
 800cd10:	4618      	mov	r0, r3
 800cd12:	f001 f98d 	bl	800e030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd16:	2301      	movs	r3, #1
 800cd18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd1a:	f002 f997 	bl	800f04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd1e:	f000 fee3 	bl	800dae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd22:	f002 f961 	bl	800efe8 <vPortEnterCritical>
 800cd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd2c:	b25b      	sxtb	r3, r3
 800cd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd32:	d103      	bne.n	800cd3c <xQueueReceive+0x128>
 800cd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd42:	b25b      	sxtb	r3, r3
 800cd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd48:	d103      	bne.n	800cd52 <xQueueReceive+0x13e>
 800cd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd52:	f002 f97b 	bl	800f04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd56:	1d3a      	adds	r2, r7, #4
 800cd58:	f107 0310 	add.w	r3, r7, #16
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f001 f97c 	bl	800e05c <xTaskCheckForTimeOut>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d123      	bne.n	800cdb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd6c:	f000 fb22 	bl	800d3b4 <prvIsQueueEmpty>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d017      	beq.n	800cda6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd78:	3324      	adds	r3, #36	@ 0x24
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	4611      	mov	r1, r2
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f001 f8a0 	bl	800dec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd86:	f000 fac3 	bl	800d310 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd8a:	f000 febb 	bl	800db04 <xTaskResumeAll>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d189      	bne.n	800cca8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cd94:	4b0f      	ldr	r3, [pc, #60]	@ (800cdd4 <xQueueReceive+0x1c0>)
 800cd96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	e780      	b.n	800cca8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cda6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cda8:	f000 fab2 	bl	800d310 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdac:	f000 feaa 	bl	800db04 <xTaskResumeAll>
 800cdb0:	e77a      	b.n	800cca8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cdb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdb4:	f000 faac 	bl	800d310 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdb8:	f000 fea4 	bl	800db04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdbe:	f000 faf9 	bl	800d3b4 <prvIsQueueEmpty>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f43f af6f 	beq.w	800cca8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cdca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3730      	adds	r7, #48	@ 0x30
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b08e      	sub	sp, #56	@ 0x38
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cde2:	2300      	movs	r3, #0
 800cde4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cdea:	2300      	movs	r3, #0
 800cdec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10b      	bne.n	800ce0c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	623b      	str	r3, [r7, #32]
}
 800ce06:	bf00      	nop
 800ce08:	bf00      	nop
 800ce0a:	e7fd      	b.n	800ce08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00b      	beq.n	800ce2c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ce14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	61fb      	str	r3, [r7, #28]
}
 800ce26:	bf00      	nop
 800ce28:	bf00      	nop
 800ce2a:	e7fd      	b.n	800ce28 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce2c:	f001 fa72 	bl	800e314 <xTaskGetSchedulerState>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d102      	bne.n	800ce3c <xQueueSemaphoreTake+0x64>
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d101      	bne.n	800ce40 <xQueueSemaphoreTake+0x68>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e000      	b.n	800ce42 <xQueueSemaphoreTake+0x6a>
 800ce40:	2300      	movs	r3, #0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10b      	bne.n	800ce5e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ce46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4a:	f383 8811 	msr	BASEPRI, r3
 800ce4e:	f3bf 8f6f 	isb	sy
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	61bb      	str	r3, [r7, #24]
}
 800ce58:	bf00      	nop
 800ce5a:	bf00      	nop
 800ce5c:	e7fd      	b.n	800ce5a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce5e:	f002 f8c3 	bl	800efe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ce62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce66:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d024      	beq.n	800ceb8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	1e5a      	subs	r2, r3, #1
 800ce72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce74:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d104      	bne.n	800ce88 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ce7e:	f001 fbc3 	bl	800e608 <pvTaskIncrementMutexHeldCount>
 800ce82:	4602      	mov	r2, r0
 800ce84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00f      	beq.n	800ceb0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce92:	3310      	adds	r3, #16
 800ce94:	4618      	mov	r0, r3
 800ce96:	f001 f867 	bl	800df68 <xTaskRemoveFromEventList>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d007      	beq.n	800ceb0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cea0:	4b54      	ldr	r3, [pc, #336]	@ (800cff4 <xQueueSemaphoreTake+0x21c>)
 800cea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ceb0:	f002 f8cc 	bl	800f04c <vPortExitCritical>
				return pdPASS;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e098      	b.n	800cfea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d112      	bne.n	800cee4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00b      	beq.n	800cedc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	617b      	str	r3, [r7, #20]
}
 800ced6:	bf00      	nop
 800ced8:	bf00      	nop
 800ceda:	e7fd      	b.n	800ced8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cedc:	f002 f8b6 	bl	800f04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cee0:	2300      	movs	r3, #0
 800cee2:	e082      	b.n	800cfea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d106      	bne.n	800cef8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ceea:	f107 030c 	add.w	r3, r7, #12
 800ceee:	4618      	mov	r0, r3
 800cef0:	f001 f89e 	bl	800e030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cef4:	2301      	movs	r3, #1
 800cef6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cef8:	f002 f8a8 	bl	800f04c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cefc:	f000 fdf4 	bl	800dae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf00:	f002 f872 	bl	800efe8 <vPortEnterCritical>
 800cf04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf0a:	b25b      	sxtb	r3, r3
 800cf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf10:	d103      	bne.n	800cf1a <xQueueSemaphoreTake+0x142>
 800cf12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf14:	2200      	movs	r2, #0
 800cf16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf20:	b25b      	sxtb	r3, r3
 800cf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf26:	d103      	bne.n	800cf30 <xQueueSemaphoreTake+0x158>
 800cf28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf30:	f002 f88c 	bl	800f04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf34:	463a      	mov	r2, r7
 800cf36:	f107 030c 	add.w	r3, r7, #12
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f001 f88d 	bl	800e05c <xTaskCheckForTimeOut>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d132      	bne.n	800cfae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf4a:	f000 fa33 	bl	800d3b4 <prvIsQueueEmpty>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d026      	beq.n	800cfa2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d109      	bne.n	800cf70 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cf5c:	f002 f844 	bl	800efe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f001 f9f3 	bl	800e350 <xTaskPriorityInherit>
 800cf6a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cf6c:	f002 f86e 	bl	800f04c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf72:	3324      	adds	r3, #36	@ 0x24
 800cf74:	683a      	ldr	r2, [r7, #0]
 800cf76:	4611      	mov	r1, r2
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 ffa3 	bl	800dec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf80:	f000 f9c6 	bl	800d310 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf84:	f000 fdbe 	bl	800db04 <xTaskResumeAll>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f47f af67 	bne.w	800ce5e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cf90:	4b18      	ldr	r3, [pc, #96]	@ (800cff4 <xQueueSemaphoreTake+0x21c>)
 800cf92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	e75d      	b.n	800ce5e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cfa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfa4:	f000 f9b4 	bl	800d310 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfa8:	f000 fdac 	bl	800db04 <xTaskResumeAll>
 800cfac:	e757      	b.n	800ce5e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cfae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfb0:	f000 f9ae 	bl	800d310 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfb4:	f000 fda6 	bl	800db04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfba:	f000 f9fb 	bl	800d3b4 <prvIsQueueEmpty>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f43f af4c 	beq.w	800ce5e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00d      	beq.n	800cfe8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cfcc:	f002 f80c 	bl	800efe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cfd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfd2:	f000 f8f5 	bl	800d1c0 <prvGetDisinheritPriorityAfterTimeout>
 800cfd6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f001 fa8e 	bl	800e500 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cfe4:	f002 f832 	bl	800f04c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3738      	adds	r7, #56	@ 0x38
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	e000ed04 	.word	0xe000ed04

0800cff8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08e      	sub	sp, #56	@ 0x38
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10b      	bne.n	800d026 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	623b      	str	r3, [r7, #32]
}
 800d020:	bf00      	nop
 800d022:	bf00      	nop
 800d024:	e7fd      	b.n	800d022 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d103      	bne.n	800d034 <xQueueReceiveFromISR+0x3c>
 800d02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d030:	2b00      	cmp	r3, #0
 800d032:	d101      	bne.n	800d038 <xQueueReceiveFromISR+0x40>
 800d034:	2301      	movs	r3, #1
 800d036:	e000      	b.n	800d03a <xQueueReceiveFromISR+0x42>
 800d038:	2300      	movs	r3, #0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10b      	bne.n	800d056 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	61fb      	str	r3, [r7, #28]
}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	e7fd      	b.n	800d052 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d056:	f002 f8a7 	bl	800f1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d05a:	f3ef 8211 	mrs	r2, BASEPRI
 800d05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	61ba      	str	r2, [r7, #24]
 800d070:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d072:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d074:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d07a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d02f      	beq.n	800d0e2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d08c:	68b9      	ldr	r1, [r7, #8]
 800d08e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d090:	f000 f918 	bl	800d2c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d096:	1e5a      	subs	r2, r3, #1
 800d098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d09c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a4:	d112      	bne.n	800d0cc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d016      	beq.n	800d0dc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b0:	3310      	adds	r3, #16
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 ff58 	bl	800df68 <xTaskRemoveFromEventList>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00e      	beq.n	800d0dc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00b      	beq.n	800d0dc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	601a      	str	r2, [r3, #0]
 800d0ca:	e007      	b.n	800d0dc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	b25a      	sxtb	r2, r3
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0e0:	e001      	b.n	800d0e6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	f383 8811 	msr	BASEPRI, r3
}
 800d0f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3738      	adds	r7, #56	@ 0x38
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10b      	bne.n	800d122 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	60bb      	str	r3, [r7, #8]
}
 800d11c:	bf00      	nop
 800d11e:	bf00      	nop
 800d120:	e7fd      	b.n	800d11e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d122:	f001 ff61 	bl	800efe8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d12a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d12c:	f001 ff8e 	bl	800f04c <vPortExitCritical>

	return uxReturn;
 800d130:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d13a:	b480      	push	{r7}
 800d13c:	b087      	sub	sp, #28
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10b      	bne.n	800d164 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800d14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d150:	f383 8811 	msr	BASEPRI, r3
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	60fb      	str	r3, [r7, #12]
}
 800d15e:	bf00      	nop
 800d160:	bf00      	nop
 800d162:	e7fd      	b.n	800d160 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d168:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d16a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d16c:	4618      	mov	r0, r3
 800d16e:	371c      	adds	r7, #28
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10b      	bne.n	800d1a2 <vQueueDelete+0x2a>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	60bb      	str	r3, [r7, #8]
}
 800d19c:	bf00      	nop
 800d19e:	bf00      	nop
 800d1a0:	e7fd      	b.n	800d19e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f000 f95e 	bl	800d464 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d102      	bne.n	800d1b8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f002 f908 	bl	800f3c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d1b8:	bf00      	nop
 800d1ba:	3710      	adds	r7, #16
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d006      	beq.n	800d1de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d1da:	60fb      	str	r3, [r7, #12]
 800d1dc:	e001      	b.n	800d1e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
	}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d204:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10d      	bne.n	800d22a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d14d      	bne.n	800d2b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f001 f900 	bl	800e420 <xTaskPriorityDisinherit>
 800d220:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	609a      	str	r2, [r3, #8]
 800d228:	e043      	b.n	800d2b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d119      	bne.n	800d264 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6858      	ldr	r0, [r3, #4]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d238:	461a      	mov	r2, r3
 800d23a:	68b9      	ldr	r1, [r7, #8]
 800d23c:	f002 fa6e 	bl	800f71c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d248:	441a      	add	r2, r3
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	685a      	ldr	r2, [r3, #4]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	429a      	cmp	r2, r3
 800d258:	d32b      	bcc.n	800d2b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	605a      	str	r2, [r3, #4]
 800d262:	e026      	b.n	800d2b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	68d8      	ldr	r0, [r3, #12]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d26c:	461a      	mov	r2, r3
 800d26e:	68b9      	ldr	r1, [r7, #8]
 800d270:	f002 fa54 	bl	800f71c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	68da      	ldr	r2, [r3, #12]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d27c:	425b      	negs	r3, r3
 800d27e:	441a      	add	r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	68da      	ldr	r2, [r3, #12]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d207      	bcs.n	800d2a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	689a      	ldr	r2, [r3, #8]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d298:	425b      	negs	r3, r3
 800d29a:	441a      	add	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d105      	bne.n	800d2b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d2ba:	697b      	ldr	r3, [r7, #20]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d018      	beq.n	800d308 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68da      	ldr	r2, [r3, #12]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2de:	441a      	add	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	68da      	ldr	r2, [r3, #12]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d303      	bcc.n	800d2f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	68d9      	ldr	r1, [r3, #12]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d300:	461a      	mov	r2, r3
 800d302:	6838      	ldr	r0, [r7, #0]
 800d304:	f002 fa0a 	bl	800f71c <memcpy>
	}
}
 800d308:	bf00      	nop
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d318:	f001 fe66 	bl	800efe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d322:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d324:	e011      	b.n	800d34a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d012      	beq.n	800d354 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3324      	adds	r3, #36	@ 0x24
 800d332:	4618      	mov	r0, r3
 800d334:	f000 fe18 	bl	800df68 <xTaskRemoveFromEventList>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d33e:	f000 fef1 	bl	800e124 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d342:	7bfb      	ldrb	r3, [r7, #15]
 800d344:	3b01      	subs	r3, #1
 800d346:	b2db      	uxtb	r3, r3
 800d348:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	dce9      	bgt.n	800d326 <prvUnlockQueue+0x16>
 800d352:	e000      	b.n	800d356 <prvUnlockQueue+0x46>
					break;
 800d354:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	22ff      	movs	r2, #255	@ 0xff
 800d35a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d35e:	f001 fe75 	bl	800f04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d362:	f001 fe41 	bl	800efe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d36c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d36e:	e011      	b.n	800d394 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	691b      	ldr	r3, [r3, #16]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d012      	beq.n	800d39e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	3310      	adds	r3, #16
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 fdf3 	bl	800df68 <xTaskRemoveFromEventList>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d388:	f000 fecc 	bl	800e124 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d38c:	7bbb      	ldrb	r3, [r7, #14]
 800d38e:	3b01      	subs	r3, #1
 800d390:	b2db      	uxtb	r3, r3
 800d392:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dce9      	bgt.n	800d370 <prvUnlockQueue+0x60>
 800d39c:	e000      	b.n	800d3a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d39e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	22ff      	movs	r2, #255	@ 0xff
 800d3a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d3a8:	f001 fe50 	bl	800f04c <vPortExitCritical>
}
 800d3ac:	bf00      	nop
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3bc:	f001 fe14 	bl	800efe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	e001      	b.n	800d3d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3d2:	f001 fe3b 	bl	800f04c <vPortExitCritical>

	return xReturn;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3e8:	f001 fdfe 	bl	800efe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d102      	bne.n	800d3fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	60fb      	str	r3, [r7, #12]
 800d3fc:	e001      	b.n	800d402 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d402:	f001 fe23 	bl	800f04c <vPortExitCritical>

	return xReturn;
 800d406:	68fb      	ldr	r3, [r7, #12]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d41a:	2300      	movs	r3, #0
 800d41c:	60fb      	str	r3, [r7, #12]
 800d41e:	e014      	b.n	800d44a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d420:	4a0f      	ldr	r2, [pc, #60]	@ (800d460 <vQueueAddToRegistry+0x50>)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10b      	bne.n	800d444 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d42c:	490c      	ldr	r1, [pc, #48]	@ (800d460 <vQueueAddToRegistry+0x50>)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d436:	4a0a      	ldr	r2, [pc, #40]	@ (800d460 <vQueueAddToRegistry+0x50>)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	4413      	add	r3, r2
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d442:	e006      	b.n	800d452 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	3301      	adds	r3, #1
 800d448:	60fb      	str	r3, [r7, #12]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2b07      	cmp	r3, #7
 800d44e:	d9e7      	bls.n	800d420 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d450:	bf00      	nop
 800d452:	bf00      	nop
 800d454:	3714      	adds	r7, #20
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	20000c64 	.word	0x20000c64

0800d464 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d46c:	2300      	movs	r3, #0
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	e016      	b.n	800d4a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d472:	4a10      	ldr	r2, [pc, #64]	@ (800d4b4 <vQueueUnregisterQueue+0x50>)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	4413      	add	r3, r2
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d10b      	bne.n	800d49a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d482:	4a0c      	ldr	r2, [pc, #48]	@ (800d4b4 <vQueueUnregisterQueue+0x50>)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2100      	movs	r1, #0
 800d488:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d48c:	4a09      	ldr	r2, [pc, #36]	@ (800d4b4 <vQueueUnregisterQueue+0x50>)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	00db      	lsls	r3, r3, #3
 800d492:	4413      	add	r3, r2
 800d494:	2200      	movs	r2, #0
 800d496:	605a      	str	r2, [r3, #4]
				break;
 800d498:	e006      	b.n	800d4a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	3301      	adds	r3, #1
 800d49e:	60fb      	str	r3, [r7, #12]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b07      	cmp	r3, #7
 800d4a4:	d9e5      	bls.n	800d472 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d4a6:	bf00      	nop
 800d4a8:	bf00      	nop
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr
 800d4b4:	20000c64 	.word	0x20000c64

0800d4b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4c8:	f001 fd8e 	bl	800efe8 <vPortEnterCritical>
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4d2:	b25b      	sxtb	r3, r3
 800d4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d8:	d103      	bne.n	800d4e2 <vQueueWaitForMessageRestricted+0x2a>
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4e8:	b25b      	sxtb	r3, r3
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d103      	bne.n	800d4f8 <vQueueWaitForMessageRestricted+0x40>
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4f8:	f001 fda8 	bl	800f04c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	3324      	adds	r3, #36	@ 0x24
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	68b9      	ldr	r1, [r7, #8]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 fcff 	bl	800df10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d512:	6978      	ldr	r0, [r7, #20]
 800d514:	f7ff fefc 	bl	800d310 <prvUnlockQueue>
	}
 800d518:	bf00      	nop
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d520:	b580      	push	{r7, lr}
 800d522:	b08e      	sub	sp, #56	@ 0x38
 800d524:	af04      	add	r7, sp, #16
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10b      	bne.n	800d54c <xTaskCreateStatic+0x2c>
	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	623b      	str	r3, [r7, #32]
}
 800d546:	bf00      	nop
 800d548:	bf00      	nop
 800d54a:	e7fd      	b.n	800d548 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10b      	bne.n	800d56a <xTaskCreateStatic+0x4a>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	61fb      	str	r3, [r7, #28]
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop
 800d568:	e7fd      	b.n	800d566 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d56a:	23a8      	movs	r3, #168	@ 0xa8
 800d56c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	2ba8      	cmp	r3, #168	@ 0xa8
 800d572:	d00b      	beq.n	800d58c <xTaskCreateStatic+0x6c>
	__asm volatile
 800d574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	61bb      	str	r3, [r7, #24]
}
 800d586:	bf00      	nop
 800d588:	bf00      	nop
 800d58a:	e7fd      	b.n	800d588 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d58c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d590:	2b00      	cmp	r3, #0
 800d592:	d01e      	beq.n	800d5d2 <xTaskCreateStatic+0xb2>
 800d594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d596:	2b00      	cmp	r3, #0
 800d598:	d01b      	beq.n	800d5d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9303      	str	r3, [sp, #12]
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	9302      	str	r3, [sp, #8]
 800d5b4:	f107 0314 	add.w	r3, r7, #20
 800d5b8:	9301      	str	r3, [sp, #4]
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5bc:	9300      	str	r3, [sp, #0]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 f851 	bl	800d66c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5cc:	f000 f8f6 	bl	800d7bc <prvAddNewTaskToReadyList>
 800d5d0:	e001      	b.n	800d5d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5d6:	697b      	ldr	r3, [r7, #20]
	}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3728      	adds	r7, #40	@ 0x28
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08c      	sub	sp, #48	@ 0x30
 800d5e4:	af04      	add	r7, sp, #16
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	603b      	str	r3, [r7, #0]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5f0:	88fb      	ldrh	r3, [r7, #6]
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f001 fe19 	bl	800f22c <pvPortMalloc>
 800d5fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00e      	beq.n	800d620 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d602:	20a8      	movs	r0, #168	@ 0xa8
 800d604:	f001 fe12 	bl	800f22c <pvPortMalloc>
 800d608:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d003      	beq.n	800d618 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	697a      	ldr	r2, [r7, #20]
 800d614:	631a      	str	r2, [r3, #48]	@ 0x30
 800d616:	e005      	b.n	800d624 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d618:	6978      	ldr	r0, [r7, #20]
 800d61a:	f001 fed5 	bl	800f3c8 <vPortFree>
 800d61e:	e001      	b.n	800d624 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d620:	2300      	movs	r3, #0
 800d622:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d017      	beq.n	800d65a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d632:	88fa      	ldrh	r2, [r7, #6]
 800d634:	2300      	movs	r3, #0
 800d636:	9303      	str	r3, [sp, #12]
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	9302      	str	r3, [sp, #8]
 800d63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d63e:	9301      	str	r3, [sp, #4]
 800d640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	68b9      	ldr	r1, [r7, #8]
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 f80f 	bl	800d66c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d64e:	69f8      	ldr	r0, [r7, #28]
 800d650:	f000 f8b4 	bl	800d7bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d654:	2301      	movs	r3, #1
 800d656:	61bb      	str	r3, [r7, #24]
 800d658:	e002      	b.n	800d660 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d65a:	f04f 33ff 	mov.w	r3, #4294967295
 800d65e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d660:	69bb      	ldr	r3, [r7, #24]
	}
 800d662:	4618      	mov	r0, r3
 800d664:	3720      	adds	r7, #32
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b088      	sub	sp, #32
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
 800d678:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	461a      	mov	r2, r3
 800d684:	21a5      	movs	r1, #165	@ 0xa5
 800d686:	f001 ffbf 	bl	800f608 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d694:	3b01      	subs	r3, #1
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	f023 0307 	bic.w	r3, r3, #7
 800d6a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	f003 0307 	and.w	r3, r3, #7
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00b      	beq.n	800d6c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	617b      	str	r3, [r7, #20]
}
 800d6c0:	bf00      	nop
 800d6c2:	bf00      	nop
 800d6c4:	e7fd      	b.n	800d6c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d01f      	beq.n	800d70c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	61fb      	str	r3, [r7, #28]
 800d6d0:	e012      	b.n	800d6f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	7819      	ldrb	r1, [r3, #0]
 800d6da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	4413      	add	r3, r2
 800d6e0:	3334      	adds	r3, #52	@ 0x34
 800d6e2:	460a      	mov	r2, r1
 800d6e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d006      	beq.n	800d700 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	61fb      	str	r3, [r7, #28]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	2b0f      	cmp	r3, #15
 800d6fc:	d9e9      	bls.n	800d6d2 <prvInitialiseNewTask+0x66>
 800d6fe:	e000      	b.n	800d702 <prvInitialiseNewTask+0x96>
			{
				break;
 800d700:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d704:	2200      	movs	r2, #0
 800d706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d70a:	e003      	b.n	800d714 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d716:	2b37      	cmp	r3, #55	@ 0x37
 800d718:	d901      	bls.n	800d71e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d71a:	2337      	movs	r3, #55	@ 0x37
 800d71c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d722:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d728:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d72c:	2200      	movs	r2, #0
 800d72e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d732:	3304      	adds	r3, #4
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe fd3d 	bl	800c1b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73c:	3318      	adds	r3, #24
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fe fd38 	bl	800c1b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d748:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d752:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d758:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75c:	2200      	movs	r2, #0
 800d75e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d764:	2200      	movs	r2, #0
 800d766:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76c:	3354      	adds	r3, #84	@ 0x54
 800d76e:	224c      	movs	r2, #76	@ 0x4c
 800d770:	2100      	movs	r1, #0
 800d772:	4618      	mov	r0, r3
 800d774:	f001 ff48 	bl	800f608 <memset>
 800d778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77a:	4a0d      	ldr	r2, [pc, #52]	@ (800d7b0 <prvInitialiseNewTask+0x144>)
 800d77c:	659a      	str	r2, [r3, #88]	@ 0x58
 800d77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d780:	4a0c      	ldr	r2, [pc, #48]	@ (800d7b4 <prvInitialiseNewTask+0x148>)
 800d782:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d786:	4a0c      	ldr	r2, [pc, #48]	@ (800d7b8 <prvInitialiseNewTask+0x14c>)
 800d788:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	68f9      	ldr	r1, [r7, #12]
 800d78e:	69b8      	ldr	r0, [r7, #24]
 800d790:	f001 fafc 	bl	800ed8c <pxPortInitialiseStack>
 800d794:	4602      	mov	r2, r0
 800d796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d798:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7a6:	bf00      	nop
 800d7a8:	3720      	adds	r7, #32
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	20003238 	.word	0x20003238
 800d7b4:	200032a0 	.word	0x200032a0
 800d7b8:	20003308 	.word	0x20003308

0800d7bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7c4:	f001 fc10 	bl	800efe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7c8:	4b2d      	ldr	r3, [pc, #180]	@ (800d880 <prvAddNewTaskToReadyList+0xc4>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	4a2c      	ldr	r2, [pc, #176]	@ (800d880 <prvAddNewTaskToReadyList+0xc4>)
 800d7d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7d2:	4b2c      	ldr	r3, [pc, #176]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d109      	bne.n	800d7ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7da:	4a2a      	ldr	r2, [pc, #168]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7e0:	4b27      	ldr	r3, [pc, #156]	@ (800d880 <prvAddNewTaskToReadyList+0xc4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d110      	bne.n	800d80a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7e8:	f000 fcc0 	bl	800e16c <prvInitialiseTaskLists>
 800d7ec:	e00d      	b.n	800d80a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7ee:	4b26      	ldr	r3, [pc, #152]	@ (800d888 <prvAddNewTaskToReadyList+0xcc>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d109      	bne.n	800d80a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7f6:	4b23      	ldr	r3, [pc, #140]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d800:	429a      	cmp	r2, r3
 800d802:	d802      	bhi.n	800d80a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d804:	4a1f      	ldr	r2, [pc, #124]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d80a:	4b20      	ldr	r3, [pc, #128]	@ (800d88c <prvAddNewTaskToReadyList+0xd0>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3301      	adds	r3, #1
 800d810:	4a1e      	ldr	r2, [pc, #120]	@ (800d88c <prvAddNewTaskToReadyList+0xd0>)
 800d812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d814:	4b1d      	ldr	r3, [pc, #116]	@ (800d88c <prvAddNewTaskToReadyList+0xd0>)
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d820:	4b1b      	ldr	r3, [pc, #108]	@ (800d890 <prvAddNewTaskToReadyList+0xd4>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	429a      	cmp	r2, r3
 800d826:	d903      	bls.n	800d830 <prvAddNewTaskToReadyList+0x74>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82c:	4a18      	ldr	r2, [pc, #96]	@ (800d890 <prvAddNewTaskToReadyList+0xd4>)
 800d82e:	6013      	str	r3, [r2, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d834:	4613      	mov	r3, r2
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4413      	add	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4a15      	ldr	r2, [pc, #84]	@ (800d894 <prvAddNewTaskToReadyList+0xd8>)
 800d83e:	441a      	add	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	3304      	adds	r3, #4
 800d844:	4619      	mov	r1, r3
 800d846:	4610      	mov	r0, r2
 800d848:	f7fe fcc1 	bl	800c1ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d84c:	f001 fbfe 	bl	800f04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d850:	4b0d      	ldr	r3, [pc, #52]	@ (800d888 <prvAddNewTaskToReadyList+0xcc>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00e      	beq.n	800d876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d858:	4b0a      	ldr	r3, [pc, #40]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d862:	429a      	cmp	r2, r3
 800d864:	d207      	bcs.n	800d876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d866:	4b0c      	ldr	r3, [pc, #48]	@ (800d898 <prvAddNewTaskToReadyList+0xdc>)
 800d868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d86c:	601a      	str	r2, [r3, #0]
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d876:	bf00      	nop
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	20001178 	.word	0x20001178
 800d884:	20000ca4 	.word	0x20000ca4
 800d888:	20001184 	.word	0x20001184
 800d88c:	20001194 	.word	0x20001194
 800d890:	20001180 	.word	0x20001180
 800d894:	20000ca8 	.word	0x20000ca8
 800d898:	e000ed04 	.word	0xe000ed04

0800d89c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b08a      	sub	sp, #40	@ 0x28
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10b      	bne.n	800d8c8 <vTaskDelayUntil+0x2c>
	__asm volatile
 800d8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	617b      	str	r3, [r7, #20]
}
 800d8c2:	bf00      	nop
 800d8c4:	bf00      	nop
 800d8c6:	e7fd      	b.n	800d8c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10b      	bne.n	800d8e6 <vTaskDelayUntil+0x4a>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	613b      	str	r3, [r7, #16]
}
 800d8e0:	bf00      	nop
 800d8e2:	bf00      	nop
 800d8e4:	e7fd      	b.n	800d8e2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800d8e6:	4b2a      	ldr	r3, [pc, #168]	@ (800d990 <vTaskDelayUntil+0xf4>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00b      	beq.n	800d906 <vTaskDelayUntil+0x6a>
	__asm volatile
 800d8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	60fb      	str	r3, [r7, #12]
}
 800d900:	bf00      	nop
 800d902:	bf00      	nop
 800d904:	e7fd      	b.n	800d902 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800d906:	f000 f8ef 	bl	800dae8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d90a:	4b22      	ldr	r3, [pc, #136]	@ (800d994 <vTaskDelayUntil+0xf8>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	683a      	ldr	r2, [r7, #0]
 800d916:	4413      	add	r3, r2
 800d918:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6a3a      	ldr	r2, [r7, #32]
 800d920:	429a      	cmp	r2, r3
 800d922:	d20b      	bcs.n	800d93c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	69fa      	ldr	r2, [r7, #28]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d211      	bcs.n	800d952 <vTaskDelayUntil+0xb6>
 800d92e:	69fa      	ldr	r2, [r7, #28]
 800d930:	6a3b      	ldr	r3, [r7, #32]
 800d932:	429a      	cmp	r2, r3
 800d934:	d90d      	bls.n	800d952 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d936:	2301      	movs	r3, #1
 800d938:	627b      	str	r3, [r7, #36]	@ 0x24
 800d93a:	e00a      	b.n	800d952 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	69fa      	ldr	r2, [r7, #28]
 800d942:	429a      	cmp	r2, r3
 800d944:	d303      	bcc.n	800d94e <vTaskDelayUntil+0xb2>
 800d946:	69fa      	ldr	r2, [r7, #28]
 800d948:	6a3b      	ldr	r3, [r7, #32]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d901      	bls.n	800d952 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d94e:	2301      	movs	r3, #1
 800d950:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	69fa      	ldr	r2, [r7, #28]
 800d956:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d006      	beq.n	800d96c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d95e:	69fa      	ldr	r2, [r7, #28]
 800d960:	6a3b      	ldr	r3, [r7, #32]
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	2100      	movs	r1, #0
 800d966:	4618      	mov	r0, r3
 800d968:	f000 fe62 	bl	800e630 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d96c:	f000 f8ca 	bl	800db04 <xTaskResumeAll>
 800d970:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d107      	bne.n	800d988 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800d978:	4b07      	ldr	r3, [pc, #28]	@ (800d998 <vTaskDelayUntil+0xfc>)
 800d97a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d988:	bf00      	nop
 800d98a:	3728      	adds	r7, #40	@ 0x28
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	200011a0 	.word	0x200011a0
 800d994:	2000117c 	.word	0x2000117c
 800d998:	e000ed04 	.word	0xe000ed04

0800d99c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d018      	beq.n	800d9e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d9ae:	4b14      	ldr	r3, [pc, #80]	@ (800da00 <vTaskDelay+0x64>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00b      	beq.n	800d9ce <vTaskDelay+0x32>
	__asm volatile
 800d9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ba:	f383 8811 	msr	BASEPRI, r3
 800d9be:	f3bf 8f6f 	isb	sy
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	60bb      	str	r3, [r7, #8]
}
 800d9c8:	bf00      	nop
 800d9ca:	bf00      	nop
 800d9cc:	e7fd      	b.n	800d9ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d9ce:	f000 f88b 	bl	800dae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fe2b 	bl	800e630 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d9da:	f000 f893 	bl	800db04 <xTaskResumeAll>
 800d9de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d107      	bne.n	800d9f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d9e6:	4b07      	ldr	r3, [pc, #28]	@ (800da04 <vTaskDelay+0x68>)
 800d9e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9f6:	bf00      	nop
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	200011a0 	.word	0x200011a0
 800da04:	e000ed04 	.word	0xe000ed04

0800da08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b08a      	sub	sp, #40	@ 0x28
 800da0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da0e:	2300      	movs	r3, #0
 800da10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da12:	2300      	movs	r3, #0
 800da14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da16:	463a      	mov	r2, r7
 800da18:	1d39      	adds	r1, r7, #4
 800da1a:	f107 0308 	add.w	r3, r7, #8
 800da1e:	4618      	mov	r0, r3
 800da20:	f7fe fb74 	bl	800c10c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	9202      	str	r2, [sp, #8]
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	2300      	movs	r3, #0
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	2300      	movs	r3, #0
 800da34:	460a      	mov	r2, r1
 800da36:	4924      	ldr	r1, [pc, #144]	@ (800dac8 <vTaskStartScheduler+0xc0>)
 800da38:	4824      	ldr	r0, [pc, #144]	@ (800dacc <vTaskStartScheduler+0xc4>)
 800da3a:	f7ff fd71 	bl	800d520 <xTaskCreateStatic>
 800da3e:	4603      	mov	r3, r0
 800da40:	4a23      	ldr	r2, [pc, #140]	@ (800dad0 <vTaskStartScheduler+0xc8>)
 800da42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da44:	4b22      	ldr	r3, [pc, #136]	@ (800dad0 <vTaskStartScheduler+0xc8>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da4c:	2301      	movs	r3, #1
 800da4e:	617b      	str	r3, [r7, #20]
 800da50:	e001      	b.n	800da56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da52:	2300      	movs	r3, #0
 800da54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d102      	bne.n	800da62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da5c:	f000 fe3c 	bl	800e6d8 <xTimerCreateTimerTask>
 800da60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d11b      	bne.n	800daa0 <vTaskStartScheduler+0x98>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	613b      	str	r3, [r7, #16]
}
 800da7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da7c:	4b15      	ldr	r3, [pc, #84]	@ (800dad4 <vTaskStartScheduler+0xcc>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3354      	adds	r3, #84	@ 0x54
 800da82:	4a15      	ldr	r2, [pc, #84]	@ (800dad8 <vTaskStartScheduler+0xd0>)
 800da84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da86:	4b15      	ldr	r3, [pc, #84]	@ (800dadc <vTaskStartScheduler+0xd4>)
 800da88:	f04f 32ff 	mov.w	r2, #4294967295
 800da8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da8e:	4b14      	ldr	r3, [pc, #80]	@ (800dae0 <vTaskStartScheduler+0xd8>)
 800da90:	2201      	movs	r2, #1
 800da92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da94:	4b13      	ldr	r3, [pc, #76]	@ (800dae4 <vTaskStartScheduler+0xdc>)
 800da96:	2200      	movs	r2, #0
 800da98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da9a:	f001 fa01 	bl	800eea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da9e:	e00f      	b.n	800dac0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa6:	d10b      	bne.n	800dac0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800daa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daac:	f383 8811 	msr	BASEPRI, r3
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	60fb      	str	r3, [r7, #12]
}
 800daba:	bf00      	nop
 800dabc:	bf00      	nop
 800dabe:	e7fd      	b.n	800dabc <vTaskStartScheduler+0xb4>
}
 800dac0:	bf00      	nop
 800dac2:	3718      	adds	r7, #24
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	0800fffc 	.word	0x0800fffc
 800dacc:	0800e13d 	.word	0x0800e13d
 800dad0:	2000119c 	.word	0x2000119c
 800dad4:	20000ca4 	.word	0x20000ca4
 800dad8:	20000010 	.word	0x20000010
 800dadc:	20001198 	.word	0x20001198
 800dae0:	20001184 	.word	0x20001184
 800dae4:	2000117c 	.word	0x2000117c

0800dae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dae8:	b480      	push	{r7}
 800daea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800daec:	4b04      	ldr	r3, [pc, #16]	@ (800db00 <vTaskSuspendAll+0x18>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	3301      	adds	r3, #1
 800daf2:	4a03      	ldr	r2, [pc, #12]	@ (800db00 <vTaskSuspendAll+0x18>)
 800daf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800daf6:	bf00      	nop
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr
 800db00:	200011a0 	.word	0x200011a0

0800db04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db0a:	2300      	movs	r3, #0
 800db0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db0e:	2300      	movs	r3, #0
 800db10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db12:	4b42      	ldr	r3, [pc, #264]	@ (800dc1c <xTaskResumeAll+0x118>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10b      	bne.n	800db32 <xTaskResumeAll+0x2e>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	603b      	str	r3, [r7, #0]
}
 800db2c:	bf00      	nop
 800db2e:	bf00      	nop
 800db30:	e7fd      	b.n	800db2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db32:	f001 fa59 	bl	800efe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db36:	4b39      	ldr	r3, [pc, #228]	@ (800dc1c <xTaskResumeAll+0x118>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	3b01      	subs	r3, #1
 800db3c:	4a37      	ldr	r2, [pc, #220]	@ (800dc1c <xTaskResumeAll+0x118>)
 800db3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db40:	4b36      	ldr	r3, [pc, #216]	@ (800dc1c <xTaskResumeAll+0x118>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d162      	bne.n	800dc0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db48:	4b35      	ldr	r3, [pc, #212]	@ (800dc20 <xTaskResumeAll+0x11c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d05e      	beq.n	800dc0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db50:	e02f      	b.n	800dbb2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db52:	4b34      	ldr	r3, [pc, #208]	@ (800dc24 <xTaskResumeAll+0x120>)
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	3318      	adds	r3, #24
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fe fb92 	bl	800c288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	3304      	adds	r3, #4
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fe fb8d 	bl	800c288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db72:	4b2d      	ldr	r3, [pc, #180]	@ (800dc28 <xTaskResumeAll+0x124>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d903      	bls.n	800db82 <xTaskResumeAll+0x7e>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7e:	4a2a      	ldr	r2, [pc, #168]	@ (800dc28 <xTaskResumeAll+0x124>)
 800db80:	6013      	str	r3, [r2, #0]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db86:	4613      	mov	r3, r2
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	4413      	add	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4a27      	ldr	r2, [pc, #156]	@ (800dc2c <xTaskResumeAll+0x128>)
 800db90:	441a      	add	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	3304      	adds	r3, #4
 800db96:	4619      	mov	r1, r3
 800db98:	4610      	mov	r0, r2
 800db9a:	f7fe fb18 	bl	800c1ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dba2:	4b23      	ldr	r3, [pc, #140]	@ (800dc30 <xTaskResumeAll+0x12c>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d302      	bcc.n	800dbb2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dbac:	4b21      	ldr	r3, [pc, #132]	@ (800dc34 <xTaskResumeAll+0x130>)
 800dbae:	2201      	movs	r2, #1
 800dbb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbb2:	4b1c      	ldr	r3, [pc, #112]	@ (800dc24 <xTaskResumeAll+0x120>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1cb      	bne.n	800db52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d001      	beq.n	800dbc4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dbc0:	f000 fb78 	bl	800e2b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dbc4:	4b1c      	ldr	r3, [pc, #112]	@ (800dc38 <xTaskResumeAll+0x134>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d010      	beq.n	800dbf2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dbd0:	f000 f858 	bl	800dc84 <xTaskIncrementTick>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d002      	beq.n	800dbe0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dbda:	4b16      	ldr	r3, [pc, #88]	@ (800dc34 <xTaskResumeAll+0x130>)
 800dbdc:	2201      	movs	r2, #1
 800dbde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f1      	bne.n	800dbd0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dbec:	4b12      	ldr	r3, [pc, #72]	@ (800dc38 <xTaskResumeAll+0x134>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dbf2:	4b10      	ldr	r3, [pc, #64]	@ (800dc34 <xTaskResumeAll+0x130>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d009      	beq.n	800dc0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dbfe:	4b0f      	ldr	r3, [pc, #60]	@ (800dc3c <xTaskResumeAll+0x138>)
 800dc00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc0e:	f001 fa1d 	bl	800f04c <vPortExitCritical>

	return xAlreadyYielded;
 800dc12:	68bb      	ldr	r3, [r7, #8]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3710      	adds	r7, #16
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	200011a0 	.word	0x200011a0
 800dc20:	20001178 	.word	0x20001178
 800dc24:	20001138 	.word	0x20001138
 800dc28:	20001180 	.word	0x20001180
 800dc2c:	20000ca8 	.word	0x20000ca8
 800dc30:	20000ca4 	.word	0x20000ca4
 800dc34:	2000118c 	.word	0x2000118c
 800dc38:	20001188 	.word	0x20001188
 800dc3c:	e000ed04 	.word	0xe000ed04

0800dc40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc46:	4b05      	ldr	r3, [pc, #20]	@ (800dc5c <xTaskGetTickCount+0x1c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc4c:	687b      	ldr	r3, [r7, #4]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	2000117c 	.word	0x2000117c

0800dc60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc66:	f001 fa9f 	bl	800f1a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dc6e:	4b04      	ldr	r3, [pc, #16]	@ (800dc80 <xTaskGetTickCountFromISR+0x20>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc74:	683b      	ldr	r3, [r7, #0]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	2000117c 	.word	0x2000117c

0800dc84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc8e:	4b4f      	ldr	r3, [pc, #316]	@ (800ddcc <xTaskIncrementTick+0x148>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f040 8090 	bne.w	800ddb8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc98:	4b4d      	ldr	r3, [pc, #308]	@ (800ddd0 <xTaskIncrementTick+0x14c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dca0:	4a4b      	ldr	r2, [pc, #300]	@ (800ddd0 <xTaskIncrementTick+0x14c>)
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d121      	bne.n	800dcf0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dcac:	4b49      	ldr	r3, [pc, #292]	@ (800ddd4 <xTaskIncrementTick+0x150>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00b      	beq.n	800dcce <xTaskIncrementTick+0x4a>
	__asm volatile
 800dcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	603b      	str	r3, [r7, #0]
}
 800dcc8:	bf00      	nop
 800dcca:	bf00      	nop
 800dccc:	e7fd      	b.n	800dcca <xTaskIncrementTick+0x46>
 800dcce:	4b41      	ldr	r3, [pc, #260]	@ (800ddd4 <xTaskIncrementTick+0x150>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	4b40      	ldr	r3, [pc, #256]	@ (800ddd8 <xTaskIncrementTick+0x154>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a3e      	ldr	r2, [pc, #248]	@ (800ddd4 <xTaskIncrementTick+0x150>)
 800dcda:	6013      	str	r3, [r2, #0]
 800dcdc:	4a3e      	ldr	r2, [pc, #248]	@ (800ddd8 <xTaskIncrementTick+0x154>)
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6013      	str	r3, [r2, #0]
 800dce2:	4b3e      	ldr	r3, [pc, #248]	@ (800dddc <xTaskIncrementTick+0x158>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	3301      	adds	r3, #1
 800dce8:	4a3c      	ldr	r2, [pc, #240]	@ (800dddc <xTaskIncrementTick+0x158>)
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	f000 fae2 	bl	800e2b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dcf0:	4b3b      	ldr	r3, [pc, #236]	@ (800dde0 <xTaskIncrementTick+0x15c>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d349      	bcc.n	800dd8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcfa:	4b36      	ldr	r3, [pc, #216]	@ (800ddd4 <xTaskIncrementTick+0x150>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d104      	bne.n	800dd0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd04:	4b36      	ldr	r3, [pc, #216]	@ (800dde0 <xTaskIncrementTick+0x15c>)
 800dd06:	f04f 32ff 	mov.w	r2, #4294967295
 800dd0a:	601a      	str	r2, [r3, #0]
					break;
 800dd0c:	e03f      	b.n	800dd8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd0e:	4b31      	ldr	r3, [pc, #196]	@ (800ddd4 <xTaskIncrementTick+0x150>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d203      	bcs.n	800dd2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd26:	4a2e      	ldr	r2, [pc, #184]	@ (800dde0 <xTaskIncrementTick+0x15c>)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd2c:	e02f      	b.n	800dd8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	3304      	adds	r3, #4
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe faa8 	bl	800c288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d004      	beq.n	800dd4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	3318      	adds	r3, #24
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fe fa9f 	bl	800c288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4e:	4b25      	ldr	r3, [pc, #148]	@ (800dde4 <xTaskIncrementTick+0x160>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d903      	bls.n	800dd5e <xTaskIncrementTick+0xda>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd5a:	4a22      	ldr	r2, [pc, #136]	@ (800dde4 <xTaskIncrementTick+0x160>)
 800dd5c:	6013      	str	r3, [r2, #0]
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd62:	4613      	mov	r3, r2
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	4413      	add	r3, r2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4a1f      	ldr	r2, [pc, #124]	@ (800dde8 <xTaskIncrementTick+0x164>)
 800dd6c:	441a      	add	r2, r3
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	3304      	adds	r3, #4
 800dd72:	4619      	mov	r1, r3
 800dd74:	4610      	mov	r0, r2
 800dd76:	f7fe fa2a 	bl	800c1ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd7e:	4b1b      	ldr	r3, [pc, #108]	@ (800ddec <xTaskIncrementTick+0x168>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d3b8      	bcc.n	800dcfa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd8c:	e7b5      	b.n	800dcfa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd8e:	4b17      	ldr	r3, [pc, #92]	@ (800ddec <xTaskIncrementTick+0x168>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd94:	4914      	ldr	r1, [pc, #80]	@ (800dde8 <xTaskIncrementTick+0x164>)
 800dd96:	4613      	mov	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4413      	add	r3, r2
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	440b      	add	r3, r1
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d901      	bls.n	800ddaa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dda6:	2301      	movs	r3, #1
 800dda8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ddaa:	4b11      	ldr	r3, [pc, #68]	@ (800ddf0 <xTaskIncrementTick+0x16c>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d007      	beq.n	800ddc2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	617b      	str	r3, [r7, #20]
 800ddb6:	e004      	b.n	800ddc2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ddb8:	4b0e      	ldr	r3, [pc, #56]	@ (800ddf4 <xTaskIncrementTick+0x170>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	4a0d      	ldr	r2, [pc, #52]	@ (800ddf4 <xTaskIncrementTick+0x170>)
 800ddc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ddc2:	697b      	ldr	r3, [r7, #20]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	200011a0 	.word	0x200011a0
 800ddd0:	2000117c 	.word	0x2000117c
 800ddd4:	20001130 	.word	0x20001130
 800ddd8:	20001134 	.word	0x20001134
 800dddc:	20001190 	.word	0x20001190
 800dde0:	20001198 	.word	0x20001198
 800dde4:	20001180 	.word	0x20001180
 800dde8:	20000ca8 	.word	0x20000ca8
 800ddec:	20000ca4 	.word	0x20000ca4
 800ddf0:	2000118c 	.word	0x2000118c
 800ddf4:	20001188 	.word	0x20001188

0800ddf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ddfe:	4b2b      	ldr	r3, [pc, #172]	@ (800deac <vTaskSwitchContext+0xb4>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de06:	4b2a      	ldr	r3, [pc, #168]	@ (800deb0 <vTaskSwitchContext+0xb8>)
 800de08:	2201      	movs	r2, #1
 800de0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de0c:	e047      	b.n	800de9e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800de0e:	4b28      	ldr	r3, [pc, #160]	@ (800deb0 <vTaskSwitchContext+0xb8>)
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de14:	4b27      	ldr	r3, [pc, #156]	@ (800deb4 <vTaskSwitchContext+0xbc>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	60fb      	str	r3, [r7, #12]
 800de1a:	e011      	b.n	800de40 <vTaskSwitchContext+0x48>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10b      	bne.n	800de3a <vTaskSwitchContext+0x42>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	607b      	str	r3, [r7, #4]
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop
 800de38:	e7fd      	b.n	800de36 <vTaskSwitchContext+0x3e>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	60fb      	str	r3, [r7, #12]
 800de40:	491d      	ldr	r1, [pc, #116]	@ (800deb8 <vTaskSwitchContext+0xc0>)
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	4613      	mov	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4413      	add	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	440b      	add	r3, r1
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d0e3      	beq.n	800de1c <vTaskSwitchContext+0x24>
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	4613      	mov	r3, r2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4a16      	ldr	r2, [pc, #88]	@ (800deb8 <vTaskSwitchContext+0xc0>)
 800de60:	4413      	add	r3, r2
 800de62:	60bb      	str	r3, [r7, #8]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	605a      	str	r2, [r3, #4]
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	3308      	adds	r3, #8
 800de76:	429a      	cmp	r2, r3
 800de78:	d104      	bne.n	800de84 <vTaskSwitchContext+0x8c>
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	685a      	ldr	r2, [r3, #4]
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	605a      	str	r2, [r3, #4]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	4a0c      	ldr	r2, [pc, #48]	@ (800debc <vTaskSwitchContext+0xc4>)
 800de8c:	6013      	str	r3, [r2, #0]
 800de8e:	4a09      	ldr	r2, [pc, #36]	@ (800deb4 <vTaskSwitchContext+0xbc>)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de94:	4b09      	ldr	r3, [pc, #36]	@ (800debc <vTaskSwitchContext+0xc4>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	3354      	adds	r3, #84	@ 0x54
 800de9a:	4a09      	ldr	r2, [pc, #36]	@ (800dec0 <vTaskSwitchContext+0xc8>)
 800de9c:	6013      	str	r3, [r2, #0]
}
 800de9e:	bf00      	nop
 800dea0:	3714      	adds	r7, #20
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop
 800deac:	200011a0 	.word	0x200011a0
 800deb0:	2000118c 	.word	0x2000118c
 800deb4:	20001180 	.word	0x20001180
 800deb8:	20000ca8 	.word	0x20000ca8
 800debc:	20000ca4 	.word	0x20000ca4
 800dec0:	20000010 	.word	0x20000010

0800dec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10b      	bne.n	800deec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ded4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded8:	f383 8811 	msr	BASEPRI, r3
 800dedc:	f3bf 8f6f 	isb	sy
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	60fb      	str	r3, [r7, #12]
}
 800dee6:	bf00      	nop
 800dee8:	bf00      	nop
 800deea:	e7fd      	b.n	800dee8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800deec:	4b07      	ldr	r3, [pc, #28]	@ (800df0c <vTaskPlaceOnEventList+0x48>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3318      	adds	r3, #24
 800def2:	4619      	mov	r1, r3
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7fe f98e 	bl	800c216 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800defa:	2101      	movs	r1, #1
 800defc:	6838      	ldr	r0, [r7, #0]
 800defe:	f000 fb97 	bl	800e630 <prvAddCurrentTaskToDelayedList>
}
 800df02:	bf00      	nop
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	20000ca4 	.word	0x20000ca4

0800df10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10b      	bne.n	800df3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	617b      	str	r3, [r7, #20]
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop
 800df38:	e7fd      	b.n	800df36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df3a:	4b0a      	ldr	r3, [pc, #40]	@ (800df64 <vTaskPlaceOnEventListRestricted+0x54>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	3318      	adds	r3, #24
 800df40:	4619      	mov	r1, r3
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f7fe f943 	bl	800c1ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d002      	beq.n	800df54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800df4e:	f04f 33ff 	mov.w	r3, #4294967295
 800df52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	68b8      	ldr	r0, [r7, #8]
 800df58:	f000 fb6a 	bl	800e630 <prvAddCurrentTaskToDelayedList>
	}
 800df5c:	bf00      	nop
 800df5e:	3718      	adds	r7, #24
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	20000ca4 	.word	0x20000ca4

0800df68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10b      	bne.n	800df96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	60fb      	str	r3, [r7, #12]
}
 800df90:	bf00      	nop
 800df92:	bf00      	nop
 800df94:	e7fd      	b.n	800df92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	3318      	adds	r3, #24
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fe f974 	bl	800c288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfa0:	4b1d      	ldr	r3, [pc, #116]	@ (800e018 <xTaskRemoveFromEventList+0xb0>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d11d      	bne.n	800dfe4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe f96b 	bl	800c288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfb6:	4b19      	ldr	r3, [pc, #100]	@ (800e01c <xTaskRemoveFromEventList+0xb4>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d903      	bls.n	800dfc6 <xTaskRemoveFromEventList+0x5e>
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc2:	4a16      	ldr	r2, [pc, #88]	@ (800e01c <xTaskRemoveFromEventList+0xb4>)
 800dfc4:	6013      	str	r3, [r2, #0]
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfca:	4613      	mov	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4a13      	ldr	r2, [pc, #76]	@ (800e020 <xTaskRemoveFromEventList+0xb8>)
 800dfd4:	441a      	add	r2, r3
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	3304      	adds	r3, #4
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4610      	mov	r0, r2
 800dfde:	f7fe f8f6 	bl	800c1ce <vListInsertEnd>
 800dfe2:	e005      	b.n	800dff0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	3318      	adds	r3, #24
 800dfe8:	4619      	mov	r1, r3
 800dfea:	480e      	ldr	r0, [pc, #56]	@ (800e024 <xTaskRemoveFromEventList+0xbc>)
 800dfec:	f7fe f8ef 	bl	800c1ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dff4:	4b0c      	ldr	r3, [pc, #48]	@ (800e028 <xTaskRemoveFromEventList+0xc0>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d905      	bls.n	800e00a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dffe:	2301      	movs	r3, #1
 800e000:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e002:	4b0a      	ldr	r3, [pc, #40]	@ (800e02c <xTaskRemoveFromEventList+0xc4>)
 800e004:	2201      	movs	r2, #1
 800e006:	601a      	str	r2, [r3, #0]
 800e008:	e001      	b.n	800e00e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e00a:	2300      	movs	r3, #0
 800e00c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e00e:	697b      	ldr	r3, [r7, #20]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	200011a0 	.word	0x200011a0
 800e01c:	20001180 	.word	0x20001180
 800e020:	20000ca8 	.word	0x20000ca8
 800e024:	20001138 	.word	0x20001138
 800e028:	20000ca4 	.word	0x20000ca4
 800e02c:	2000118c 	.word	0x2000118c

0800e030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e038:	4b06      	ldr	r3, [pc, #24]	@ (800e054 <vTaskInternalSetTimeOutState+0x24>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e040:	4b05      	ldr	r3, [pc, #20]	@ (800e058 <vTaskInternalSetTimeOutState+0x28>)
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	605a      	str	r2, [r3, #4]
}
 800e048:	bf00      	nop
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	20001190 	.word	0x20001190
 800e058:	2000117c 	.word	0x2000117c

0800e05c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b088      	sub	sp, #32
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10b      	bne.n	800e084 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e070:	f383 8811 	msr	BASEPRI, r3
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	613b      	str	r3, [r7, #16]
}
 800e07e:	bf00      	nop
 800e080:	bf00      	nop
 800e082:	e7fd      	b.n	800e080 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10b      	bne.n	800e0a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	60fb      	str	r3, [r7, #12]
}
 800e09c:	bf00      	nop
 800e09e:	bf00      	nop
 800e0a0:	e7fd      	b.n	800e09e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e0a2:	f000 ffa1 	bl	800efe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e0a6:	4b1d      	ldr	r3, [pc, #116]	@ (800e11c <xTaskCheckForTimeOut+0xc0>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	69ba      	ldr	r2, [r7, #24]
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0be:	d102      	bne.n	800e0c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	61fb      	str	r3, [r7, #28]
 800e0c4:	e023      	b.n	800e10e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	4b15      	ldr	r3, [pc, #84]	@ (800e120 <xTaskCheckForTimeOut+0xc4>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d007      	beq.n	800e0e2 <xTaskCheckForTimeOut+0x86>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	69ba      	ldr	r2, [r7, #24]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d302      	bcc.n	800e0e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	61fb      	str	r3, [r7, #28]
 800e0e0:	e015      	b.n	800e10e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	697a      	ldr	r2, [r7, #20]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d20b      	bcs.n	800e104 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	1ad2      	subs	r2, r2, r3
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff ff99 	bl	800e030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e0fe:	2300      	movs	r3, #0
 800e100:	61fb      	str	r3, [r7, #28]
 800e102:	e004      	b.n	800e10e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	2200      	movs	r2, #0
 800e108:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e10a:	2301      	movs	r3, #1
 800e10c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e10e:	f000 ff9d 	bl	800f04c <vPortExitCritical>

	return xReturn;
 800e112:	69fb      	ldr	r3, [r7, #28]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3720      	adds	r7, #32
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	2000117c 	.word	0x2000117c
 800e120:	20001190 	.word	0x20001190

0800e124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e124:	b480      	push	{r7}
 800e126:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e128:	4b03      	ldr	r3, [pc, #12]	@ (800e138 <vTaskMissedYield+0x14>)
 800e12a:	2201      	movs	r2, #1
 800e12c:	601a      	str	r2, [r3, #0]
}
 800e12e:	bf00      	nop
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	2000118c 	.word	0x2000118c

0800e13c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e144:	f000 f852 	bl	800e1ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e148:	4b06      	ldr	r3, [pc, #24]	@ (800e164 <prvIdleTask+0x28>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d9f9      	bls.n	800e144 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e150:	4b05      	ldr	r3, [pc, #20]	@ (800e168 <prvIdleTask+0x2c>)
 800e152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e156:	601a      	str	r2, [r3, #0]
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e160:	e7f0      	b.n	800e144 <prvIdleTask+0x8>
 800e162:	bf00      	nop
 800e164:	20000ca8 	.word	0x20000ca8
 800e168:	e000ed04 	.word	0xe000ed04

0800e16c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e172:	2300      	movs	r3, #0
 800e174:	607b      	str	r3, [r7, #4]
 800e176:	e00c      	b.n	800e192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	4613      	mov	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4a12      	ldr	r2, [pc, #72]	@ (800e1cc <prvInitialiseTaskLists+0x60>)
 800e184:	4413      	add	r3, r2
 800e186:	4618      	mov	r0, r3
 800e188:	f7fd fff4 	bl	800c174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3301      	adds	r3, #1
 800e190:	607b      	str	r3, [r7, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b37      	cmp	r3, #55	@ 0x37
 800e196:	d9ef      	bls.n	800e178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e198:	480d      	ldr	r0, [pc, #52]	@ (800e1d0 <prvInitialiseTaskLists+0x64>)
 800e19a:	f7fd ffeb 	bl	800c174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e19e:	480d      	ldr	r0, [pc, #52]	@ (800e1d4 <prvInitialiseTaskLists+0x68>)
 800e1a0:	f7fd ffe8 	bl	800c174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1a4:	480c      	ldr	r0, [pc, #48]	@ (800e1d8 <prvInitialiseTaskLists+0x6c>)
 800e1a6:	f7fd ffe5 	bl	800c174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1aa:	480c      	ldr	r0, [pc, #48]	@ (800e1dc <prvInitialiseTaskLists+0x70>)
 800e1ac:	f7fd ffe2 	bl	800c174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e1b0:	480b      	ldr	r0, [pc, #44]	@ (800e1e0 <prvInitialiseTaskLists+0x74>)
 800e1b2:	f7fd ffdf 	bl	800c174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e1e4 <prvInitialiseTaskLists+0x78>)
 800e1b8:	4a05      	ldr	r2, [pc, #20]	@ (800e1d0 <prvInitialiseTaskLists+0x64>)
 800e1ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e1e8 <prvInitialiseTaskLists+0x7c>)
 800e1be:	4a05      	ldr	r2, [pc, #20]	@ (800e1d4 <prvInitialiseTaskLists+0x68>)
 800e1c0:	601a      	str	r2, [r3, #0]
}
 800e1c2:	bf00      	nop
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20000ca8 	.word	0x20000ca8
 800e1d0:	20001108 	.word	0x20001108
 800e1d4:	2000111c 	.word	0x2000111c
 800e1d8:	20001138 	.word	0x20001138
 800e1dc:	2000114c 	.word	0x2000114c
 800e1e0:	20001164 	.word	0x20001164
 800e1e4:	20001130 	.word	0x20001130
 800e1e8:	20001134 	.word	0x20001134

0800e1ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1f2:	e019      	b.n	800e228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e1f4:	f000 fef8 	bl	800efe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f8:	4b10      	ldr	r3, [pc, #64]	@ (800e23c <prvCheckTasksWaitingTermination+0x50>)
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3304      	adds	r3, #4
 800e204:	4618      	mov	r0, r3
 800e206:	f7fe f83f 	bl	800c288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e20a:	4b0d      	ldr	r3, [pc, #52]	@ (800e240 <prvCheckTasksWaitingTermination+0x54>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	3b01      	subs	r3, #1
 800e210:	4a0b      	ldr	r2, [pc, #44]	@ (800e240 <prvCheckTasksWaitingTermination+0x54>)
 800e212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e214:	4b0b      	ldr	r3, [pc, #44]	@ (800e244 <prvCheckTasksWaitingTermination+0x58>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	3b01      	subs	r3, #1
 800e21a:	4a0a      	ldr	r2, [pc, #40]	@ (800e244 <prvCheckTasksWaitingTermination+0x58>)
 800e21c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e21e:	f000 ff15 	bl	800f04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f810 	bl	800e248 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e228:	4b06      	ldr	r3, [pc, #24]	@ (800e244 <prvCheckTasksWaitingTermination+0x58>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1e1      	bne.n	800e1f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e230:	bf00      	nop
 800e232:	bf00      	nop
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	2000114c 	.word	0x2000114c
 800e240:	20001178 	.word	0x20001178
 800e244:	20001160 	.word	0x20001160

0800e248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3354      	adds	r3, #84	@ 0x54
 800e254:	4618      	mov	r0, r3
 800e256:	f001 f9df 	bl	800f618 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e260:	2b00      	cmp	r3, #0
 800e262:	d108      	bne.n	800e276 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e268:	4618      	mov	r0, r3
 800e26a:	f001 f8ad 	bl	800f3c8 <vPortFree>
				vPortFree( pxTCB );
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f001 f8aa 	bl	800f3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e274:	e019      	b.n	800e2aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d103      	bne.n	800e288 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f001 f8a1 	bl	800f3c8 <vPortFree>
	}
 800e286:	e010      	b.n	800e2aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e28e:	2b02      	cmp	r3, #2
 800e290:	d00b      	beq.n	800e2aa <prvDeleteTCB+0x62>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	60fb      	str	r3, [r7, #12]
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	e7fd      	b.n	800e2a6 <prvDeleteTCB+0x5e>
	}
 800e2aa:	bf00      	nop
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
	...

0800e2b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ec <prvResetNextTaskUnblockTime+0x38>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d104      	bne.n	800e2ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e2cc:	e008      	b.n	800e2e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ce:	4b07      	ldr	r3, [pc, #28]	@ (800e2ec <prvResetNextTaskUnblockTime+0x38>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	4a04      	ldr	r2, [pc, #16]	@ (800e2f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e2de:	6013      	str	r3, [r2, #0]
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	20001130 	.word	0x20001130
 800e2f0:	20001198 	.word	0x20001198

0800e2f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e2fa:	4b05      	ldr	r3, [pc, #20]	@ (800e310 <xTaskGetCurrentTaskHandle+0x1c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e300:	687b      	ldr	r3, [r7, #4]
	}
 800e302:	4618      	mov	r0, r3
 800e304:	370c      	adds	r7, #12
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop
 800e310:	20000ca4 	.word	0x20000ca4

0800e314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e31a:	4b0b      	ldr	r3, [pc, #44]	@ (800e348 <xTaskGetSchedulerState+0x34>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d102      	bne.n	800e328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e322:	2301      	movs	r3, #1
 800e324:	607b      	str	r3, [r7, #4]
 800e326:	e008      	b.n	800e33a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e328:	4b08      	ldr	r3, [pc, #32]	@ (800e34c <xTaskGetSchedulerState+0x38>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d102      	bne.n	800e336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e330:	2302      	movs	r3, #2
 800e332:	607b      	str	r3, [r7, #4]
 800e334:	e001      	b.n	800e33a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e336:	2300      	movs	r3, #0
 800e338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e33a:	687b      	ldr	r3, [r7, #4]
	}
 800e33c:	4618      	mov	r0, r3
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	20001184 	.word	0x20001184
 800e34c:	200011a0 	.word	0x200011a0

0800e350 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e35c:	2300      	movs	r3, #0
 800e35e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d051      	beq.n	800e40a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e36a:	4b2a      	ldr	r3, [pc, #168]	@ (800e414 <xTaskPriorityInherit+0xc4>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e370:	429a      	cmp	r2, r3
 800e372:	d241      	bcs.n	800e3f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	db06      	blt.n	800e38a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e37c:	4b25      	ldr	r3, [pc, #148]	@ (800e414 <xTaskPriorityInherit+0xc4>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e382:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	6959      	ldr	r1, [r3, #20]
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e392:	4613      	mov	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4a1f      	ldr	r2, [pc, #124]	@ (800e418 <xTaskPriorityInherit+0xc8>)
 800e39c:	4413      	add	r3, r2
 800e39e:	4299      	cmp	r1, r3
 800e3a0:	d122      	bne.n	800e3e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fd ff6e 	bl	800c288 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3ac:	4b19      	ldr	r3, [pc, #100]	@ (800e414 <xTaskPriorityInherit+0xc4>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ba:	4b18      	ldr	r3, [pc, #96]	@ (800e41c <xTaskPriorityInherit+0xcc>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d903      	bls.n	800e3ca <xTaskPriorityInherit+0x7a>
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3c6:	4a15      	ldr	r2, [pc, #84]	@ (800e41c <xTaskPriorityInherit+0xcc>)
 800e3c8:	6013      	str	r3, [r2, #0]
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4413      	add	r3, r2
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4a10      	ldr	r2, [pc, #64]	@ (800e418 <xTaskPriorityInherit+0xc8>)
 800e3d8:	441a      	add	r2, r3
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	3304      	adds	r3, #4
 800e3de:	4619      	mov	r1, r3
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	f7fd fef4 	bl	800c1ce <vListInsertEnd>
 800e3e6:	e004      	b.n	800e3f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e414 <xTaskPriorityInherit+0xc4>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	60fb      	str	r3, [r7, #12]
 800e3f6:	e008      	b.n	800e40a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3fc:	4b05      	ldr	r3, [pc, #20]	@ (800e414 <xTaskPriorityInherit+0xc4>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e402:	429a      	cmp	r2, r3
 800e404:	d201      	bcs.n	800e40a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e406:	2301      	movs	r3, #1
 800e408:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e40a:	68fb      	ldr	r3, [r7, #12]
	}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	20000ca4 	.word	0x20000ca4
 800e418:	20000ca8 	.word	0x20000ca8
 800e41c:	20001180 	.word	0x20001180

0800e420 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e42c:	2300      	movs	r3, #0
 800e42e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d058      	beq.n	800e4e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e436:	4b2f      	ldr	r3, [pc, #188]	@ (800e4f4 <xTaskPriorityDisinherit+0xd4>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	693a      	ldr	r2, [r7, #16]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d00b      	beq.n	800e458 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e444:	f383 8811 	msr	BASEPRI, r3
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	f3bf 8f4f 	dsb	sy
 800e450:	60fb      	str	r3, [r7, #12]
}
 800e452:	bf00      	nop
 800e454:	bf00      	nop
 800e456:	e7fd      	b.n	800e454 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10b      	bne.n	800e478 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	60bb      	str	r3, [r7, #8]
}
 800e472:	bf00      	nop
 800e474:	bf00      	nop
 800e476:	e7fd      	b.n	800e474 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e47c:	1e5a      	subs	r2, r3, #1
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d02c      	beq.n	800e4e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e492:	2b00      	cmp	r3, #0
 800e494:	d128      	bne.n	800e4e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	3304      	adds	r3, #4
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fd fef4 	bl	800c288 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e4f8 <xTaskPriorityDisinherit+0xd8>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d903      	bls.n	800e4c8 <xTaskPriorityDisinherit+0xa8>
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c4:	4a0c      	ldr	r2, [pc, #48]	@ (800e4f8 <xTaskPriorityDisinherit+0xd8>)
 800e4c6:	6013      	str	r3, [r2, #0]
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4a09      	ldr	r2, [pc, #36]	@ (800e4fc <xTaskPriorityDisinherit+0xdc>)
 800e4d6:	441a      	add	r2, r3
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4610      	mov	r0, r2
 800e4e0:	f7fd fe75 	bl	800c1ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4e8:	697b      	ldr	r3, [r7, #20]
	}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3718      	adds	r7, #24
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000ca4 	.word	0x20000ca4
 800e4f8:	20001180 	.word	0x20001180
 800e4fc:	20000ca8 	.word	0x20000ca8

0800e500 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e500:	b580      	push	{r7, lr}
 800e502:	b088      	sub	sp, #32
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e50e:	2301      	movs	r3, #1
 800e510:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d06c      	beq.n	800e5f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10b      	bne.n	800e538 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	60fb      	str	r3, [r7, #12]
}
 800e532:	bf00      	nop
 800e534:	bf00      	nop
 800e536:	e7fd      	b.n	800e534 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d902      	bls.n	800e548 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	61fb      	str	r3, [r7, #28]
 800e546:	e002      	b.n	800e54e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e54c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e552:	69fa      	ldr	r2, [r7, #28]
 800e554:	429a      	cmp	r2, r3
 800e556:	d04c      	beq.n	800e5f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e55c:	697a      	ldr	r2, [r7, #20]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d147      	bne.n	800e5f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e562:	4b26      	ldr	r3, [pc, #152]	@ (800e5fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	69ba      	ldr	r2, [r7, #24]
 800e568:	429a      	cmp	r2, r3
 800e56a:	d10b      	bne.n	800e584 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e570:	f383 8811 	msr	BASEPRI, r3
 800e574:	f3bf 8f6f 	isb	sy
 800e578:	f3bf 8f4f 	dsb	sy
 800e57c:	60bb      	str	r3, [r7, #8]
}
 800e57e:	bf00      	nop
 800e580:	bf00      	nop
 800e582:	e7fd      	b.n	800e580 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e588:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	69fa      	ldr	r2, [r7, #28]
 800e58e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	699b      	ldr	r3, [r3, #24]
 800e594:	2b00      	cmp	r3, #0
 800e596:	db04      	blt.n	800e5a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	6959      	ldr	r1, [r3, #20]
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4a13      	ldr	r2, [pc, #76]	@ (800e600 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e5b2:	4413      	add	r3, r2
 800e5b4:	4299      	cmp	r1, r3
 800e5b6:	d11c      	bne.n	800e5f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fd fe63 	bl	800c288 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e604 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d903      	bls.n	800e5d6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d2:	4a0c      	ldr	r2, [pc, #48]	@ (800e604 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e5d4:	6013      	str	r3, [r2, #0]
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5da:	4613      	mov	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4413      	add	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4a07      	ldr	r2, [pc, #28]	@ (800e600 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e5e4:	441a      	add	r2, r3
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	f7fd fdee 	bl	800c1ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e5f2:	bf00      	nop
 800e5f4:	3720      	adds	r7, #32
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	20000ca4 	.word	0x20000ca4
 800e600:	20000ca8 	.word	0x20000ca8
 800e604:	20001180 	.word	0x20001180

0800e608 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e608:	b480      	push	{r7}
 800e60a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e60c:	4b07      	ldr	r3, [pc, #28]	@ (800e62c <pvTaskIncrementMutexHeldCount+0x24>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d004      	beq.n	800e61e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e614:	4b05      	ldr	r3, [pc, #20]	@ (800e62c <pvTaskIncrementMutexHeldCount+0x24>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e61a:	3201      	adds	r2, #1
 800e61c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e61e:	4b03      	ldr	r3, [pc, #12]	@ (800e62c <pvTaskIncrementMutexHeldCount+0x24>)
 800e620:	681b      	ldr	r3, [r3, #0]
	}
 800e622:	4618      	mov	r0, r3
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	20000ca4 	.word	0x20000ca4

0800e630 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e63a:	4b21      	ldr	r3, [pc, #132]	@ (800e6c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e640:	4b20      	ldr	r3, [pc, #128]	@ (800e6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3304      	adds	r3, #4
 800e646:	4618      	mov	r0, r3
 800e648:	f7fd fe1e 	bl	800c288 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e652:	d10a      	bne.n	800e66a <prvAddCurrentTaskToDelayedList+0x3a>
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d007      	beq.n	800e66a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e65a:	4b1a      	ldr	r3, [pc, #104]	@ (800e6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	3304      	adds	r3, #4
 800e660:	4619      	mov	r1, r3
 800e662:	4819      	ldr	r0, [pc, #100]	@ (800e6c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e664:	f7fd fdb3 	bl	800c1ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e668:	e026      	b.n	800e6b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4413      	add	r3, r2
 800e670:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e672:	4b14      	ldr	r3, [pc, #80]	@ (800e6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d209      	bcs.n	800e696 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e682:	4b12      	ldr	r3, [pc, #72]	@ (800e6cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	3304      	adds	r3, #4
 800e68c:	4619      	mov	r1, r3
 800e68e:	4610      	mov	r0, r2
 800e690:	f7fd fdc1 	bl	800c216 <vListInsert>
}
 800e694:	e010      	b.n	800e6b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e696:	4b0e      	ldr	r3, [pc, #56]	@ (800e6d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	4b0a      	ldr	r3, [pc, #40]	@ (800e6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3304      	adds	r3, #4
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4610      	mov	r0, r2
 800e6a4:	f7fd fdb7 	bl	800c216 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e6a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e6d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d202      	bcs.n	800e6b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e6b2:	4a08      	ldr	r2, [pc, #32]	@ (800e6d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	6013      	str	r3, [r2, #0]
}
 800e6b8:	bf00      	nop
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	2000117c 	.word	0x2000117c
 800e6c4:	20000ca4 	.word	0x20000ca4
 800e6c8:	20001164 	.word	0x20001164
 800e6cc:	20001134 	.word	0x20001134
 800e6d0:	20001130 	.word	0x20001130
 800e6d4:	20001198 	.word	0x20001198

0800e6d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08a      	sub	sp, #40	@ 0x28
 800e6dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e6e2:	f000 fb13 	bl	800ed0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e6e6:	4b1d      	ldr	r3, [pc, #116]	@ (800e75c <xTimerCreateTimerTask+0x84>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d021      	beq.n	800e732 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e6f6:	1d3a      	adds	r2, r7, #4
 800e6f8:	f107 0108 	add.w	r1, r7, #8
 800e6fc:	f107 030c 	add.w	r3, r7, #12
 800e700:	4618      	mov	r0, r3
 800e702:	f7fd fd1d 	bl	800c140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e706:	6879      	ldr	r1, [r7, #4]
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	9202      	str	r2, [sp, #8]
 800e70e:	9301      	str	r3, [sp, #4]
 800e710:	2302      	movs	r3, #2
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	2300      	movs	r3, #0
 800e716:	460a      	mov	r2, r1
 800e718:	4911      	ldr	r1, [pc, #68]	@ (800e760 <xTimerCreateTimerTask+0x88>)
 800e71a:	4812      	ldr	r0, [pc, #72]	@ (800e764 <xTimerCreateTimerTask+0x8c>)
 800e71c:	f7fe ff00 	bl	800d520 <xTaskCreateStatic>
 800e720:	4603      	mov	r3, r0
 800e722:	4a11      	ldr	r2, [pc, #68]	@ (800e768 <xTimerCreateTimerTask+0x90>)
 800e724:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e726:	4b10      	ldr	r3, [pc, #64]	@ (800e768 <xTimerCreateTimerTask+0x90>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d001      	beq.n	800e732 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e72e:	2301      	movs	r3, #1
 800e730:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d10b      	bne.n	800e750 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	613b      	str	r3, [r7, #16]
}
 800e74a:	bf00      	nop
 800e74c:	bf00      	nop
 800e74e:	e7fd      	b.n	800e74c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e750:	697b      	ldr	r3, [r7, #20]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	200011d4 	.word	0x200011d4
 800e760:	08010004 	.word	0x08010004
 800e764:	0800e8a5 	.word	0x0800e8a5
 800e768:	200011d8 	.word	0x200011d8

0800e76c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08a      	sub	sp, #40	@ 0x28
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10b      	bne.n	800e79c <xTimerGenericCommand+0x30>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	623b      	str	r3, [r7, #32]
}
 800e796:	bf00      	nop
 800e798:	bf00      	nop
 800e79a:	e7fd      	b.n	800e798 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e79c:	4b19      	ldr	r3, [pc, #100]	@ (800e804 <xTimerGenericCommand+0x98>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d02a      	beq.n	800e7fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	2b05      	cmp	r3, #5
 800e7b4:	dc18      	bgt.n	800e7e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e7b6:	f7ff fdad 	bl	800e314 <xTaskGetSchedulerState>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	d109      	bne.n	800e7d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e7c0:	4b10      	ldr	r3, [pc, #64]	@ (800e804 <xTimerGenericCommand+0x98>)
 800e7c2:	6818      	ldr	r0, [r3, #0]
 800e7c4:	f107 0110 	add.w	r1, r7, #16
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7cc:	f7fd fff2 	bl	800c7b4 <xQueueGenericSend>
 800e7d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e7d2:	e012      	b.n	800e7fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e7d4:	4b0b      	ldr	r3, [pc, #44]	@ (800e804 <xTimerGenericCommand+0x98>)
 800e7d6:	6818      	ldr	r0, [r3, #0]
 800e7d8:	f107 0110 	add.w	r1, r7, #16
 800e7dc:	2300      	movs	r3, #0
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f7fd ffe8 	bl	800c7b4 <xQueueGenericSend>
 800e7e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e7e6:	e008      	b.n	800e7fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e7e8:	4b06      	ldr	r3, [pc, #24]	@ (800e804 <xTimerGenericCommand+0x98>)
 800e7ea:	6818      	ldr	r0, [r3, #0]
 800e7ec:	f107 0110 	add.w	r1, r7, #16
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	683a      	ldr	r2, [r7, #0]
 800e7f4:	f7fe f8e0 	bl	800c9b8 <xQueueGenericSendFromISR>
 800e7f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3728      	adds	r7, #40	@ 0x28
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	200011d4 	.word	0x200011d4

0800e808 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b088      	sub	sp, #32
 800e80c:	af02      	add	r7, sp, #8
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e812:	4b23      	ldr	r3, [pc, #140]	@ (800e8a0 <prvProcessExpiredTimer+0x98>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	3304      	adds	r3, #4
 800e820:	4618      	mov	r0, r3
 800e822:	f7fd fd31 	bl	800c288 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e82c:	f003 0304 	and.w	r3, r3, #4
 800e830:	2b00      	cmp	r3, #0
 800e832:	d023      	beq.n	800e87c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	699a      	ldr	r2, [r3, #24]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	18d1      	adds	r1, r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	6978      	ldr	r0, [r7, #20]
 800e842:	f000 f8d5 	bl	800e9f0 <prvInsertTimerInActiveList>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d020      	beq.n	800e88e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e84c:	2300      	movs	r3, #0
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	2300      	movs	r3, #0
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	2100      	movs	r1, #0
 800e856:	6978      	ldr	r0, [r7, #20]
 800e858:	f7ff ff88 	bl	800e76c <xTimerGenericCommand>
 800e85c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d114      	bne.n	800e88e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e868:	f383 8811 	msr	BASEPRI, r3
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	f3bf 8f4f 	dsb	sy
 800e874:	60fb      	str	r3, [r7, #12]
}
 800e876:	bf00      	nop
 800e878:	bf00      	nop
 800e87a:	e7fd      	b.n	800e878 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e882:	f023 0301 	bic.w	r3, r3, #1
 800e886:	b2da      	uxtb	r2, r3
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	6978      	ldr	r0, [r7, #20]
 800e894:	4798      	blx	r3
}
 800e896:	bf00      	nop
 800e898:	3718      	adds	r7, #24
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	200011cc 	.word	0x200011cc

0800e8a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e8ac:	f107 0308 	add.w	r3, r7, #8
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f000 f859 	bl	800e968 <prvGetNextExpireTime>
 800e8b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 f805 	bl	800e8cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e8c2:	f000 f8d7 	bl	800ea74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e8c6:	bf00      	nop
 800e8c8:	e7f0      	b.n	800e8ac <prvTimerTask+0x8>
	...

0800e8cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e8d6:	f7ff f907 	bl	800dae8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8da:	f107 0308 	add.w	r3, r7, #8
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f000 f866 	bl	800e9b0 <prvSampleTimeNow>
 800e8e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d130      	bne.n	800e94e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10a      	bne.n	800e908 <prvProcessTimerOrBlockTask+0x3c>
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d806      	bhi.n	800e908 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e8fa:	f7ff f903 	bl	800db04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e8fe:	68f9      	ldr	r1, [r7, #12]
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f7ff ff81 	bl	800e808 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e906:	e024      	b.n	800e952 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d008      	beq.n	800e920 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e90e:	4b13      	ldr	r3, [pc, #76]	@ (800e95c <prvProcessTimerOrBlockTask+0x90>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d101      	bne.n	800e91c <prvProcessTimerOrBlockTask+0x50>
 800e918:	2301      	movs	r3, #1
 800e91a:	e000      	b.n	800e91e <prvProcessTimerOrBlockTask+0x52>
 800e91c:	2300      	movs	r3, #0
 800e91e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e920:	4b0f      	ldr	r3, [pc, #60]	@ (800e960 <prvProcessTimerOrBlockTask+0x94>)
 800e922:	6818      	ldr	r0, [r3, #0]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	1ad3      	subs	r3, r2, r3
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	4619      	mov	r1, r3
 800e92e:	f7fe fdc3 	bl	800d4b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e932:	f7ff f8e7 	bl	800db04 <xTaskResumeAll>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d10a      	bne.n	800e952 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e93c:	4b09      	ldr	r3, [pc, #36]	@ (800e964 <prvProcessTimerOrBlockTask+0x98>)
 800e93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	f3bf 8f6f 	isb	sy
}
 800e94c:	e001      	b.n	800e952 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e94e:	f7ff f8d9 	bl	800db04 <xTaskResumeAll>
}
 800e952:	bf00      	nop
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	200011d0 	.word	0x200011d0
 800e960:	200011d4 	.word	0x200011d4
 800e964:	e000ed04 	.word	0xe000ed04

0800e968 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e970:	4b0e      	ldr	r3, [pc, #56]	@ (800e9ac <prvGetNextExpireTime+0x44>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d101      	bne.n	800e97e <prvGetNextExpireTime+0x16>
 800e97a:	2201      	movs	r2, #1
 800e97c:	e000      	b.n	800e980 <prvGetNextExpireTime+0x18>
 800e97e:	2200      	movs	r2, #0
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d105      	bne.n	800e998 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e98c:	4b07      	ldr	r3, [pc, #28]	@ (800e9ac <prvGetNextExpireTime+0x44>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	60fb      	str	r3, [r7, #12]
 800e996:	e001      	b.n	800e99c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e998:	2300      	movs	r3, #0
 800e99a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e99c:	68fb      	ldr	r3, [r7, #12]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	200011cc 	.word	0x200011cc

0800e9b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e9b8:	f7ff f942 	bl	800dc40 <xTaskGetTickCount>
 800e9bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e9be:	4b0b      	ldr	r3, [pc, #44]	@ (800e9ec <prvSampleTimeNow+0x3c>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d205      	bcs.n	800e9d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e9c8:	f000 f93a 	bl	800ec40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	e002      	b.n	800e9da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e9da:	4a04      	ldr	r2, [pc, #16]	@ (800e9ec <prvSampleTimeNow+0x3c>)
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	200011dc 	.word	0x200011dc

0800e9f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
 800e9fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ea0e:	68ba      	ldr	r2, [r7, #8]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d812      	bhi.n	800ea3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	1ad2      	subs	r2, r2, r3
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	699b      	ldr	r3, [r3, #24]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d302      	bcc.n	800ea2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ea24:	2301      	movs	r3, #1
 800ea26:	617b      	str	r3, [r7, #20]
 800ea28:	e01b      	b.n	800ea62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ea2a:	4b10      	ldr	r3, [pc, #64]	@ (800ea6c <prvInsertTimerInActiveList+0x7c>)
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	3304      	adds	r3, #4
 800ea32:	4619      	mov	r1, r3
 800ea34:	4610      	mov	r0, r2
 800ea36:	f7fd fbee 	bl	800c216 <vListInsert>
 800ea3a:	e012      	b.n	800ea62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d206      	bcs.n	800ea52 <prvInsertTimerInActiveList+0x62>
 800ea44:	68ba      	ldr	r2, [r7, #8]
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d302      	bcc.n	800ea52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	617b      	str	r3, [r7, #20]
 800ea50:	e007      	b.n	800ea62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea52:	4b07      	ldr	r3, [pc, #28]	@ (800ea70 <prvInsertTimerInActiveList+0x80>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	4610      	mov	r0, r2
 800ea5e:	f7fd fbda 	bl	800c216 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ea62:	697b      	ldr	r3, [r7, #20]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	200011d0 	.word	0x200011d0
 800ea70:	200011cc 	.word	0x200011cc

0800ea74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08e      	sub	sp, #56	@ 0x38
 800ea78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea7a:	e0ce      	b.n	800ec1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	da19      	bge.n	800eab6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ea82:	1d3b      	adds	r3, r7, #4
 800ea84:	3304      	adds	r3, #4
 800ea86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ea88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d10b      	bne.n	800eaa6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	61fb      	str	r3, [r7, #28]
}
 800eaa0:	bf00      	nop
 800eaa2:	bf00      	nop
 800eaa4:	e7fd      	b.n	800eaa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eaa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eaac:	6850      	ldr	r0, [r2, #4]
 800eaae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eab0:	6892      	ldr	r2, [r2, #8]
 800eab2:	4611      	mov	r1, r2
 800eab4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f2c0 80ae 	blt.w	800ec1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac4:	695b      	ldr	r3, [r3, #20]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d004      	beq.n	800ead4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eaca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eacc:	3304      	adds	r3, #4
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fd fbda 	bl	800c288 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ead4:	463b      	mov	r3, r7
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff ff6a 	bl	800e9b0 <prvSampleTimeNow>
 800eadc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b09      	cmp	r3, #9
 800eae2:	f200 8097 	bhi.w	800ec14 <prvProcessReceivedCommands+0x1a0>
 800eae6:	a201      	add	r2, pc, #4	@ (adr r2, 800eaec <prvProcessReceivedCommands+0x78>)
 800eae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaec:	0800eb15 	.word	0x0800eb15
 800eaf0:	0800eb15 	.word	0x0800eb15
 800eaf4:	0800eb15 	.word	0x0800eb15
 800eaf8:	0800eb8b 	.word	0x0800eb8b
 800eafc:	0800eb9f 	.word	0x0800eb9f
 800eb00:	0800ebeb 	.word	0x0800ebeb
 800eb04:	0800eb15 	.word	0x0800eb15
 800eb08:	0800eb15 	.word	0x0800eb15
 800eb0c:	0800eb8b 	.word	0x0800eb8b
 800eb10:	0800eb9f 	.word	0x0800eb9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb1a:	f043 0301 	orr.w	r3, r3, #1
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb2a:	699b      	ldr	r3, [r3, #24]
 800eb2c:	18d1      	adds	r1, r2, r3
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb34:	f7ff ff5c 	bl	800e9f0 <prvInsertTimerInActiveList>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d06c      	beq.n	800ec18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb4c:	f003 0304 	and.w	r3, r3, #4
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d061      	beq.n	800ec18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb58:	699b      	ldr	r3, [r3, #24]
 800eb5a:	441a      	add	r2, r3
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	2300      	movs	r3, #0
 800eb62:	2100      	movs	r1, #0
 800eb64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb66:	f7ff fe01 	bl	800e76c <xTimerGenericCommand>
 800eb6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eb6c:	6a3b      	ldr	r3, [r7, #32]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d152      	bne.n	800ec18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb76:	f383 8811 	msr	BASEPRI, r3
 800eb7a:	f3bf 8f6f 	isb	sy
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	61bb      	str	r3, [r7, #24]
}
 800eb84:	bf00      	nop
 800eb86:	bf00      	nop
 800eb88:	e7fd      	b.n	800eb86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb90:	f023 0301 	bic.w	r3, r3, #1
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb9c:	e03d      	b.n	800ec1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eba4:	f043 0301 	orr.w	r3, r3, #1
 800eba8:	b2da      	uxtb	r2, r3
 800ebaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ebb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb8:	699b      	ldr	r3, [r3, #24]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10b      	bne.n	800ebd6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	617b      	str	r3, [r7, #20]
}
 800ebd0:	bf00      	nop
 800ebd2:	bf00      	nop
 800ebd4:	e7fd      	b.n	800ebd2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ebd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebd8:	699a      	ldr	r2, [r3, #24]
 800ebda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebdc:	18d1      	adds	r1, r2, r3
 800ebde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebe4:	f7ff ff04 	bl	800e9f0 <prvInsertTimerInActiveList>
					break;
 800ebe8:	e017      	b.n	800ec1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ebea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebf0:	f003 0302 	and.w	r3, r3, #2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d103      	bne.n	800ec00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ebf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebfa:	f000 fbe5 	bl	800f3c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ebfe:	e00c      	b.n	800ec1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec06:	f023 0301 	bic.w	r3, r3, #1
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ec12:	e002      	b.n	800ec1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ec14:	bf00      	nop
 800ec16:	e000      	b.n	800ec1a <prvProcessReceivedCommands+0x1a6>
					break;
 800ec18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec1a:	4b08      	ldr	r3, [pc, #32]	@ (800ec3c <prvProcessReceivedCommands+0x1c8>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	1d39      	adds	r1, r7, #4
 800ec20:	2200      	movs	r2, #0
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fd fff6 	bl	800cc14 <xQueueReceive>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f47f af26 	bne.w	800ea7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ec30:	bf00      	nop
 800ec32:	bf00      	nop
 800ec34:	3730      	adds	r7, #48	@ 0x30
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	200011d4 	.word	0x200011d4

0800ec40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec46:	e049      	b.n	800ecdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec48:	4b2e      	ldr	r3, [pc, #184]	@ (800ed04 <prvSwitchTimerLists+0xc4>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec52:	4b2c      	ldr	r3, [pc, #176]	@ (800ed04 <prvSwitchTimerLists+0xc4>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	3304      	adds	r3, #4
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fd fb11 	bl	800c288 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6a1b      	ldr	r3, [r3, #32]
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec74:	f003 0304 	and.w	r3, r3, #4
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d02f      	beq.n	800ecdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	699b      	ldr	r3, [r3, #24]
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	4413      	add	r3, r2
 800ec84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d90e      	bls.n	800ecac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ed04 <prvSwitchTimerLists+0xc4>)
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	3304      	adds	r3, #4
 800eca2:	4619      	mov	r1, r3
 800eca4:	4610      	mov	r0, r2
 800eca6:	f7fd fab6 	bl	800c216 <vListInsert>
 800ecaa:	e017      	b.n	800ecdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ecac:	2300      	movs	r3, #0
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	693a      	ldr	r2, [r7, #16]
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f7ff fd58 	bl	800e76c <xTimerGenericCommand>
 800ecbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d10b      	bne.n	800ecdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ecc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	603b      	str	r3, [r7, #0]
}
 800ecd6:	bf00      	nop
 800ecd8:	bf00      	nop
 800ecda:	e7fd      	b.n	800ecd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ecdc:	4b09      	ldr	r3, [pc, #36]	@ (800ed04 <prvSwitchTimerLists+0xc4>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1b0      	bne.n	800ec48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ece6:	4b07      	ldr	r3, [pc, #28]	@ (800ed04 <prvSwitchTimerLists+0xc4>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ecec:	4b06      	ldr	r3, [pc, #24]	@ (800ed08 <prvSwitchTimerLists+0xc8>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a04      	ldr	r2, [pc, #16]	@ (800ed04 <prvSwitchTimerLists+0xc4>)
 800ecf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ecf4:	4a04      	ldr	r2, [pc, #16]	@ (800ed08 <prvSwitchTimerLists+0xc8>)
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	6013      	str	r3, [r2, #0]
}
 800ecfa:	bf00      	nop
 800ecfc:	3718      	adds	r7, #24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	200011cc 	.word	0x200011cc
 800ed08:	200011d0 	.word	0x200011d0

0800ed0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ed12:	f000 f969 	bl	800efe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ed16:	4b15      	ldr	r3, [pc, #84]	@ (800ed6c <prvCheckForValidListAndQueue+0x60>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d120      	bne.n	800ed60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ed1e:	4814      	ldr	r0, [pc, #80]	@ (800ed70 <prvCheckForValidListAndQueue+0x64>)
 800ed20:	f7fd fa28 	bl	800c174 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ed24:	4813      	ldr	r0, [pc, #76]	@ (800ed74 <prvCheckForValidListAndQueue+0x68>)
 800ed26:	f7fd fa25 	bl	800c174 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ed2a:	4b13      	ldr	r3, [pc, #76]	@ (800ed78 <prvCheckForValidListAndQueue+0x6c>)
 800ed2c:	4a10      	ldr	r2, [pc, #64]	@ (800ed70 <prvCheckForValidListAndQueue+0x64>)
 800ed2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ed30:	4b12      	ldr	r3, [pc, #72]	@ (800ed7c <prvCheckForValidListAndQueue+0x70>)
 800ed32:	4a10      	ldr	r2, [pc, #64]	@ (800ed74 <prvCheckForValidListAndQueue+0x68>)
 800ed34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed36:	2300      	movs	r3, #0
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	4b11      	ldr	r3, [pc, #68]	@ (800ed80 <prvCheckForValidListAndQueue+0x74>)
 800ed3c:	4a11      	ldr	r2, [pc, #68]	@ (800ed84 <prvCheckForValidListAndQueue+0x78>)
 800ed3e:	2110      	movs	r1, #16
 800ed40:	200a      	movs	r0, #10
 800ed42:	f7fd fb35 	bl	800c3b0 <xQueueGenericCreateStatic>
 800ed46:	4603      	mov	r3, r0
 800ed48:	4a08      	ldr	r2, [pc, #32]	@ (800ed6c <prvCheckForValidListAndQueue+0x60>)
 800ed4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ed4c:	4b07      	ldr	r3, [pc, #28]	@ (800ed6c <prvCheckForValidListAndQueue+0x60>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d005      	beq.n	800ed60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed54:	4b05      	ldr	r3, [pc, #20]	@ (800ed6c <prvCheckForValidListAndQueue+0x60>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	490b      	ldr	r1, [pc, #44]	@ (800ed88 <prvCheckForValidListAndQueue+0x7c>)
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fe fb58 	bl	800d410 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed60:	f000 f974 	bl	800f04c <vPortExitCritical>
}
 800ed64:	bf00      	nop
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	200011d4 	.word	0x200011d4
 800ed70:	200011a4 	.word	0x200011a4
 800ed74:	200011b8 	.word	0x200011b8
 800ed78:	200011cc 	.word	0x200011cc
 800ed7c:	200011d0 	.word	0x200011d0
 800ed80:	20001280 	.word	0x20001280
 800ed84:	200011e0 	.word	0x200011e0
 800ed88:	0801000c 	.word	0x0801000c

0800ed8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	3b04      	subs	r3, #4
 800ed9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eda4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	3b04      	subs	r3, #4
 800edaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	f023 0201 	bic.w	r2, r3, #1
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3b04      	subs	r3, #4
 800edba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800edbc:	4a0c      	ldr	r2, [pc, #48]	@ (800edf0 <pxPortInitialiseStack+0x64>)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	3b14      	subs	r3, #20
 800edc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3b04      	subs	r3, #4
 800edd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f06f 0202 	mvn.w	r2, #2
 800edda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	3b20      	subs	r3, #32
 800ede0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ede2:	68fb      	ldr	r3, [r7, #12]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3714      	adds	r7, #20
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr
 800edf0:	0800edf5 	.word	0x0800edf5

0800edf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800edfe:	4b13      	ldr	r3, [pc, #76]	@ (800ee4c <prvTaskExitError+0x58>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee06:	d00b      	beq.n	800ee20 <prvTaskExitError+0x2c>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	60fb      	str	r3, [r7, #12]
}
 800ee1a:	bf00      	nop
 800ee1c:	bf00      	nop
 800ee1e:	e7fd      	b.n	800ee1c <prvTaskExitError+0x28>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	60bb      	str	r3, [r7, #8]
}
 800ee32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ee34:	bf00      	nop
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d0fc      	beq.n	800ee36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ee3c:	bf00      	nop
 800ee3e:	bf00      	nop
 800ee40:	3714      	adds	r7, #20
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop
 800ee4c:	2000000c 	.word	0x2000000c

0800ee50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ee50:	4b07      	ldr	r3, [pc, #28]	@ (800ee70 <pxCurrentTCBConst2>)
 800ee52:	6819      	ldr	r1, [r3, #0]
 800ee54:	6808      	ldr	r0, [r1, #0]
 800ee56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee5a:	f380 8809 	msr	PSP, r0
 800ee5e:	f3bf 8f6f 	isb	sy
 800ee62:	f04f 0000 	mov.w	r0, #0
 800ee66:	f380 8811 	msr	BASEPRI, r0
 800ee6a:	4770      	bx	lr
 800ee6c:	f3af 8000 	nop.w

0800ee70 <pxCurrentTCBConst2>:
 800ee70:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ee74:	bf00      	nop
 800ee76:	bf00      	nop

0800ee78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ee78:	4808      	ldr	r0, [pc, #32]	@ (800ee9c <prvPortStartFirstTask+0x24>)
 800ee7a:	6800      	ldr	r0, [r0, #0]
 800ee7c:	6800      	ldr	r0, [r0, #0]
 800ee7e:	f380 8808 	msr	MSP, r0
 800ee82:	f04f 0000 	mov.w	r0, #0
 800ee86:	f380 8814 	msr	CONTROL, r0
 800ee8a:	b662      	cpsie	i
 800ee8c:	b661      	cpsie	f
 800ee8e:	f3bf 8f4f 	dsb	sy
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	df00      	svc	0
 800ee98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ee9a:	bf00      	nop
 800ee9c:	e000ed08 	.word	0xe000ed08

0800eea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eea6:	4b47      	ldr	r3, [pc, #284]	@ (800efc4 <xPortStartScheduler+0x124>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a47      	ldr	r2, [pc, #284]	@ (800efc8 <xPortStartScheduler+0x128>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d10b      	bne.n	800eec8 <xPortStartScheduler+0x28>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	613b      	str	r3, [r7, #16]
}
 800eec2:	bf00      	nop
 800eec4:	bf00      	nop
 800eec6:	e7fd      	b.n	800eec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eec8:	4b3e      	ldr	r3, [pc, #248]	@ (800efc4 <xPortStartScheduler+0x124>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a3f      	ldr	r2, [pc, #252]	@ (800efcc <xPortStartScheduler+0x12c>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d10b      	bne.n	800eeea <xPortStartScheduler+0x4a>
	__asm volatile
 800eed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed6:	f383 8811 	msr	BASEPRI, r3
 800eeda:	f3bf 8f6f 	isb	sy
 800eede:	f3bf 8f4f 	dsb	sy
 800eee2:	60fb      	str	r3, [r7, #12]
}
 800eee4:	bf00      	nop
 800eee6:	bf00      	nop
 800eee8:	e7fd      	b.n	800eee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eeea:	4b39      	ldr	r3, [pc, #228]	@ (800efd0 <xPortStartScheduler+0x130>)
 800eeec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	22ff      	movs	r2, #255	@ 0xff
 800eefa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ef04:	78fb      	ldrb	r3, [r7, #3]
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ef0c:	b2da      	uxtb	r2, r3
 800ef0e:	4b31      	ldr	r3, [pc, #196]	@ (800efd4 <xPortStartScheduler+0x134>)
 800ef10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ef12:	4b31      	ldr	r3, [pc, #196]	@ (800efd8 <xPortStartScheduler+0x138>)
 800ef14:	2207      	movs	r2, #7
 800ef16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef18:	e009      	b.n	800ef2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ef1a:	4b2f      	ldr	r3, [pc, #188]	@ (800efd8 <xPortStartScheduler+0x138>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	3b01      	subs	r3, #1
 800ef20:	4a2d      	ldr	r2, [pc, #180]	@ (800efd8 <xPortStartScheduler+0x138>)
 800ef22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ef24:	78fb      	ldrb	r3, [r7, #3]
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	005b      	lsls	r3, r3, #1
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef2e:	78fb      	ldrb	r3, [r7, #3]
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef36:	2b80      	cmp	r3, #128	@ 0x80
 800ef38:	d0ef      	beq.n	800ef1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ef3a:	4b27      	ldr	r3, [pc, #156]	@ (800efd8 <xPortStartScheduler+0x138>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f1c3 0307 	rsb	r3, r3, #7
 800ef42:	2b04      	cmp	r3, #4
 800ef44:	d00b      	beq.n	800ef5e <xPortStartScheduler+0xbe>
	__asm volatile
 800ef46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef4a:	f383 8811 	msr	BASEPRI, r3
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f3bf 8f4f 	dsb	sy
 800ef56:	60bb      	str	r3, [r7, #8]
}
 800ef58:	bf00      	nop
 800ef5a:	bf00      	nop
 800ef5c:	e7fd      	b.n	800ef5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ef5e:	4b1e      	ldr	r3, [pc, #120]	@ (800efd8 <xPortStartScheduler+0x138>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	021b      	lsls	r3, r3, #8
 800ef64:	4a1c      	ldr	r2, [pc, #112]	@ (800efd8 <xPortStartScheduler+0x138>)
 800ef66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ef68:	4b1b      	ldr	r3, [pc, #108]	@ (800efd8 <xPortStartScheduler+0x138>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ef70:	4a19      	ldr	r2, [pc, #100]	@ (800efd8 <xPortStartScheduler+0x138>)
 800ef72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	b2da      	uxtb	r2, r3
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ef7c:	4b17      	ldr	r3, [pc, #92]	@ (800efdc <xPortStartScheduler+0x13c>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a16      	ldr	r2, [pc, #88]	@ (800efdc <xPortStartScheduler+0x13c>)
 800ef82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ef86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ef88:	4b14      	ldr	r3, [pc, #80]	@ (800efdc <xPortStartScheduler+0x13c>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a13      	ldr	r2, [pc, #76]	@ (800efdc <xPortStartScheduler+0x13c>)
 800ef8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ef92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ef94:	f000 f8da 	bl	800f14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ef98:	4b11      	ldr	r3, [pc, #68]	@ (800efe0 <xPortStartScheduler+0x140>)
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ef9e:	f000 f8f9 	bl	800f194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800efa2:	4b10      	ldr	r3, [pc, #64]	@ (800efe4 <xPortStartScheduler+0x144>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a0f      	ldr	r2, [pc, #60]	@ (800efe4 <xPortStartScheduler+0x144>)
 800efa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800efac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800efae:	f7ff ff63 	bl	800ee78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800efb2:	f7fe ff21 	bl	800ddf8 <vTaskSwitchContext>
	prvTaskExitError();
 800efb6:	f7ff ff1d 	bl	800edf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	e000ed00 	.word	0xe000ed00
 800efc8:	410fc271 	.word	0x410fc271
 800efcc:	410fc270 	.word	0x410fc270
 800efd0:	e000e400 	.word	0xe000e400
 800efd4:	200012d0 	.word	0x200012d0
 800efd8:	200012d4 	.word	0x200012d4
 800efdc:	e000ed20 	.word	0xe000ed20
 800efe0:	2000000c 	.word	0x2000000c
 800efe4:	e000ef34 	.word	0xe000ef34

0800efe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
	__asm volatile
 800efee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	607b      	str	r3, [r7, #4]
}
 800f000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f002:	4b10      	ldr	r3, [pc, #64]	@ (800f044 <vPortEnterCritical+0x5c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	3301      	adds	r3, #1
 800f008:	4a0e      	ldr	r2, [pc, #56]	@ (800f044 <vPortEnterCritical+0x5c>)
 800f00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f00c:	4b0d      	ldr	r3, [pc, #52]	@ (800f044 <vPortEnterCritical+0x5c>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b01      	cmp	r3, #1
 800f012:	d110      	bne.n	800f036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f014:	4b0c      	ldr	r3, [pc, #48]	@ (800f048 <vPortEnterCritical+0x60>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00b      	beq.n	800f036 <vPortEnterCritical+0x4e>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	603b      	str	r3, [r7, #0]
}
 800f030:	bf00      	nop
 800f032:	bf00      	nop
 800f034:	e7fd      	b.n	800f032 <vPortEnterCritical+0x4a>
	}
}
 800f036:	bf00      	nop
 800f038:	370c      	adds	r7, #12
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop
 800f044:	2000000c 	.word	0x2000000c
 800f048:	e000ed04 	.word	0xe000ed04

0800f04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f04c:	b480      	push	{r7}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f052:	4b12      	ldr	r3, [pc, #72]	@ (800f09c <vPortExitCritical+0x50>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d10b      	bne.n	800f072 <vPortExitCritical+0x26>
	__asm volatile
 800f05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05e:	f383 8811 	msr	BASEPRI, r3
 800f062:	f3bf 8f6f 	isb	sy
 800f066:	f3bf 8f4f 	dsb	sy
 800f06a:	607b      	str	r3, [r7, #4]
}
 800f06c:	bf00      	nop
 800f06e:	bf00      	nop
 800f070:	e7fd      	b.n	800f06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f072:	4b0a      	ldr	r3, [pc, #40]	@ (800f09c <vPortExitCritical+0x50>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	3b01      	subs	r3, #1
 800f078:	4a08      	ldr	r2, [pc, #32]	@ (800f09c <vPortExitCritical+0x50>)
 800f07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f07c:	4b07      	ldr	r3, [pc, #28]	@ (800f09c <vPortExitCritical+0x50>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d105      	bne.n	800f090 <vPortExitCritical+0x44>
 800f084:	2300      	movs	r3, #0
 800f086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	f383 8811 	msr	BASEPRI, r3
}
 800f08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f090:	bf00      	nop
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	2000000c 	.word	0x2000000c

0800f0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f0a0:	f3ef 8009 	mrs	r0, PSP
 800f0a4:	f3bf 8f6f 	isb	sy
 800f0a8:	4b15      	ldr	r3, [pc, #84]	@ (800f100 <pxCurrentTCBConst>)
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	f01e 0f10 	tst.w	lr, #16
 800f0b0:	bf08      	it	eq
 800f0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ba:	6010      	str	r0, [r2, #0]
 800f0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f0c4:	f380 8811 	msr	BASEPRI, r0
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	f7fe fe92 	bl	800ddf8 <vTaskSwitchContext>
 800f0d4:	f04f 0000 	mov.w	r0, #0
 800f0d8:	f380 8811 	msr	BASEPRI, r0
 800f0dc:	bc09      	pop	{r0, r3}
 800f0de:	6819      	ldr	r1, [r3, #0]
 800f0e0:	6808      	ldr	r0, [r1, #0]
 800f0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e6:	f01e 0f10 	tst.w	lr, #16
 800f0ea:	bf08      	it	eq
 800f0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f0f0:	f380 8809 	msr	PSP, r0
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop
 800f0fc:	f3af 8000 	nop.w

0800f100 <pxCurrentTCBConst>:
 800f100:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f104:	bf00      	nop
 800f106:	bf00      	nop

0800f108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	607b      	str	r3, [r7, #4]
}
 800f120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f122:	f7fe fdaf 	bl	800dc84 <xTaskIncrementTick>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d003      	beq.n	800f134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f12c:	4b06      	ldr	r3, [pc, #24]	@ (800f148 <xPortSysTickHandler+0x40>)
 800f12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f132:	601a      	str	r2, [r3, #0]
 800f134:	2300      	movs	r3, #0
 800f136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	f383 8811 	msr	BASEPRI, r3
}
 800f13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f140:	bf00      	nop
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	e000ed04 	.word	0xe000ed04

0800f14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f14c:	b480      	push	{r7}
 800f14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f150:	4b0b      	ldr	r3, [pc, #44]	@ (800f180 <vPortSetupTimerInterrupt+0x34>)
 800f152:	2200      	movs	r2, #0
 800f154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f156:	4b0b      	ldr	r3, [pc, #44]	@ (800f184 <vPortSetupTimerInterrupt+0x38>)
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f15c:	4b0a      	ldr	r3, [pc, #40]	@ (800f188 <vPortSetupTimerInterrupt+0x3c>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a0a      	ldr	r2, [pc, #40]	@ (800f18c <vPortSetupTimerInterrupt+0x40>)
 800f162:	fba2 2303 	umull	r2, r3, r2, r3
 800f166:	099b      	lsrs	r3, r3, #6
 800f168:	4a09      	ldr	r2, [pc, #36]	@ (800f190 <vPortSetupTimerInterrupt+0x44>)
 800f16a:	3b01      	subs	r3, #1
 800f16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f16e:	4b04      	ldr	r3, [pc, #16]	@ (800f180 <vPortSetupTimerInterrupt+0x34>)
 800f170:	2207      	movs	r2, #7
 800f172:	601a      	str	r2, [r3, #0]
}
 800f174:	bf00      	nop
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	e000e010 	.word	0xe000e010
 800f184:	e000e018 	.word	0xe000e018
 800f188:	20000000 	.word	0x20000000
 800f18c:	10624dd3 	.word	0x10624dd3
 800f190:	e000e014 	.word	0xe000e014

0800f194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f1a4 <vPortEnableVFP+0x10>
 800f198:	6801      	ldr	r1, [r0, #0]
 800f19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f19e:	6001      	str	r1, [r0, #0]
 800f1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f1a2:	bf00      	nop
 800f1a4:	e000ed88 	.word	0xe000ed88

0800f1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f1ae:	f3ef 8305 	mrs	r3, IPSR
 800f1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2b0f      	cmp	r3, #15
 800f1b8:	d915      	bls.n	800f1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f1ba:	4a18      	ldr	r2, [pc, #96]	@ (800f21c <vPortValidateInterruptPriority+0x74>)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	4413      	add	r3, r2
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f1c4:	4b16      	ldr	r3, [pc, #88]	@ (800f220 <vPortValidateInterruptPriority+0x78>)
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	7afa      	ldrb	r2, [r7, #11]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d20b      	bcs.n	800f1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d2:	f383 8811 	msr	BASEPRI, r3
 800f1d6:	f3bf 8f6f 	isb	sy
 800f1da:	f3bf 8f4f 	dsb	sy
 800f1de:	607b      	str	r3, [r7, #4]
}
 800f1e0:	bf00      	nop
 800f1e2:	bf00      	nop
 800f1e4:	e7fd      	b.n	800f1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800f224 <vPortValidateInterruptPriority+0x7c>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f228 <vPortValidateInterruptPriority+0x80>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d90b      	bls.n	800f20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1fa:	f383 8811 	msr	BASEPRI, r3
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	603b      	str	r3, [r7, #0]
}
 800f208:	bf00      	nop
 800f20a:	bf00      	nop
 800f20c:	e7fd      	b.n	800f20a <vPortValidateInterruptPriority+0x62>
	}
 800f20e:	bf00      	nop
 800f210:	3714      	adds	r7, #20
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	e000e3f0 	.word	0xe000e3f0
 800f220:	200012d0 	.word	0x200012d0
 800f224:	e000ed0c 	.word	0xe000ed0c
 800f228:	200012d4 	.word	0x200012d4

0800f22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b08a      	sub	sp, #40	@ 0x28
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f234:	2300      	movs	r3, #0
 800f236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f238:	f7fe fc56 	bl	800dae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f23c:	4b5c      	ldr	r3, [pc, #368]	@ (800f3b0 <pvPortMalloc+0x184>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d101      	bne.n	800f248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f244:	f000 f924 	bl	800f490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f248:	4b5a      	ldr	r3, [pc, #360]	@ (800f3b4 <pvPortMalloc+0x188>)
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4013      	ands	r3, r2
 800f250:	2b00      	cmp	r3, #0
 800f252:	f040 8095 	bne.w	800f380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d01e      	beq.n	800f29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f25c:	2208      	movs	r2, #8
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4413      	add	r3, r2
 800f262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f003 0307 	and.w	r3, r3, #7
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d015      	beq.n	800f29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f023 0307 	bic.w	r3, r3, #7
 800f274:	3308      	adds	r3, #8
 800f276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f003 0307 	and.w	r3, r3, #7
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d00b      	beq.n	800f29a <pvPortMalloc+0x6e>
	__asm volatile
 800f282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f286:	f383 8811 	msr	BASEPRI, r3
 800f28a:	f3bf 8f6f 	isb	sy
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	617b      	str	r3, [r7, #20]
}
 800f294:	bf00      	nop
 800f296:	bf00      	nop
 800f298:	e7fd      	b.n	800f296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d06f      	beq.n	800f380 <pvPortMalloc+0x154>
 800f2a0:	4b45      	ldr	r3, [pc, #276]	@ (800f3b8 <pvPortMalloc+0x18c>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d86a      	bhi.n	800f380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f2aa:	4b44      	ldr	r3, [pc, #272]	@ (800f3bc <pvPortMalloc+0x190>)
 800f2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f2ae:	4b43      	ldr	r3, [pc, #268]	@ (800f3bc <pvPortMalloc+0x190>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2b4:	e004      	b.n	800f2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d903      	bls.n	800f2d2 <pvPortMalloc+0xa6>
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1f1      	bne.n	800f2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f2d2:	4b37      	ldr	r3, [pc, #220]	@ (800f3b0 <pvPortMalloc+0x184>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d051      	beq.n	800f380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f2dc:	6a3b      	ldr	r3, [r7, #32]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2208      	movs	r2, #8
 800f2e2:	4413      	add	r3, r2
 800f2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	6a3b      	ldr	r3, [r7, #32]
 800f2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f0:	685a      	ldr	r2, [r3, #4]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	1ad2      	subs	r2, r2, r3
 800f2f6:	2308      	movs	r3, #8
 800f2f8:	005b      	lsls	r3, r3, #1
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d920      	bls.n	800f340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4413      	add	r3, r2
 800f304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	f003 0307 	and.w	r3, r3, #7
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00b      	beq.n	800f328 <pvPortMalloc+0xfc>
	__asm volatile
 800f310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	613b      	str	r3, [r7, #16]
}
 800f322:	bf00      	nop
 800f324:	bf00      	nop
 800f326:	e7fd      	b.n	800f324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f32a:	685a      	ldr	r2, [r3, #4]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	1ad2      	subs	r2, r2, r3
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f33a:	69b8      	ldr	r0, [r7, #24]
 800f33c:	f000 f90a 	bl	800f554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f340:	4b1d      	ldr	r3, [pc, #116]	@ (800f3b8 <pvPortMalloc+0x18c>)
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	1ad3      	subs	r3, r2, r3
 800f34a:	4a1b      	ldr	r2, [pc, #108]	@ (800f3b8 <pvPortMalloc+0x18c>)
 800f34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f34e:	4b1a      	ldr	r3, [pc, #104]	@ (800f3b8 <pvPortMalloc+0x18c>)
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	4b1b      	ldr	r3, [pc, #108]	@ (800f3c0 <pvPortMalloc+0x194>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	429a      	cmp	r2, r3
 800f358:	d203      	bcs.n	800f362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f35a:	4b17      	ldr	r3, [pc, #92]	@ (800f3b8 <pvPortMalloc+0x18c>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4a18      	ldr	r2, [pc, #96]	@ (800f3c0 <pvPortMalloc+0x194>)
 800f360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f364:	685a      	ldr	r2, [r3, #4]
 800f366:	4b13      	ldr	r3, [pc, #76]	@ (800f3b4 <pvPortMalloc+0x188>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	431a      	orrs	r2, r3
 800f36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f376:	4b13      	ldr	r3, [pc, #76]	@ (800f3c4 <pvPortMalloc+0x198>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	3301      	adds	r3, #1
 800f37c:	4a11      	ldr	r2, [pc, #68]	@ (800f3c4 <pvPortMalloc+0x198>)
 800f37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f380:	f7fe fbc0 	bl	800db04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	f003 0307 	and.w	r3, r3, #7
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00b      	beq.n	800f3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800f38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	60fb      	str	r3, [r7, #12]
}
 800f3a0:	bf00      	nop
 800f3a2:	bf00      	nop
 800f3a4:	e7fd      	b.n	800f3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800f3a6:	69fb      	ldr	r3, [r7, #28]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3728      	adds	r7, #40	@ 0x28
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	20003220 	.word	0x20003220
 800f3b4:	20003234 	.word	0x20003234
 800f3b8:	20003224 	.word	0x20003224
 800f3bc:	20003218 	.word	0x20003218
 800f3c0:	20003228 	.word	0x20003228
 800f3c4:	2000322c 	.word	0x2000322c

0800f3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d04f      	beq.n	800f47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f3da:	2308      	movs	r3, #8
 800f3dc:	425b      	negs	r3, r3
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	685a      	ldr	r2, [r3, #4]
 800f3ec:	4b25      	ldr	r3, [pc, #148]	@ (800f484 <vPortFree+0xbc>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10b      	bne.n	800f40e <vPortFree+0x46>
	__asm volatile
 800f3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	60fb      	str	r3, [r7, #12]
}
 800f408:	bf00      	nop
 800f40a:	bf00      	nop
 800f40c:	e7fd      	b.n	800f40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00b      	beq.n	800f42e <vPortFree+0x66>
	__asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f41a:	f383 8811 	msr	BASEPRI, r3
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f3bf 8f4f 	dsb	sy
 800f426:	60bb      	str	r3, [r7, #8]
}
 800f428:	bf00      	nop
 800f42a:	bf00      	nop
 800f42c:	e7fd      	b.n	800f42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	4b14      	ldr	r3, [pc, #80]	@ (800f484 <vPortFree+0xbc>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4013      	ands	r3, r2
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d01e      	beq.n	800f47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d11a      	bne.n	800f47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	685a      	ldr	r2, [r3, #4]
 800f448:	4b0e      	ldr	r3, [pc, #56]	@ (800f484 <vPortFree+0xbc>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	43db      	mvns	r3, r3
 800f44e:	401a      	ands	r2, r3
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f454:	f7fe fb48 	bl	800dae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	4b0a      	ldr	r3, [pc, #40]	@ (800f488 <vPortFree+0xc0>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4413      	add	r3, r2
 800f462:	4a09      	ldr	r2, [pc, #36]	@ (800f488 <vPortFree+0xc0>)
 800f464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f466:	6938      	ldr	r0, [r7, #16]
 800f468:	f000 f874 	bl	800f554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f46c:	4b07      	ldr	r3, [pc, #28]	@ (800f48c <vPortFree+0xc4>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	3301      	adds	r3, #1
 800f472:	4a06      	ldr	r2, [pc, #24]	@ (800f48c <vPortFree+0xc4>)
 800f474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f476:	f7fe fb45 	bl	800db04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f47a:	bf00      	nop
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	20003234 	.word	0x20003234
 800f488:	20003224 	.word	0x20003224
 800f48c:	20003230 	.word	0x20003230

0800f490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f496:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800f49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f49c:	4b27      	ldr	r3, [pc, #156]	@ (800f53c <prvHeapInit+0xac>)
 800f49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f003 0307 	and.w	r3, r3, #7
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00c      	beq.n	800f4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	3307      	adds	r3, #7
 800f4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f023 0307 	bic.w	r3, r3, #7
 800f4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f4b8:	68ba      	ldr	r2, [r7, #8]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	4a1f      	ldr	r2, [pc, #124]	@ (800f53c <prvHeapInit+0xac>)
 800f4c0:	4413      	add	r3, r2
 800f4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800f540 <prvHeapInit+0xb0>)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800f540 <prvHeapInit+0xb0>)
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	4413      	add	r3, r2
 800f4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f4dc:	2208      	movs	r2, #8
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	1a9b      	subs	r3, r3, r2
 800f4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f023 0307 	bic.w	r3, r3, #7
 800f4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	4a15      	ldr	r2, [pc, #84]	@ (800f544 <prvHeapInit+0xb4>)
 800f4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f4f2:	4b14      	ldr	r3, [pc, #80]	@ (800f544 <prvHeapInit+0xb4>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f4fa:	4b12      	ldr	r3, [pc, #72]	@ (800f544 <prvHeapInit+0xb4>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2200      	movs	r2, #0
 800f500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	68fa      	ldr	r2, [r7, #12]
 800f50a:	1ad2      	subs	r2, r2, r3
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f510:	4b0c      	ldr	r3, [pc, #48]	@ (800f544 <prvHeapInit+0xb4>)
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	4a0a      	ldr	r2, [pc, #40]	@ (800f548 <prvHeapInit+0xb8>)
 800f51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	4a09      	ldr	r2, [pc, #36]	@ (800f54c <prvHeapInit+0xbc>)
 800f526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f528:	4b09      	ldr	r3, [pc, #36]	@ (800f550 <prvHeapInit+0xc0>)
 800f52a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f52e:	601a      	str	r2, [r3, #0]
}
 800f530:	bf00      	nop
 800f532:	3714      	adds	r7, #20
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr
 800f53c:	200012d8 	.word	0x200012d8
 800f540:	20003218 	.word	0x20003218
 800f544:	20003220 	.word	0x20003220
 800f548:	20003228 	.word	0x20003228
 800f54c:	20003224 	.word	0x20003224
 800f550:	20003234 	.word	0x20003234

0800f554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f55c:	4b28      	ldr	r3, [pc, #160]	@ (800f600 <prvInsertBlockIntoFreeList+0xac>)
 800f55e:	60fb      	str	r3, [r7, #12]
 800f560:	e002      	b.n	800f568 <prvInsertBlockIntoFreeList+0x14>
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	60fb      	str	r3, [r7, #12]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d8f7      	bhi.n	800f562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	4413      	add	r3, r2
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	429a      	cmp	r2, r3
 800f582:	d108      	bne.n	800f596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	685a      	ldr	r2, [r3, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	441a      	add	r2, r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	441a      	add	r2, r3
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d118      	bne.n	800f5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	4b15      	ldr	r3, [pc, #84]	@ (800f604 <prvInsertBlockIntoFreeList+0xb0>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d00d      	beq.n	800f5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	685a      	ldr	r2, [r3, #4]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	441a      	add	r2, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	e008      	b.n	800f5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f604 <prvInsertBlockIntoFreeList+0xb0>)
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	e003      	b.n	800f5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d002      	beq.n	800f5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5f2:	bf00      	nop
 800f5f4:	3714      	adds	r7, #20
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	20003218 	.word	0x20003218
 800f604:	20003220 	.word	0x20003220

0800f608 <memset>:
 800f608:	4402      	add	r2, r0
 800f60a:	4603      	mov	r3, r0
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d100      	bne.n	800f612 <memset+0xa>
 800f610:	4770      	bx	lr
 800f612:	f803 1b01 	strb.w	r1, [r3], #1
 800f616:	e7f9      	b.n	800f60c <memset+0x4>

0800f618 <_reclaim_reent>:
 800f618:	4b29      	ldr	r3, [pc, #164]	@ (800f6c0 <_reclaim_reent+0xa8>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4283      	cmp	r3, r0
 800f61e:	b570      	push	{r4, r5, r6, lr}
 800f620:	4604      	mov	r4, r0
 800f622:	d04b      	beq.n	800f6bc <_reclaim_reent+0xa4>
 800f624:	69c3      	ldr	r3, [r0, #28]
 800f626:	b1ab      	cbz	r3, 800f654 <_reclaim_reent+0x3c>
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	b16b      	cbz	r3, 800f648 <_reclaim_reent+0x30>
 800f62c:	2500      	movs	r5, #0
 800f62e:	69e3      	ldr	r3, [r4, #28]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	5959      	ldr	r1, [r3, r5]
 800f634:	2900      	cmp	r1, #0
 800f636:	d13b      	bne.n	800f6b0 <_reclaim_reent+0x98>
 800f638:	3504      	adds	r5, #4
 800f63a:	2d80      	cmp	r5, #128	@ 0x80
 800f63c:	d1f7      	bne.n	800f62e <_reclaim_reent+0x16>
 800f63e:	69e3      	ldr	r3, [r4, #28]
 800f640:	4620      	mov	r0, r4
 800f642:	68d9      	ldr	r1, [r3, #12]
 800f644:	f000 f878 	bl	800f738 <_free_r>
 800f648:	69e3      	ldr	r3, [r4, #28]
 800f64a:	6819      	ldr	r1, [r3, #0]
 800f64c:	b111      	cbz	r1, 800f654 <_reclaim_reent+0x3c>
 800f64e:	4620      	mov	r0, r4
 800f650:	f000 f872 	bl	800f738 <_free_r>
 800f654:	6961      	ldr	r1, [r4, #20]
 800f656:	b111      	cbz	r1, 800f65e <_reclaim_reent+0x46>
 800f658:	4620      	mov	r0, r4
 800f65a:	f000 f86d 	bl	800f738 <_free_r>
 800f65e:	69e1      	ldr	r1, [r4, #28]
 800f660:	b111      	cbz	r1, 800f668 <_reclaim_reent+0x50>
 800f662:	4620      	mov	r0, r4
 800f664:	f000 f868 	bl	800f738 <_free_r>
 800f668:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f66a:	b111      	cbz	r1, 800f672 <_reclaim_reent+0x5a>
 800f66c:	4620      	mov	r0, r4
 800f66e:	f000 f863 	bl	800f738 <_free_r>
 800f672:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f674:	b111      	cbz	r1, 800f67c <_reclaim_reent+0x64>
 800f676:	4620      	mov	r0, r4
 800f678:	f000 f85e 	bl	800f738 <_free_r>
 800f67c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f67e:	b111      	cbz	r1, 800f686 <_reclaim_reent+0x6e>
 800f680:	4620      	mov	r0, r4
 800f682:	f000 f859 	bl	800f738 <_free_r>
 800f686:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f688:	b111      	cbz	r1, 800f690 <_reclaim_reent+0x78>
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 f854 	bl	800f738 <_free_r>
 800f690:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f692:	b111      	cbz	r1, 800f69a <_reclaim_reent+0x82>
 800f694:	4620      	mov	r0, r4
 800f696:	f000 f84f 	bl	800f738 <_free_r>
 800f69a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f69c:	b111      	cbz	r1, 800f6a4 <_reclaim_reent+0x8c>
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f000 f84a 	bl	800f738 <_free_r>
 800f6a4:	6a23      	ldr	r3, [r4, #32]
 800f6a6:	b14b      	cbz	r3, 800f6bc <_reclaim_reent+0xa4>
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6ae:	4718      	bx	r3
 800f6b0:	680e      	ldr	r6, [r1, #0]
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f000 f840 	bl	800f738 <_free_r>
 800f6b8:	4631      	mov	r1, r6
 800f6ba:	e7bb      	b.n	800f634 <_reclaim_reent+0x1c>
 800f6bc:	bd70      	pop	{r4, r5, r6, pc}
 800f6be:	bf00      	nop
 800f6c0:	20000010 	.word	0x20000010

0800f6c4 <__errno>:
 800f6c4:	4b01      	ldr	r3, [pc, #4]	@ (800f6cc <__errno+0x8>)
 800f6c6:	6818      	ldr	r0, [r3, #0]
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	20000010 	.word	0x20000010

0800f6d0 <__libc_init_array>:
 800f6d0:	b570      	push	{r4, r5, r6, lr}
 800f6d2:	4d0d      	ldr	r5, [pc, #52]	@ (800f708 <__libc_init_array+0x38>)
 800f6d4:	4c0d      	ldr	r4, [pc, #52]	@ (800f70c <__libc_init_array+0x3c>)
 800f6d6:	1b64      	subs	r4, r4, r5
 800f6d8:	10a4      	asrs	r4, r4, #2
 800f6da:	2600      	movs	r6, #0
 800f6dc:	42a6      	cmp	r6, r4
 800f6de:	d109      	bne.n	800f6f4 <__libc_init_array+0x24>
 800f6e0:	4d0b      	ldr	r5, [pc, #44]	@ (800f710 <__libc_init_array+0x40>)
 800f6e2:	4c0c      	ldr	r4, [pc, #48]	@ (800f714 <__libc_init_array+0x44>)
 800f6e4:	f000 f9b6 	bl	800fa54 <_init>
 800f6e8:	1b64      	subs	r4, r4, r5
 800f6ea:	10a4      	asrs	r4, r4, #2
 800f6ec:	2600      	movs	r6, #0
 800f6ee:	42a6      	cmp	r6, r4
 800f6f0:	d105      	bne.n	800f6fe <__libc_init_array+0x2e>
 800f6f2:	bd70      	pop	{r4, r5, r6, pc}
 800f6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6f8:	4798      	blx	r3
 800f6fa:	3601      	adds	r6, #1
 800f6fc:	e7ee      	b.n	800f6dc <__libc_init_array+0xc>
 800f6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f702:	4798      	blx	r3
 800f704:	3601      	adds	r6, #1
 800f706:	e7f2      	b.n	800f6ee <__libc_init_array+0x1e>
 800f708:	08010270 	.word	0x08010270
 800f70c:	08010270 	.word	0x08010270
 800f710:	08010270 	.word	0x08010270
 800f714:	08010274 	.word	0x08010274

0800f718 <__retarget_lock_acquire_recursive>:
 800f718:	4770      	bx	lr

0800f71a <__retarget_lock_release_recursive>:
 800f71a:	4770      	bx	lr

0800f71c <memcpy>:
 800f71c:	440a      	add	r2, r1
 800f71e:	4291      	cmp	r1, r2
 800f720:	f100 33ff 	add.w	r3, r0, #4294967295
 800f724:	d100      	bne.n	800f728 <memcpy+0xc>
 800f726:	4770      	bx	lr
 800f728:	b510      	push	{r4, lr}
 800f72a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f72e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f732:	4291      	cmp	r1, r2
 800f734:	d1f9      	bne.n	800f72a <memcpy+0xe>
 800f736:	bd10      	pop	{r4, pc}

0800f738 <_free_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4605      	mov	r5, r0
 800f73c:	2900      	cmp	r1, #0
 800f73e:	d041      	beq.n	800f7c4 <_free_r+0x8c>
 800f740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f744:	1f0c      	subs	r4, r1, #4
 800f746:	2b00      	cmp	r3, #0
 800f748:	bfb8      	it	lt
 800f74a:	18e4      	addlt	r4, r4, r3
 800f74c:	f000 f83e 	bl	800f7cc <__malloc_lock>
 800f750:	4a1d      	ldr	r2, [pc, #116]	@ (800f7c8 <_free_r+0x90>)
 800f752:	6813      	ldr	r3, [r2, #0]
 800f754:	b933      	cbnz	r3, 800f764 <_free_r+0x2c>
 800f756:	6063      	str	r3, [r4, #4]
 800f758:	6014      	str	r4, [r2, #0]
 800f75a:	4628      	mov	r0, r5
 800f75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f760:	f000 b83a 	b.w	800f7d8 <__malloc_unlock>
 800f764:	42a3      	cmp	r3, r4
 800f766:	d908      	bls.n	800f77a <_free_r+0x42>
 800f768:	6820      	ldr	r0, [r4, #0]
 800f76a:	1821      	adds	r1, r4, r0
 800f76c:	428b      	cmp	r3, r1
 800f76e:	bf01      	itttt	eq
 800f770:	6819      	ldreq	r1, [r3, #0]
 800f772:	685b      	ldreq	r3, [r3, #4]
 800f774:	1809      	addeq	r1, r1, r0
 800f776:	6021      	streq	r1, [r4, #0]
 800f778:	e7ed      	b.n	800f756 <_free_r+0x1e>
 800f77a:	461a      	mov	r2, r3
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	b10b      	cbz	r3, 800f784 <_free_r+0x4c>
 800f780:	42a3      	cmp	r3, r4
 800f782:	d9fa      	bls.n	800f77a <_free_r+0x42>
 800f784:	6811      	ldr	r1, [r2, #0]
 800f786:	1850      	adds	r0, r2, r1
 800f788:	42a0      	cmp	r0, r4
 800f78a:	d10b      	bne.n	800f7a4 <_free_r+0x6c>
 800f78c:	6820      	ldr	r0, [r4, #0]
 800f78e:	4401      	add	r1, r0
 800f790:	1850      	adds	r0, r2, r1
 800f792:	4283      	cmp	r3, r0
 800f794:	6011      	str	r1, [r2, #0]
 800f796:	d1e0      	bne.n	800f75a <_free_r+0x22>
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	6053      	str	r3, [r2, #4]
 800f79e:	4408      	add	r0, r1
 800f7a0:	6010      	str	r0, [r2, #0]
 800f7a2:	e7da      	b.n	800f75a <_free_r+0x22>
 800f7a4:	d902      	bls.n	800f7ac <_free_r+0x74>
 800f7a6:	230c      	movs	r3, #12
 800f7a8:	602b      	str	r3, [r5, #0]
 800f7aa:	e7d6      	b.n	800f75a <_free_r+0x22>
 800f7ac:	6820      	ldr	r0, [r4, #0]
 800f7ae:	1821      	adds	r1, r4, r0
 800f7b0:	428b      	cmp	r3, r1
 800f7b2:	bf04      	itt	eq
 800f7b4:	6819      	ldreq	r1, [r3, #0]
 800f7b6:	685b      	ldreq	r3, [r3, #4]
 800f7b8:	6063      	str	r3, [r4, #4]
 800f7ba:	bf04      	itt	eq
 800f7bc:	1809      	addeq	r1, r1, r0
 800f7be:	6021      	streq	r1, [r4, #0]
 800f7c0:	6054      	str	r4, [r2, #4]
 800f7c2:	e7ca      	b.n	800f75a <_free_r+0x22>
 800f7c4:	bd38      	pop	{r3, r4, r5, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20003374 	.word	0x20003374

0800f7cc <__malloc_lock>:
 800f7cc:	4801      	ldr	r0, [pc, #4]	@ (800f7d4 <__malloc_lock+0x8>)
 800f7ce:	f7ff bfa3 	b.w	800f718 <__retarget_lock_acquire_recursive>
 800f7d2:	bf00      	nop
 800f7d4:	20003370 	.word	0x20003370

0800f7d8 <__malloc_unlock>:
 800f7d8:	4801      	ldr	r0, [pc, #4]	@ (800f7e0 <__malloc_unlock+0x8>)
 800f7da:	f7ff bf9e 	b.w	800f71a <__retarget_lock_release_recursive>
 800f7de:	bf00      	nop
 800f7e0:	20003370 	.word	0x20003370

0800f7e4 <fmod>:
 800f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e6:	ed2d 8b02 	vpush	{d8}
 800f7ea:	ec57 6b10 	vmov	r6, r7, d0
 800f7ee:	ec55 4b11 	vmov	r4, r5, d1
 800f7f2:	f000 f825 	bl	800f840 <__ieee754_fmod>
 800f7f6:	4622      	mov	r2, r4
 800f7f8:	462b      	mov	r3, r5
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	eeb0 8a40 	vmov.f32	s16, s0
 800f802:	eef0 8a60 	vmov.f32	s17, s1
 800f806:	f7f1 f939 	bl	8000a7c <__aeabi_dcmpun>
 800f80a:	b990      	cbnz	r0, 800f832 <fmod+0x4e>
 800f80c:	2200      	movs	r2, #0
 800f80e:	2300      	movs	r3, #0
 800f810:	4620      	mov	r0, r4
 800f812:	4629      	mov	r1, r5
 800f814:	f7f1 f900 	bl	8000a18 <__aeabi_dcmpeq>
 800f818:	b158      	cbz	r0, 800f832 <fmod+0x4e>
 800f81a:	f7ff ff53 	bl	800f6c4 <__errno>
 800f81e:	2321      	movs	r3, #33	@ 0x21
 800f820:	6003      	str	r3, [r0, #0]
 800f822:	2200      	movs	r2, #0
 800f824:	2300      	movs	r3, #0
 800f826:	4610      	mov	r0, r2
 800f828:	4619      	mov	r1, r3
 800f82a:	f7f0 ffb7 	bl	800079c <__aeabi_ddiv>
 800f82e:	ec41 0b18 	vmov	d8, r0, r1
 800f832:	eeb0 0a48 	vmov.f32	s0, s16
 800f836:	eef0 0a68 	vmov.f32	s1, s17
 800f83a:	ecbd 8b02 	vpop	{d8}
 800f83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f840 <__ieee754_fmod>:
 800f840:	ec53 2b11 	vmov	r2, r3, d1
 800f844:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800f848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f84c:	ea52 040c 	orrs.w	r4, r2, ip
 800f850:	ec51 0b10 	vmov	r0, r1, d0
 800f854:	461e      	mov	r6, r3
 800f856:	4617      	mov	r7, r2
 800f858:	4696      	mov	lr, r2
 800f85a:	d00c      	beq.n	800f876 <__ieee754_fmod+0x36>
 800f85c:	4c77      	ldr	r4, [pc, #476]	@ (800fa3c <__ieee754_fmod+0x1fc>)
 800f85e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800f862:	45a0      	cmp	r8, r4
 800f864:	4689      	mov	r9, r1
 800f866:	d806      	bhi.n	800f876 <__ieee754_fmod+0x36>
 800f868:	4254      	negs	r4, r2
 800f86a:	4d75      	ldr	r5, [pc, #468]	@ (800fa40 <__ieee754_fmod+0x200>)
 800f86c:	4314      	orrs	r4, r2
 800f86e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800f872:	42ac      	cmp	r4, r5
 800f874:	d909      	bls.n	800f88a <__ieee754_fmod+0x4a>
 800f876:	f7f0 fe67 	bl	8000548 <__aeabi_dmul>
 800f87a:	4602      	mov	r2, r0
 800f87c:	460b      	mov	r3, r1
 800f87e:	f7f0 ff8d 	bl	800079c <__aeabi_ddiv>
 800f882:	ec41 0b10 	vmov	d0, r0, r1
 800f886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f88a:	45e0      	cmp	r8, ip
 800f88c:	4682      	mov	sl, r0
 800f88e:	4604      	mov	r4, r0
 800f890:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800f894:	dc09      	bgt.n	800f8aa <__ieee754_fmod+0x6a>
 800f896:	dbf4      	blt.n	800f882 <__ieee754_fmod+0x42>
 800f898:	4282      	cmp	r2, r0
 800f89a:	d8f2      	bhi.n	800f882 <__ieee754_fmod+0x42>
 800f89c:	d105      	bne.n	800f8aa <__ieee754_fmod+0x6a>
 800f89e:	4b69      	ldr	r3, [pc, #420]	@ (800fa44 <__ieee754_fmod+0x204>)
 800f8a0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800f8a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8a8:	e7eb      	b.n	800f882 <__ieee754_fmod+0x42>
 800f8aa:	4a65      	ldr	r2, [pc, #404]	@ (800fa40 <__ieee754_fmod+0x200>)
 800f8ac:	ea19 0f02 	tst.w	r9, r2
 800f8b0:	d148      	bne.n	800f944 <__ieee754_fmod+0x104>
 800f8b2:	f1b8 0f00 	cmp.w	r8, #0
 800f8b6:	d13d      	bne.n	800f934 <__ieee754_fmod+0xf4>
 800f8b8:	4963      	ldr	r1, [pc, #396]	@ (800fa48 <__ieee754_fmod+0x208>)
 800f8ba:	4653      	mov	r3, sl
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	dc36      	bgt.n	800f92e <__ieee754_fmod+0xee>
 800f8c0:	4216      	tst	r6, r2
 800f8c2:	d14f      	bne.n	800f964 <__ieee754_fmod+0x124>
 800f8c4:	f1bc 0f00 	cmp.w	ip, #0
 800f8c8:	d144      	bne.n	800f954 <__ieee754_fmod+0x114>
 800f8ca:	4a5f      	ldr	r2, [pc, #380]	@ (800fa48 <__ieee754_fmod+0x208>)
 800f8cc:	463b      	mov	r3, r7
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	dc3d      	bgt.n	800f94e <__ieee754_fmod+0x10e>
 800f8d2:	485e      	ldr	r0, [pc, #376]	@ (800fa4c <__ieee754_fmod+0x20c>)
 800f8d4:	4281      	cmp	r1, r0
 800f8d6:	db4a      	blt.n	800f96e <__ieee754_fmod+0x12e>
 800f8d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f8dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f8e0:	485a      	ldr	r0, [pc, #360]	@ (800fa4c <__ieee754_fmod+0x20c>)
 800f8e2:	4282      	cmp	r2, r0
 800f8e4:	db57      	blt.n	800f996 <__ieee754_fmod+0x156>
 800f8e6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800f8ea:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800f8ee:	1a89      	subs	r1, r1, r2
 800f8f0:	1b98      	subs	r0, r3, r6
 800f8f2:	eba4 070e 	sub.w	r7, r4, lr
 800f8f6:	2900      	cmp	r1, #0
 800f8f8:	d162      	bne.n	800f9c0 <__ieee754_fmod+0x180>
 800f8fa:	4574      	cmp	r4, lr
 800f8fc:	bf38      	it	cc
 800f8fe:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f902:	2800      	cmp	r0, #0
 800f904:	bfa4      	itt	ge
 800f906:	463c      	movge	r4, r7
 800f908:	4603      	movge	r3, r0
 800f90a:	ea53 0104 	orrs.w	r1, r3, r4
 800f90e:	d0c6      	beq.n	800f89e <__ieee754_fmod+0x5e>
 800f910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f914:	db69      	blt.n	800f9ea <__ieee754_fmod+0x1aa>
 800f916:	494d      	ldr	r1, [pc, #308]	@ (800fa4c <__ieee754_fmod+0x20c>)
 800f918:	428a      	cmp	r2, r1
 800f91a:	db6c      	blt.n	800f9f6 <__ieee754_fmod+0x1b6>
 800f91c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f920:	432b      	orrs	r3, r5
 800f922:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800f926:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f92a:	4620      	mov	r0, r4
 800f92c:	e7a9      	b.n	800f882 <__ieee754_fmod+0x42>
 800f92e:	3901      	subs	r1, #1
 800f930:	005b      	lsls	r3, r3, #1
 800f932:	e7c3      	b.n	800f8bc <__ieee754_fmod+0x7c>
 800f934:	4945      	ldr	r1, [pc, #276]	@ (800fa4c <__ieee754_fmod+0x20c>)
 800f936:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	ddc0      	ble.n	800f8c0 <__ieee754_fmod+0x80>
 800f93e:	3901      	subs	r1, #1
 800f940:	005b      	lsls	r3, r3, #1
 800f942:	e7fa      	b.n	800f93a <__ieee754_fmod+0xfa>
 800f944:	ea4f 5128 	mov.w	r1, r8, asr #20
 800f948:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f94c:	e7b8      	b.n	800f8c0 <__ieee754_fmod+0x80>
 800f94e:	3a01      	subs	r2, #1
 800f950:	005b      	lsls	r3, r3, #1
 800f952:	e7bc      	b.n	800f8ce <__ieee754_fmod+0x8e>
 800f954:	4a3d      	ldr	r2, [pc, #244]	@ (800fa4c <__ieee754_fmod+0x20c>)
 800f956:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	ddb9      	ble.n	800f8d2 <__ieee754_fmod+0x92>
 800f95e:	3a01      	subs	r2, #1
 800f960:	005b      	lsls	r3, r3, #1
 800f962:	e7fa      	b.n	800f95a <__ieee754_fmod+0x11a>
 800f964:	ea4f 522c 	mov.w	r2, ip, asr #20
 800f968:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f96c:	e7b1      	b.n	800f8d2 <__ieee754_fmod+0x92>
 800f96e:	1a40      	subs	r0, r0, r1
 800f970:	281f      	cmp	r0, #31
 800f972:	dc0a      	bgt.n	800f98a <__ieee754_fmod+0x14a>
 800f974:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800f978:	fa08 f800 	lsl.w	r8, r8, r0
 800f97c:	fa2a f303 	lsr.w	r3, sl, r3
 800f980:	ea43 0308 	orr.w	r3, r3, r8
 800f984:	fa0a f400 	lsl.w	r4, sl, r0
 800f988:	e7aa      	b.n	800f8e0 <__ieee754_fmod+0xa0>
 800f98a:	4b31      	ldr	r3, [pc, #196]	@ (800fa50 <__ieee754_fmod+0x210>)
 800f98c:	1a5b      	subs	r3, r3, r1
 800f98e:	fa0a f303 	lsl.w	r3, sl, r3
 800f992:	2400      	movs	r4, #0
 800f994:	e7a4      	b.n	800f8e0 <__ieee754_fmod+0xa0>
 800f996:	1a80      	subs	r0, r0, r2
 800f998:	281f      	cmp	r0, #31
 800f99a:	dc0a      	bgt.n	800f9b2 <__ieee754_fmod+0x172>
 800f99c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800f9a0:	fa0c fc00 	lsl.w	ip, ip, r0
 800f9a4:	fa27 f606 	lsr.w	r6, r7, r6
 800f9a8:	ea46 060c 	orr.w	r6, r6, ip
 800f9ac:	fa07 fe00 	lsl.w	lr, r7, r0
 800f9b0:	e79d      	b.n	800f8ee <__ieee754_fmod+0xae>
 800f9b2:	4e27      	ldr	r6, [pc, #156]	@ (800fa50 <__ieee754_fmod+0x210>)
 800f9b4:	1ab6      	subs	r6, r6, r2
 800f9b6:	fa07 f606 	lsl.w	r6, r7, r6
 800f9ba:	f04f 0e00 	mov.w	lr, #0
 800f9be:	e796      	b.n	800f8ee <__ieee754_fmod+0xae>
 800f9c0:	4574      	cmp	r4, lr
 800f9c2:	bf38      	it	cc
 800f9c4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	da05      	bge.n	800f9d8 <__ieee754_fmod+0x198>
 800f9cc:	0fe0      	lsrs	r0, r4, #31
 800f9ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f9d2:	0064      	lsls	r4, r4, #1
 800f9d4:	3901      	subs	r1, #1
 800f9d6:	e78b      	b.n	800f8f0 <__ieee754_fmod+0xb0>
 800f9d8:	ea50 0307 	orrs.w	r3, r0, r7
 800f9dc:	f43f af5f 	beq.w	800f89e <__ieee754_fmod+0x5e>
 800f9e0:	0ffb      	lsrs	r3, r7, #31
 800f9e2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800f9e6:	007c      	lsls	r4, r7, #1
 800f9e8:	e7f4      	b.n	800f9d4 <__ieee754_fmod+0x194>
 800f9ea:	0fe1      	lsrs	r1, r4, #31
 800f9ec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f9f0:	0064      	lsls	r4, r4, #1
 800f9f2:	3a01      	subs	r2, #1
 800f9f4:	e78c      	b.n	800f910 <__ieee754_fmod+0xd0>
 800f9f6:	1a89      	subs	r1, r1, r2
 800f9f8:	2914      	cmp	r1, #20
 800f9fa:	dc0a      	bgt.n	800fa12 <__ieee754_fmod+0x1d2>
 800f9fc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800fa00:	fa03 f202 	lsl.w	r2, r3, r2
 800fa04:	40cc      	lsrs	r4, r1
 800fa06:	4322      	orrs	r2, r4
 800fa08:	410b      	asrs	r3, r1
 800fa0a:	ea43 0105 	orr.w	r1, r3, r5
 800fa0e:	4610      	mov	r0, r2
 800fa10:	e737      	b.n	800f882 <__ieee754_fmod+0x42>
 800fa12:	291f      	cmp	r1, #31
 800fa14:	dc07      	bgt.n	800fa26 <__ieee754_fmod+0x1e6>
 800fa16:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800fa1a:	40cc      	lsrs	r4, r1
 800fa1c:	fa03 f202 	lsl.w	r2, r3, r2
 800fa20:	4322      	orrs	r2, r4
 800fa22:	462b      	mov	r3, r5
 800fa24:	e7f1      	b.n	800fa0a <__ieee754_fmod+0x1ca>
 800fa26:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800fa2a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800fa2e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800fa32:	32e2      	adds	r2, #226	@ 0xe2
 800fa34:	fa43 f202 	asr.w	r2, r3, r2
 800fa38:	e7f3      	b.n	800fa22 <__ieee754_fmod+0x1e2>
 800fa3a:	bf00      	nop
 800fa3c:	7fefffff 	.word	0x7fefffff
 800fa40:	7ff00000 	.word	0x7ff00000
 800fa44:	08010258 	.word	0x08010258
 800fa48:	fffffbed 	.word	0xfffffbed
 800fa4c:	fffffc02 	.word	0xfffffc02
 800fa50:	fffffbe2 	.word	0xfffffbe2

0800fa54 <_init>:
 800fa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa56:	bf00      	nop
 800fa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa5a:	bc08      	pop	{r3}
 800fa5c:	469e      	mov	lr, r3
 800fa5e:	4770      	bx	lr

0800fa60 <_fini>:
 800fa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa62:	bf00      	nop
 800fa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa66:	bc08      	pop	{r3}
 800fa68:	469e      	mov	lr, r3
 800fa6a:	4770      	bx	lr
